{"version":3,"sources":["webpack:///test.js","webpack:///webpack/bootstrap 3784fcfa51cbdfac215e","webpack:///./src/index.js","webpack:///./src/utils.js","webpack:///./~/js-beautify/js/index.js","webpack:///./~/js-beautify/js/lib/beautify.js","webpack:///./~/js-beautify/js/lib/beautify-css.js","webpack:///./~/js-beautify/js/lib/beautify-html.js","webpack:///./src/locales ^\\.\\/.*\\.js$","webpack:///./src/locales/ru.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","__WEBPACK_AMD_DEFINE_RESULT__","_createClass","Symbol","iterator","obj","constructor","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_utils","ZERO_DATE","Date","console","log","DataFormatter","opts","arguments","undefined","this","extend","locale","debug","setLocale","value","localeData","memoized","_console","apply","a","b","r","n","decimals","factor","Math","pow","round","pattern","direction","toString","s","j","separateThousands","mostLeftDigit","replace","m1","m2","m3","_j2","substr","thousandSeparator","_j","_i","origins","patternIntegerPart","patternDecimalPart","toFixed","split","integerPart","parseInt","decimalPart","applyNumberPattern","decimalSeparator","patternNumeratorPart","patternDenominatorPart","floor","gcd","leftPatternNumeratorPart","rightPatternNumeratorPart","f","patternPowPart","sign","abs","integerPartDivision","res","foundDays","foundHours","foundMinutes","_this","getTime","seconds","minutes","hours","days","dd","d","hh","h","mm","ss","_this2","_locale","daysShort","months","monthsShort","foundAMPM","year","getFullYear","month","getMonth","date","getDate","weekDay","getDay","getHours","getMinutes","getSeconds","ampm","fmin","fmin2","mmin","mmin2","dddd","ddd","mmmmm","mmmm","mmm","yyyy","yy","section","code","Code","append","numberCode","createNumberCode","dateTimeCode","createDateTimeCode","exponentialMatch","zerosCount","match","fractialMatch","zeroPos","decimalMatch","shouldAbsNumber","appendRaw","createNumberExponentialCode","percentMatch","createNumberFractialCode","createNumberDecimalCode","createNumberIntegerCode","test","elapsed","createDateTimeElapsedCode","createDateTimeNormalCode","sectionIndex","sectionsCount","condition","conditionMatch","cond","colorMatch","formatCode","createGeneralCode","createTextCode","_this3","replaces","patternReplaced","push","sections","slice","each","createSectionCode","type","formats","createPatternCode","Function","dataFormatter","_interopRequireDefault","__esModule","default","_toConsumableArray","arr","Array","isArray","arr2","from","func","hasOwnProperty","map","_len","_key","formatString","_len2","args","_key2","number","_jsBeautify","_jsBeautify2","_len3","values","_key3","val","JSON","stringify","concat","makeString","str","get_beautify","js_beautify","css_beautify","html_beautify","beautify","src","config","js","css","html","__WEBPACK_AMD_DEFINE_ARRAY__","o","k","js_source_text","options","in_array","what","trim","ltrim","sanitizeOperatorPosition","opPosition","OPERATOR_POSITION","before_newline","validPositionValues","Error","Beautifier","create_flags","flags_base","mode","next_indent_level","indentation_level","output","just_added_newline","line_indent_level","next_flags","parent","last_text","last_word","declaration_statement","declaration_assignment","multiline_frame","inline_frame","if_block","else_block","do_block","do_while","import_block","in_case_statement","in_case","case_body","start_line_index","get_line_number","ternary_depth","handle_token","local_token","newlines","keep_whitespace","opt","keep_array_indentation","is_array","flags","print_newline","max_preserve_newlines","preserve_newlines","current_token","handlers","split_linebreaks","acorn","allLineBreaks","out","idx","indexOf","substring","allow_wrap_or_preserved_newline","force_linewrap","shouldPreserveOrForce","wanted_newline","operatorLogicApplies","Tokenizer","positionable_operators","text","shouldPrintOperatorNewline","operator_position","OPERATOR_POSITION_BEFORE_OR_PRESERVE","wrap_line_length","last_type","newline_restricted_tokens","proposed_line_length","current_line","get_character_count","space_before_token","force_newline","preserve_statement_flags","MODE","Statement","restore_mode","add_new_line","print_token_line_indentation","whitespace_before","set_indent","print_token","printable_token","raw","add_raw_token","comma_first","previous_line","last","popped","pop","is_empty","add_token","indent","deindent","set_mode","flag_store","previous_flags","ArrayLiteral","is_expression","Expression","ForInitializer","Conditional","remove_redundant_indentation","start_of_object_property","ObjectLiteral","start_of_statement","BlockStatement","last_last_text","all_lines_start_with","lines","line","charAt","each_line_matches_indent","len","is_special_word","word","get_token","offset","index","token_pos","tokens","handle_start_expr","next_mode","line_starters","space_in_paren","space_after_anon_function","space_before_conditional","handle_end_expr","space_in_empty_paren","handle_start_block","next_token","second_token","empty_braces","comments_before","empty_anonymous_function","brace_style","check_token","opened","handle_end_block","handle_word","jslint_happy","just_added_blankline","prefix","handle_semicolon","handle_string","handle_equals","handle_comma","handle_operator","space_before","space_after","in_ternary","isGeneratorAsterisk","isUnary","isColon","isTernaryColon","isOtherColon","after_newline","preserve_newline","handle_block_comment","directives","preserve","test_output_raw","newline","javadoc","starless","lastIndent","lastIndentLength","handle_comment","handle_dot","break_chained_methods","handle_unknown","handle_eof","indent_string","baseIndentString","TK_START_EXPR","TK_END_EXPR","TK_START_BLOCK","TK_END_BLOCK","TK_WORD","TK_RESERVED","TK_SEMICOLON","TK_STRING","TK_EQUALS","TK_OPERATOR","TK_COMMA","TK_BLOCK_COMMENT","TK_COMMENT","TK_DOT","TK_UNKNOWN","TK_EOF","braces_on_own_line","indent_size","indent_char","eol","unescape_strings","e4x","end_with_newline","indent_with_tabs","lineBreak","preindent_index","Output","get_local_token","sweet_code","tokenizer","tokenize","get_code","OutputLine","_character_count","_indent_count","_items","_empty","level","baseIndentLength","indent_length","input","item","remove_indent","result","indent_cache","join","add_outputline","token","x","add_space_before_token","frame","output_length","eat_newlines","get_directives","directives_block_pattern","directive_pattern","lastIndex","directive_match","exec","tokenize_next","resulting_string","whitespace_on_this_line","n_newlines","whitespace_before_token","parser_pos","input_length","last_token","Token","whitespace","digit","allow_decimal","allow_e","local_digit","digit_bin","digit_oct","digit_hex","isIdentifierStart","charCodeAt","isIdentifierChar","reserved_words","comment_match","comment","block_comment_pattern","ignore","directives_end_ignore_pattern","comment_pattern","startXmlRegExp","sep","esc","has_char_escapes","in_char_class","xmlRegExp","xmlStr","rootTag","depth","isEndTag","tagName","isSingletonTag","xmlLength","parse_string","delimiter","allow_unescaped_newlines","start_sub","current_char","unescape_string","sharp","template_pattern","template_match","in_html_comment","punct","pos","s_hex","escaped","String","fromCharCode","next","token_values","open","open_stack","comments","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","source","beautifier","source_text","ch","peek","skipWhitespace","prev_pos","eatWhitespace","eatString","endChars","start","peekString","endChar","whiteRe","eatComment","singleLine","lookBack","toLowerCase","foundNestedPseudoClass","openParen","indentLevel","basebaseIndentString","singleIndent","outdent","indentSize","indentCharacter","selectorSeparatorNewline","selector_separator_newline","newline_between_rules","spaceAroundSelectorSeparator","space_around_selector_separator","parenLevel","nestedLevel","print","singleSpace","newLine","_lastCharWhitespace","keepWhitespace","preserveSingleSpace","isAfterSpace","insideRule","insidePropertyValue","enteringConditionalGroup","top_ch","last_top_ch","isAfterNewline","header","variableOrRule","NESTED_AT_RULE","CONDITIONAL_GROUP_RULE","sweetCode","@page","@font-face","@keyframes","@media","@supports","@document","rtrim","style_html","html_source","Parser","tokenMatcher","add","newToken","doesNotMatch","current_mode","tags","parentcount","parent1","tag_type","token_text","token_type","indent_content","indent_inner_html","Utils","single_token","extra_liners","is_whitespace","traverse_whitespace","input_char","space_or_wrap","content","line_char_count","print_indentation","get_content","indent_handlebars","peek3","get_tag","get_contents_to","name","reg_match","reg_array","end_script","record_tag","tag","indent_level","retrieve_tag","temp_parent","indent_to_tag","tag_start","tag_end","tag_start_char","space","first_attr","orig_pos","orig_line_char_count","get_unformatted","wrapped","indentAttrs","wrap_attributes","count","wrap_attributes_indent_size","indent_character","get_comment","tag_index","tag_offset","tag_complete","tag_check","is_unformatted","unformatted","search","start_pos","matched","orig_tag","delimiterMatcher","tag_name_type","get_full_indent","next_tag","printer","js_source","force","print_token_raw","unindent","multi_parser","max_char","isNaN","t","tag_name","tag_extracted_from_last_output","foundIfOnCurrentLine","lastCheckedOutput","_beautifier","script_indent_level","indent_scripts","indentation","Child_options","child_options","white","_level","reindent","requireamd","webpackContext","req","webpackContextResolve","./ru.js","keys","resolve","General Number","Currency","Fixed","Standard","Percent","Scientific","Yes/No","True/False","On/Off","Short Date","Long Date","General Date","Medium Date","Long Time","Short Time","Medium Time"],"mappings":"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","file":"test.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _utils = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar ZERO_DATE = new Date('1899-12-31T00:00:00.000');\n\t\n\tconsole.log('test');\n\t\n\t//TODO debug is unneccessary, it must be over way with importing beautyfier\n\t\n\tvar DataFormatter = function () {\n\t  function DataFormatter() {\n\t    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    _classCallCheck(this, DataFormatter);\n\t\n\t    // Set default options\n\t    this.opts = (0, _utils.extend)({\n\t      locale: 'ru',\n\t      debug: false\n\t    }, opts);\n\t\n\t    this.setLocale(this.opts.locale);\n\t  }\n\t\n\t  _createClass(DataFormatter, [{\n\t    key: 'setLocale',\n\t    value: function setLocale(locale) {\n\t      var localeData = __webpack_require__(6)(\"./\" + locale + '.js');\n\t      this.locale = localeData.default;\n\t      // Clear saved memoized functions\n\t      this.memoized = {};\n\t    }\n\t  }, {\n\t    key: 'log',\n\t    value: function log() {\n\t      if (this.opts.debug) {\n\t        var _console;\n\t\n\t        (_console = console).log.apply(_console, arguments);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Greatest common divisor\n\t     */\n\t\n\t  }, {\n\t    key: 'gcd',\n\t    value: function gcd(a, b) {\n\t      var r = void 0;\n\t      while (b) {\n\t        r = a % b;\n\t        a = b;\n\t        b = r;\n\t      }\n\t      return a;\n\t    }\n\t  }, {\n\t    key: 'toFixed',\n\t    value: function toFixed(n, decimals) {\n\t      var factor = Math.pow(10, decimals);\n\t      return Math.round(n * factor) / factor;\n\t    }\n\t  }, {\n\t    key: 'applyNumberPattern',\n\t    value: function applyNumberPattern(n, pattern, direction) {\n\t      n = n.toString();\n\t      var s = '';\n\t\n\t      if (direction === 'right') {\n\t        var j = 0;\n\t        var i = -1;\n\t\n\t        while (++i < pattern.length) {\n\t          switch (pattern[i]) {\n\t            case '0':\n\t              s += n[j] || '0';\n\t              j++;\n\t              break;\n\t            case '#':\n\t              s += n[j] || '';\n\t              j++;\n\t              break;\n\t            case '?':\n\t              s += n[j] || ' ';\n\t              j++;\n\t              break;\n\t            case '[':\n\t              while (i < pattern.length && pattern[i] !== ']') {\n\t                s += pattern[i];\n\t                i++;\n\t              }\n\t              i--;\n\t              break;\n\t            default:\n\t              s += pattern[i];\n\t          }\n\t        }\n\t      } else {\n\t        // Should separate thousands\n\t        var separateThousands = false;\n\t        var mostLeftDigit = void 0;\n\t\n\t        pattern = pattern.replace(/(0|#|\\?)(,+?)(0|#|\\?)/g, function (a, m1, m2, m3) {\n\t          separateThousands = true;\n\t          return m1 + m3;\n\t        });\n\t\n\t        // Add separation\n\t        if (separateThousands) {\n\t          var _j2 = n.length - 3;\n\t          while (n[0] === '-' ? _j2 > 1 : _j2 > 0) {\n\t            n = n.substr(0, _j2) + this.locale.thousandSeparator + n.substr(_j2);\n\t            _j2 -= 3;\n\t          }\n\t        }\n\t\n\t        var _j = n.length - 1;\n\t        var _i = pattern.length;\n\t\n\t        while (_i--) {\n\t          switch (pattern[_i]) {\n\t            case '0':\n\t              s = (n[_j] || '0') + s;\n\t              mostLeftDigit = _i;\n\t              _j--;\n\t              break;\n\t            case '#':\n\t              s = (n[_j] || '') + s;\n\t              mostLeftDigit = _i;\n\t              _j--;\n\t              break;\n\t            case '?':\n\t              s = (n[_j] || ' ') + s;\n\t              mostLeftDigit = _i;\n\t              _j--;\n\t              break;\n\t            case ']':\n\t              while (_i > 0 && pattern[_i] !== '[') {\n\t                s = pattern[_i] + s;\n\t                _i--;\n\t              }\n\t              _i++;\n\t              break;\n\t            default:\n\t              s = pattern[_i] + s;\n\t          }\n\t        }\n\t        // Add remaining digits, example: n=1234, ptrn=00, result must be 1234 instead of 34\n\t        if (_j >= 0 && mostLeftDigit !== null) {\n\t          s = s.substr(0, mostLeftDigit) + n.substr(0, _j + 1) + s.substr(mostLeftDigit);\n\t        }\n\t      }\n\t\n\t      return s;\n\t    }\n\t  }, {\n\t    key: 'restoreOrigins',\n\t    value: function restoreOrigins(value, origins) {\n\t      return value.toString().replace(/\\[(?:(\\$*?)|(.*?))\\]/g, function (a, m1) {\n\t        return m1 && origins[m1.length - 1] || '';\n\t      });\n\t    }\n\t  }, {\n\t    key: 'formatAsNumberDecimal',\n\t    value: function formatAsNumberDecimal(n, decimals, patternIntegerPart, patternDecimalPart) {\n\t\n\t      n = this.toFixed(n, decimals).toString().split('.');\n\t      var integerPart = parseInt(n[0]);\n\t      var decimalPart = parseInt(n[1] || 0);\n\t\n\t      return this.applyNumberPattern(integerPart, patternIntegerPart) + this.locale.decimalSeparator + this.applyNumberPattern(decimalPart, patternDecimalPart, 'right');\n\t    }\n\t  }, {\n\t    key: 'formatAsNumberFractial',\n\t    value: function formatAsNumberFractial(n, patternNumeratorPart, patternDenominatorPart) {\n\t      var m = n.toString().split(\".\");\n\t      m = m[1] ? Math.pow(10, m[1].length) : 1;\n\t      n = Math.floor(n * m);\n\t\n\t      var factor = this.gcd(n, m);\n\t\n\t      return this.applyNumberPattern(n / factor, patternNumeratorPart) + '/' + this.applyNumberPattern(m / factor, patternDenominatorPart);\n\t    }\n\t  }, {\n\t    key: 'formatAsNumberFractialMixed',\n\t    value: function formatAsNumberFractialMixed(n, leftPatternNumeratorPart, rightPatternNumeratorPart, patternDenominatorPart) {\n\t      var f = 0;\n\t      var c = 1;\n\t      var factor = 1;\n\t      var m = n.toString().split('.');\n\t\n\t      if (m[1]) {\n\t        c = Math.pow(10, m[1].length);\n\t        f = parseInt(m[1]);\n\t        factor = this.gcd(f, c);\n\t      }\n\t\n\t      return this.applyNumberPattern(Math.floor(n), leftPatternNumeratorPart) + this.applyNumberPattern(f / factor, rightPatternNumeratorPart) + '/' + this.applyNumberPattern(c / factor, patternDenominatorPart);\n\t    }\n\t  }, {\n\t    key: 'formatAsNumberExponential',\n\t    value: function formatAsNumberExponential(n, integerPart, decimalPart, patternIntegerPart, patternDecimalPart, patternPowPart) {\n\t\n\t      var sign = n < 0 ? -1 : 1;\n\t      var pow = 0;\n\t\n\t      if (n !== 0) {\n\t\n\t        n = Math.abs(n);\n\t\n\t        var integerPartDivision = Math.pow(10, integerPart);\n\t\n\t        while (n < integerPartDivision || this.toFixed(n, decimalPart) < integerPartDivision) {\n\t          n *= 10;\n\t          pow++;\n\t        }\n\t\n\t        while (n >= integerPartDivision || this.toFixed(n, decimalPart) >= integerPartDivision) {\n\t          n /= 10;\n\t          pow--;\n\t        }\n\t      }\n\t\n\t      n = this.toFixed(n * sign, decimalPart).toString().split('.');\n\t\n\t      // Build res\n\t      var res = '';\n\t\n\t      // Integer part\n\t      res += this.applyNumberPattern(parseInt(n[0]), patternIntegerPart);\n\t\n\t      // Decimal part\n\t      if (patternDecimalPart) {\n\t        res += this.locale.decimalSeparator + this.applyNumberPattern(parseInt(n[1]), patternDecimalPart, 'right');\n\t      }\n\t\n\t      // Pow part\n\t      res += 'E' + (pow > 0 ? '-' : '+') + this.applyNumberPattern(Math.abs(pow), patternPowPart);\n\t\n\t      return res;\n\t    }\n\t  }, {\n\t    key: 'formatAsDateTimeElapsed',\n\t    value: function formatAsDateTimeElapsed(n, foundDays, foundHours, foundMinutes, pattern) {\n\t      var _this = this;\n\t\n\t      n = Math.abs(n.getTime() - ZERO_DATE.getTime());\n\t\n\t      var seconds = parseInt(n / 1000);\n\t      var minutes = parseInt(seconds / 60);\n\t      var hours = parseInt(minutes / 60);\n\t      var days = parseInt(hours / 24);\n\t\n\t      hours = foundDays ? hours % 24 : hours;\n\t      minutes = foundHours ? minutes % 60 : minutes;\n\t      seconds = foundMinutes ? seconds % 60 : seconds;\n\t\n\t      return pattern.replace(/(dd)|(d)|(hh)|(h)|(mm)|(m)|(ss)|(s)/gi, function (a, dd, d, hh, h, mm, m, ss, s) {\n\t\n\t        if (dd) {\n\t          return _this.applyNumberPattern(days, '00');\n\t        }\n\t\n\t        if (d) {\n\t          return days;\n\t        }\n\t\n\t        if (hh) {\n\t          return _this.applyNumberPattern(hours, '00');\n\t        }\n\t\n\t        if (h) {\n\t          return hours;\n\t        }\n\t\n\t        if (mm) {\n\t          return _this.applyNumberPattern(minutes, '00');\n\t        }\n\t\n\t        if (m) {\n\t          return minutes;\n\t        }\n\t\n\t        if (ss) {\n\t          return _this.applyNumberPattern(seconds, '00');\n\t        }\n\t\n\t        if (s) {\n\t          return seconds;\n\t        }\n\t\n\t        return '';\n\t      });\n\t    }\n\t  }, {\n\t    key: 'formatAsDateTimeNormal',\n\t    value: function formatAsDateTimeNormal(n, pattern) {\n\t      var _this2 = this;\n\t\n\t      var _locale = this.locale;\n\t      var days = _locale.days;\n\t      var daysShort = _locale.daysShort;\n\t      var months = _locale.months;\n\t      var monthsShort = _locale.monthsShort;\n\t\n\t      var foundAMPM = false;\n\t\n\t      var year = n.getFullYear();\n\t      var month = n.getMonth();\n\t      var date = n.getDate();\n\t      var weekDay = n.getDay();\n\t      var hours = n.getHours();\n\t      var minutes = n.getMinutes();\n\t      var seconds = n.getSeconds();\n\t\n\t      // Build res\n\t      var res = pattern.replace(/((?:am\\/pm)|(?:a\\/p))|(?:(h[^ydsap]*?)mm)|(?:mm([^ydh]*?s))|(?:(h[^ydsap]*?)m)|(?:m([^ydh]*?s))/gi, function (a, ampm, fmin, fmin2, mmin, mmin2) {\n\t\n\t        if (ampm) {\n\t          foundAMPM = true;\n\t          return '[]';\n\t        }\n\t\n\t        if (fmin) {\n\t          return fmin + _this2.applyNumberPattern(minutes, '00');\n\t        }\n\t\n\t        if (fmin2) {\n\t          return _this2.applyNumberPattern(minutes, '00') + fmin2;\n\t        }\n\t\n\t        if (mmin) {\n\t          return mmin + minutes;\n\t        }\n\t\n\t        if (mmin2) {\n\t          return minutes + mmin2;\n\t        }\n\t\n\t        return '';\n\t      });\n\t\n\t      return res.replace(/(ss)|(s)|(hh)|(h)|(dddd)|(ddd)|(dd)|(d)|(mmmmm)|(mmmm)|(mmm)|(mm)|(m)|(yyyy)|(yy)|(\\[\\])/gi, function (a, ss, s, hh, h, dddd, ddd, dd, d, mmmmm, mmmm, mmm, mm, m, yyyy, yy, ampm) {\n\t\n\t        if (ss) {\n\t          return _this2.applyNumberPattern(seconds, '00');\n\t        }\n\t\n\t        if (s) {\n\t          return seconds;\n\t        }\n\t\n\t        if (hh) {\n\t          return _this2.applyNumberPattern(foundAMPM ? hours % 12 : hours, '00');\n\t        }\n\t\n\t        if (h) {\n\t          return foundAMPM ? hours % 12 : hours;\n\t        }\n\t\n\t        if (dddd) {\n\t          return days[weekDay];\n\t        }\n\t\n\t        if (ddd) {\n\t          return daysShort[weekDay];\n\t        }\n\t\n\t        if (dd) {\n\t          return _this2.applyNumberPattern(date, '00');\n\t        }\n\t\n\t        if (d) {\n\t          return date;\n\t        }\n\t\n\t        if (mmmmm) {\n\t          return monthsShort[month][0];\n\t        }\n\t\n\t        if (mmmm) {\n\t          return months[month];\n\t        }\n\t\n\t        if (mmm) {\n\t          return monthsShort[month];\n\t        }\n\t\n\t        if (mm) {\n\t          return _this2.applyNumberPattern(month + 1, '00');\n\t        }\n\t\n\t        if (m) {\n\t          return month + 1;\n\t        }\n\t\n\t        if (yyyy) {\n\t          return year;\n\t        }\n\t\n\t        if (yy) {\n\t          return year.toString().substr(2);\n\t        }\n\t\n\t        if (ampm) {\n\t          return hours < 12 ? 'AM' : 'PM';\n\t        }\n\t\n\t        return '';\n\t      });\n\t    }\n\t  }, {\n\t    key: 'createTextCode',\n\t    value: function createTextCode(section) {\n\t      var code = new _utils.Code();\n\t\n\t      code.append('\\n      res.value = {0}.replace(/@/, n);\\n    ', section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createGeneralCode',\n\t    value: function createGeneralCode() {\n\t      var code = new _utils.Code();\n\t      var numberCode = this.createNumberCode('0.00');\n\t      var dateTimeCode = this.createDateTimeCode('[d]');\n\t\n\t      code.append('\\n      if (type === \"Number\") {\\n        ' + numberCode + '\\n      }\\n      if (type === \"DateTime\") {\\n        ' + dateTimeCode + '\\n      }\\n    ');\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberExponentialCode',\n\t    value: function createNumberExponentialCode(exponentialMatch) {\n\t      var patternIntegerPart = exponentialMatch[1];\n\t      var patternDecimalPart = exponentialMatch[2];\n\t      var patternPowPart = exponentialMatch[3];\n\t      var code = new _utils.Code();\n\t      var integerPart = void 0;\n\t      var decimalPart = void 0;\n\t\n\t      var zerosCount = function zerosCount(s) {\n\t        return s.match(/0|\\?|#/g).length;\n\t      };\n\t\n\t      // Integer part\n\t      if (!patternIntegerPart) {\n\t        patternIntegerPart = '#';\n\t        integerPart = 1;\n\t      } else {\n\t        integerPart = zerosCount(patternIntegerPart);\n\t      }\n\t\n\t      // Decimal part\n\t      if (!patternDecimalPart) {\n\t        patternDecimalPart = '';\n\t        decimalPart = 0;\n\t      } else {\n\t        decimalPart = zerosCount(patternDecimalPart);\n\t      }\n\t\n\t      code.append('\\n      result.value = this.formatAsNumberExponential(n, {0}, {1}, {2}, {3}, {4});\\n    ', integerPart, decimalPart, patternIntegerPart, patternDecimalPart, patternPowPart);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberFractialCode',\n\t    value: function createNumberFractialCode(fractialMatch) {\n\t      var code = new _utils.Code();\n\t      var patternNumeratorPart = fractialMatch[1] || '#';\n\t      var patternDenominatorPart = fractialMatch[2] || '#';\n\t      // TODO watch here\n\t      var zeroPos = patternNumeratorPart.length - 1;\n\t\n\t      while (patternNumeratorPart[zeroPos] === '0' && patternNumeratorPart[zeroPos] !== '?' && patternNumeratorPart[zeroPos] !== '#' && patternNumeratorPart[zeroPos] !== ' ' && zeroPos > 0) {\n\t        zeroPos--;\n\t      }\n\t\n\t      var leftPatternNumeratorPart = patternNumeratorPart.substr(0, zeroPos);\n\t      var rightPatternNumeratorPart = patternNumeratorPart.substr(zeroPos);\n\t\n\t      if (!leftPatternNumeratorPart) {\n\t        code.append('\\n        result.value = this.formatAsNumberFractial(n, {0}, {1});\\n      ', rightPatternNumeratorPart, patternDenominatorPart);\n\t      }\n\t      // Mixed fraction\n\t      else {\n\t          code.append('\\n        result.value = this.formatAsNumberFractialMixed(n, {0}, {1}, {2});\\n      ', leftPatternNumeratorPart, rightPatternNumeratorPart, patternDenominatorPart);\n\t        }\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberDecimalCode',\n\t    value: function createNumberDecimalCode(decimalMatch) {\n\t      var code = new _utils.Code();\n\t      var patternIntegerPart = decimalMatch[1] || '0';\n\t      var patternDecimalPart = decimalMatch[2] || '';\n\t      var decimals = void 0;\n\t      var factor = 1;\n\t\n\t      var zerosCount = function zerosCount(s) {\n\t        return s.match(/0|\\?|#/g).length;\n\t      };\n\t\n\t      if (!patternDecimalPart) {\n\t        decimals = 0;\n\t      } else {\n\t        decimals = zerosCount(patternDecimalPart);\n\t      }\n\t\n\t      // Spaces before .\n\t      patternIntegerPart = patternIntegerPart.replace(/(0|#|\\?)(,+)([^0?#]*)$/, function (a, m1, m2, m3) {\n\t        factor *= Math.pow(1000, m2.length);\n\t        return m1 + m3;\n\t      });\n\t\n\t      if (factor !== 1) {\n\t        code.append('\\n        n /= {0};\\n      ', factor);\n\t      }\n\t\n\t      code.append('\\n      result.value = this.formatAsNumberDecimal(n, {0}, {1}, {2});\\n    ', decimals, patternIntegerPart, patternDecimalPart);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberIntegerCode',\n\t    value: function createNumberIntegerCode(section) {\n\t      var code = new _utils.Code();\n\t\n\t      code.append('\\n      n = Math.round(n);\\n      result.value = this.applyNumberPattern(n, {0});\\n    ', section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberCode',\n\t    value: function createNumberCode(section, shouldAbsNumber) {\n\t      var numberCode = new _utils.Code();\n\t\n\t      // Abs\n\t      if (shouldAbsNumber) {\n\t        numberCode.append('\\n        n = Math.abs(n);\\n      ');\n\t      }\n\t\n\t      // Exponential form regexp\n\t      var exponentialMatch = section.match(/(.*?)(?:\\.(.*?))?e(?:\\+|\\-)(.*)/i);\n\t\n\t      if (exponentialMatch) {\n\t\n\t        // Exponential form\n\t        numberCode.appendRaw(this.createNumberExponentialCode(exponentialMatch));\n\t      } else {\n\t        var factor = 1;\n\t\n\t        // Spaces before end\n\t        section = section.replace(/(0|#|\\?)(,+)([^0?#]*)$/, function (a, m1, m2, m3) {\n\t          factor *= Math.pow(1000, m2.length);\n\t          return m1 + m3;\n\t        });\n\t\n\t        // Percents\n\t        var percentMatch = section.match(/%/g);\n\t        if (percentMatch) {\n\t          factor /= Math.pow(100, percentMatch.length);\n\t        }\n\t\n\t        // Factor\n\t        if (factor !== 1) {\n\t          numberCode.append('\\n          n /= {0};\\n        ', factor);\n\t        }\n\t\n\t        var fractialMatch = void 0;\n\t        var decimalMatch = void 0;\n\t\n\t        switch (true) {\n\t\n\t          // Fractial form\n\t          case !!(fractialMatch = section.match(/(.*?)\\/(.*)/)):\n\t            numberCode.appendRaw(this.createNumberFractialCode(fractialMatch));\n\t            break;\n\t\n\t          // Decimal form\n\t          case !!(decimalMatch = section.match(/(.*?)\\.(.*)/)):\n\t            numberCode.appendRaw(this.createNumberDecimalCode(decimalMatch));\n\t            break;\n\t\n\t          // Integer form\n\t          default:\n\t            numberCode.appendRaw(this.createNumberIntegerCode(section));\n\t\n\t        }\n\t      }\n\t\n\t      // Final code\n\t      var code = new _utils.Code();\n\t\n\t      // Parse to float\n\t      code.append('\\n      n = parseFloat(n);\\n    ');\n\t\n\t      // Checks\n\t      code.append('\\n      if (!isNaN(n)) {\\n        if (n >= 1e21 || n <= -1e21) {\\n          result.value = n.toString().toUpperCase();\\n        }\\n        else {\\n          ' + numberCode + '\\n        }\\n      }\\n    ');\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createDateTimeElapsedCode',\n\t    value: function createDateTimeElapsedCode(section) {\n\t      var code = new _utils.Code();\n\t\n\t      var foundDays = /d/i.test(section);\n\t      var foundHours = /h/i.test(section);\n\t      var foundMinutes = /m/i.test(section);\n\t\n\t      code.append('\\n      result.value = this.formatAsDateTimeElapsed(n, {0}, {1}, {2}, {3});\\n    ', foundDays, foundHours, foundMinutes, section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createDateTimeNormalCode',\n\t    value: function createDateTimeNormalCode(section) {\n\t      var code = new _utils.Code();\n\t\n\t      code.append('\\n      result.value = this.formatAsDateTimeNormal(n, {0});\\n    ', section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createDateTimeCode',\n\t    value: function createDateTimeCode(section) {\n\t      var code = new _utils.Code();\n\t      var elapsed = false;\n\t\n\t      section = section.replace(/\\[(h+?|m+?|s+?|y+?)]/ig, function (a, m1) {\n\t        elapsed = true;\n\t        return m1;\n\t      });\n\t\n\t      var dateTimeCode = elapsed ? this.createDateTimeElapsedCode(section) : this.createDateTimeNormalCode(section);\n\t\n\t      code.append('\\n      n = new Date(n);\\n      if (!isNaN(n.getTime())) {\\n        ' + dateTimeCode + '\\n      }\\n    ');\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createSectionCode',\n\t    value: function createSectionCode(section, sectionIndex, sectionsCount) {\n\t      // Start creating code for function\n\t      var code = new _utils.Code();\n\t\n\t      var condition = void 0;\n\t      var shouldAbsNumber = false;\n\t\n\t      // Find condition for sector or add standard sector condition (positive number, negative number, etc.)\n\t      var conditionMatch = section.match(/\\[((?:>|>=|<|<=|=|<>)[0-9\\.]+?)]/);\n\t\n\t      switch (true) {\n\t\n\t        // Found condition\n\t        case !!conditionMatch:\n\t          var cond = conditionMatch[1].replace(/<>/, '!=').replace('/=/', '==');\n\t          condition = 'type == \"Number\" && parseFloat(n)' + cond;\n\t          break;\n\t\n\t        // Standard condition for first section of 3+\n\t        case sectionIndex === 0 && sectionsCount > 2:\n\t          condition = 'type == \"Number\" && parseFloat(n) > 0';\n\t          break;\n\t\n\t        // Standard condition for first section of 2\n\t        case sectionIndex === 0 && sectionsCount === 2:\n\t          condition = 'type == \"Number\" && parseFloat(n) >= 0';\n\t          break;\n\t\n\t        // Standard condition for negative number\n\t        case sectionIndex === 1:\n\t          condition = 'type == \"Number\" && parseFloat(n) < 0';\n\t          shouldAbsNumber = true;\n\t          break;\n\t\n\t      }\n\t\n\t      // Text color\n\t      var colorMatch = section.match(/\\[(Red|Green|White|Blue|Magenta|Yellow|Cyan|Black)]/i);\n\t      if (colorMatch) {\n\t        code.append('\\n        result.color = {0};\\n      ', colorMatch[1]);\n\t      }\n\t\n\t      // Remove all [], except our replacements and elapsed days, hours, minutes, seconds\n\t      section = section.replace(/(\\[((?!((\\$*?)|(d*?)|(h*?)|(m*?)|(s*?))]).*?)])/, '');\n\t\n\t      // Format code\n\t      var formatCode = void 0;\n\t\n\t      switch (true) {\n\t\n\t        // General format\n\t        case /General/i.test(section):\n\t          formatCode = this.createGeneralCode(section);\n\t          break;\n\t\n\t        // Text\n\t        case /@/.test(section):\n\t          formatCode = this.createTextCode(section);\n\t          break;\n\t\n\t        // Number\n\t        case /#|\\?|0/.test(section):\n\t          if (!condition) {\n\t            condition = 'type === \"Number\"';\n\t          }\n\t          formatCode = this.createNumberCode(section, shouldAbsNumber);\n\t          break;\n\t\n\t        // DateTime\n\t        case /h|m|s|y|d/i.test(section):\n\t          if (!condition) {\n\t            condition = 'type === \"DateTime\"';\n\t          }\n\t          formatCode = this.createDateTimeCode(section);\n\t          break;\n\t\n\t        default:\n\t          condition = 'true';\n\t          formatCode = new _utils.Code().toString();\n\t\n\t      }\n\t\n\t      code.append('\\n      // Section {0}\\n\\n      if (' + condition + ') {\\n        result.pattern = {0};\\n        result.value = {0};\\n        ' + formatCode + '\\n      }\\n      // End section {0}\\n\\n    ', section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createPatternCode',\n\t    value: function createPatternCode(pattern) {\n\t      var _this3 = this;\n\t\n\t      var origins = [];\n\t      var replaces = '';\n\t\n\t      // Find quotes, slash symbols\n\t      var patternReplaced = pattern.replace(/\"([^\"]+)\"|\\\\(.?)|(_.?)|(\\*.?)|(\")/g, function (a, m1, m2, m3) {\n\t        // Quote found\n\t        if (m1) {\n\t          origins.push(m1.replace(/(\"|'|\\\\)/g, \"\\\\$1\"));\n\t          return '[' + (replaces += '$') + ']';\n\t        }\n\t        // Slash found\n\t        if (m2) {\n\t          origins.push(m2.replace(/(\"|'|\\\\)/g, \"\\\\$1\"));\n\t          return '[' + (replaces += '$') + ']';\n\t        }\n\t        // Space found\n\t        if (m3) {\n\t          origins.push(' ');\n\t          return '[' + (replaces += '$') + ']';\n\t        }\n\t        return '';\n\t      });\n\t\n\t      // Split pattern to sections\n\t      var sections = patternReplaced.split(/;/);\n\t\n\t      // Init code\n\t      var code = new _utils.Code();\n\t\n\t      // Result variable\n\t      code.append('\\n      var result = {\\n        value: \"\",\\n        align: type === \"Number\" || type === \"DateTime\" ? \"right\" : \"\",\\n        color: \"\",\\n        pattern: \"\"\\n      };\\n    ');\n\t\n\t      // Remove unnesessary sections\n\t      sections = sections.slice(0, 4);\n\t\n\t      // Loop trough sections\n\t      // TODO обратить внимание на parseInt, если убирать\n\t      // свои функции, то скорее всего он не понадобится\n\t      (0, _utils.each)(sections, function (section, sectionIndex) {\n\t        return code.appendRaw(_this3.createSectionCode(section, parseInt(sectionIndex), sections.length));\n\t      });\n\t\n\t      // Restore origins\n\t      code.append('\\n      result.value = this.restoreOrigins(result.value, {0});\\n      result.pattern = this.restoreOrigins(result.pattern, {0});\\n      return result;\\n    ', origins);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format(n, type, pattern) {\n\t      this.log('Input: n=' + n + ', type=' + type + ', pattern=' + pattern);\n\t\n\t      n = n.toString();\n\t      pattern = pattern.toString();\n\t\n\t      // Find predefined format\n\t      if (this.locale.formats[pattern]) {\n\t        pattern = this.locale.formats[pattern];\n\t      }\n\t\n\t      // Create function\n\t      if (!this.memoized[pattern]) {\n\t        var code = this.createPatternCode(pattern);\n\t        this.memoized[pattern] = Function('n', 'type', code);\n\t        this.log('Code:');\n\t        this.log(code);\n\t      }\n\t\n\t      // Call function\n\t      return this.memoized[pattern].call(this, n, type);\n\t    }\n\t  }]);\n\t\n\t  return DataFormatter;\n\t}();\n\t\n\t;\n\t\n\t// Create instance\n\tvar dataFormatter = new DataFormatter();\n\t\n\t// Add AMD support\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return dataFormatter;\n\t  }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return DataFormatter;\n\t  }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t// CommonJS\n\telse if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n\t    console.log('here 1');\n\t    module.exports = dataFormatter;\n\t    module.exports.DataFormatter = DataFormatter;\n\t  }\n\t  // Window\n\t  else {\n\t      global.dataFormatter = dataFormatter;\n\t      global.DataFormatter = DataFormatter;\n\t    }\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Code = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /// TODO IT MUST BE ONLY IN DEV\n\t\n\t\n\texports.each = each;\n\texports.map = map;\n\texports.extend = extend;\n\texports.formatString = formatString;\n\t\n\tvar _jsBeautify = __webpack_require__(2);\n\t\n\tvar _jsBeautify2 = _interopRequireDefault(_jsBeautify);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Invokes func for every element\n\t */\n\tfunction each(obj, func) {\n\t  for (var key in obj) {\n\t    if (obj.hasOwnProperty(key)) {\n\t      func(obj[key], key);\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Transform values\n\t */\n\tfunction map(obj, func) {\n\t  var res = [];\n\t  for (var key in obj) {\n\t    if (obj.hasOwnProperty(key)) {\n\t      res.push(func(obj[key], key));\n\t    }\n\t  }\n\t  return res;\n\t};\n\t\n\t/**\n\t * Extends object\n\t */\n\tfunction extend(a) {\n\t  for (var _len = arguments.length, b = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    b[_key - 1] = arguments[_key];\n\t  }\n\t\n\t  for (var i = 0; i < b.length; i++) {\n\t    for (var j in b[i]) {\n\t      if (b[i].hasOwnProperty(j)) {\n\t        a[j] = b[i][j];\n\t      }\n\t    }\n\t  }\n\t  return a;\n\t};\n\t\n\t/**\n\t * Format string like sprintf() in PHP\n\t */\n\tfunction formatString(s) {\n\t  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t    args[_key2 - 1] = arguments[_key2];\n\t  }\n\t\n\t  return s.replace(/{(\\d+)}/g, function (match, number) {\n\t    return typeof args[number] != 'undefined' ? args[number] : match;\n\t  });\n\t};\n\t\n\t/**\n\t * Class for building code\n\t */\n\t\n\tvar Code = exports.Code = function () {\n\t  function Code() {\n\t    _classCallCheck(this, Code);\n\t\n\t    this.code = '';\n\t  }\n\t\n\t  _createClass(Code, [{\n\t    key: 'makeString',\n\t    value: function makeString(s) {\n\t      for (var _len3 = arguments.length, values = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t        values[_key3 - 1] = arguments[_key3];\n\t      }\n\t\n\t      values = map(values, function (val) {\n\t        return JSON.stringify(val);\n\t      });\n\t      return formatString.apply(undefined, [s].concat(_toConsumableArray(values)));\n\t    }\n\t  }, {\n\t    key: 'append',\n\t    value: function append() {\n\t      this.code += this.makeString.apply(this, arguments);\n\t    }\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return (0, _jsBeautify2.default)(this.code);\n\t    }\n\t  }, {\n\t    key: 'appendRaw',\n\t    value: function appendRaw(str) {\n\t      this.code += str;\n\t    }\n\t  }]);\n\t\n\t  return Code;\n\t}();\n\t\n\t;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\tThe following batches are equivalent:\n\t\n\tvar beautify_js = require('js-beautify');\n\tvar beautify_js = require('js-beautify').js;\n\tvar beautify_js = require('js-beautify').js_beautify;\n\t\n\tvar beautify_css = require('js-beautify').css;\n\tvar beautify_css = require('js-beautify').css_beautify;\n\t\n\tvar beautify_html = require('js-beautify').html;\n\tvar beautify_html = require('js-beautify').html_beautify;\n\t\n\tAll methods returned accept two arguments, the source string and an options object.\n\t**/\n\t\n\tfunction get_beautify(js_beautify, css_beautify, html_beautify) {\n\t    // the default is js\n\t    var beautify = function(src, config) {\n\t        return js_beautify.js_beautify(src, config);\n\t    };\n\t\n\t    // short aliases\n\t    beautify.js = js_beautify.js_beautify;\n\t    beautify.css = css_beautify.css_beautify;\n\t    beautify.html = html_beautify.html_beautify;\n\t\n\t    // legacy aliases\n\t    beautify.js_beautify = js_beautify.js_beautify;\n\t    beautify.css_beautify = css_beautify.css_beautify;\n\t    beautify.html_beautify = html_beautify.html_beautify;\n\t\n\t    return beautify;\n\t}\n\t\n\tif (true) {\n\t    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t        __webpack_require__(3),\n\t        __webpack_require__(4),\n\t        __webpack_require__(5)\n\t    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(js_beautify, css_beautify, html_beautify) {\n\t        return get_beautify(js_beautify, css_beautify, html_beautify);\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {\n\t    (function(mod) {\n\t        var js_beautify = require('./lib/beautify');\n\t        var css_beautify = require('./lib/beautify-css');\n\t        var html_beautify = require('./lib/beautify-html');\n\t\n\t        mod.exports = get_beautify(js_beautify, css_beautify, html_beautify);\n\t\n\t    })(module);\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n\t/*\n\t\n\t  The MIT License (MIT)\n\t\n\t  Copyright (c) 2007-2013 Einar Lielmanis and contributors.\n\t\n\t  Permission is hereby granted, free of charge, to any person\n\t  obtaining a copy of this software and associated documentation files\n\t  (the \"Software\"), to deal in the Software without restriction,\n\t  including without limitation the rights to use, copy, modify, merge,\n\t  publish, distribute, sublicense, and/or sell copies of the Software,\n\t  and to permit persons to whom the Software is furnished to do so,\n\t  subject to the following conditions:\n\t\n\t  The above copyright notice and this permission notice shall be\n\t  included in all copies or substantial portions of the Software.\n\t\n\t  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\t  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\t  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\t  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t  SOFTWARE.\n\t\n\t JS Beautifier\n\t---------------\n\t\n\t\n\t  Written by Einar Lielmanis, <einar@jsbeautifier.org>\n\t      http://jsbeautifier.org/\n\t\n\t  Originally converted to javascript by Vital, <vital76@gmail.com>\n\t  \"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>\n\t  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>\n\t\n\t\n\t  Usage:\n\t    js_beautify(js_source_text);\n\t    js_beautify(js_source_text, options);\n\t\n\t  The options are:\n\t    indent_size (default 4)          - indentation size,\n\t    indent_char (default space)      - character to indent with,\n\t    preserve_newlines (default true) - whether existing line breaks should be preserved,\n\t    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\t\n\t    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\t\n\t            jslint_happy        !jslint_happy\n\t            ---------------------------------\n\t            function ()         function()\n\t\n\t            switch () {         switch() {\n\t            case 1:               case 1:\n\t              break;                break;\n\t            }                   }\n\t\n\t    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, \"function()\" vs \"function ()\",\n\t          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)\n\t\n\t    brace_style (default \"collapse\") - \"collapse-preserve-inline\" | \"collapse\" | \"expand\" | \"end-expand\" | \"none\"\n\t            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n\t\n\t    space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\t\n\t    unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\t\n\t    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.\n\t          NOTE: This is not a hard limit. Lines will continue until a point where a newline would\n\t                be preserved if it were present.\n\t\n\t    end_with_newline (default false)  - end output with a newline\n\t\n\t\n\t    e.g\n\t\n\t    js_beautify(js_source_text, {\n\t      'indent_size': 1,\n\t      'indent_char': '\\t'\n\t    });\n\t\n\t*/\n\t\n\t// Object.values polyfill found here:\n\t// http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html\n\tif (!Object.values) {\n\t    Object.values = function(o) {\n\t        if (o !== Object(o)) {\n\t            throw new TypeError('Object.values called on a non-object');\n\t        }\n\t        var k = [],\n\t            p;\n\t        for (p in o) {\n\t            if (Object.prototype.hasOwnProperty.call(o, p)) {\n\t                k.push(o[p]);\n\t            }\n\t        }\n\t        return k;\n\t    };\n\t}\n\t\n\t(function() {\n\t\n\t    function js_beautify(js_source_text, options) {\n\t\n\t        var acorn = {};\n\t        (function(exports) {\n\t            /* jshint curly: false */\n\t            // This section of code is taken from acorn.\n\t            //\n\t            // Acorn was written by Marijn Haverbeke and released under an MIT\n\t            // license. The Unicode regexps (for identifiers and whitespace) were\n\t            // taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n\t            //\n\t            // Git repositories for Acorn are available at\n\t            //\n\t            //     http://marijnhaverbeke.nl/git/acorn\n\t            //     https://github.com/marijnh/acorn.git\n\t\n\t            // ## Character categories\n\t\n\t            // Big ugly regular expressions that match characters in the\n\t            // whitespace, identifier, and identifier-start categories. These\n\t            // are only applied when a character is found to actually have a\n\t            // code point above 128.\n\t\n\t            var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\n\t            var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n\t            var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\t            var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n\t            var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\t\n\t            // Whether a single character denotes a newline.\n\t\n\t            exports.newline = /[\\n\\r\\u2028\\u2029]/;\n\t\n\t            // Matches a whole line break (where CRLF is considered a single\n\t            // line break). Used to count lines.\n\t\n\t            // in javascript, these two differ\n\t            // in python they are the same, different methods are called on them\n\t            exports.lineBreak = new RegExp('\\r\\n|' + exports.newline.source);\n\t            exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');\n\t\n\t\n\t            // Test whether a given character code starts an identifier.\n\t\n\t            exports.isIdentifierStart = function(code) {\n\t                // permit $ (36) and @ (64). @ is used in ES7 decorators.\n\t                if (code < 65) return code === 36 || code === 64;\n\t                // 65 through 91 are uppercase letters.\n\t                if (code < 91) return true;\n\t                // permit _ (95).\n\t                if (code < 97) return code === 95;\n\t                // 97 through 123 are lowercase letters.\n\t                if (code < 123) return true;\n\t                return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n\t            };\n\t\n\t            // Test whether a given character is part of an identifier.\n\t\n\t            exports.isIdentifierChar = function(code) {\n\t                if (code < 48) return code === 36;\n\t                if (code < 58) return true;\n\t                if (code < 65) return false;\n\t                if (code < 91) return true;\n\t                if (code < 97) return code === 95;\n\t                if (code < 123) return true;\n\t                return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n\t            };\n\t        })(acorn);\n\t        /* jshint curly: true */\n\t\n\t        function in_array(what, arr) {\n\t            for (var i = 0; i < arr.length; i += 1) {\n\t                if (arr[i] === what) {\n\t                    return true;\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t\n\t        function trim(s) {\n\t            return s.replace(/^\\s+|\\s+$/g, '');\n\t        }\n\t\n\t        function ltrim(s) {\n\t            return s.replace(/^\\s+/g, '');\n\t        }\n\t\n\t        // function rtrim(s) {\n\t        //     return s.replace(/\\s+$/g, '');\n\t        // }\n\t\n\t        function sanitizeOperatorPosition(opPosition) {\n\t            opPosition = opPosition || OPERATOR_POSITION.before_newline;\n\t\n\t            var validPositionValues = Object.values(OPERATOR_POSITION);\n\t\n\t            if (!in_array(opPosition, validPositionValues)) {\n\t                throw new Error(\"Invalid Option Value: The option 'operator_position' must be one of the following values\\n\" +\n\t                    validPositionValues +\n\t                    \"\\nYou passed in: '\" + opPosition + \"'\");\n\t            }\n\t\n\t            return opPosition;\n\t        }\n\t\n\t        var OPERATOR_POSITION = {\n\t            before_newline: 'before-newline',\n\t            after_newline: 'after-newline',\n\t            preserve_newline: 'preserve-newline',\n\t        };\n\t\n\t        var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];\n\t\n\t        var MODE = {\n\t            BlockStatement: 'BlockStatement', // 'BLOCK'\n\t            Statement: 'Statement', // 'STATEMENT'\n\t            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',\n\t            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',\n\t            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',\n\t            Conditional: 'Conditional', //'(COND-EXPRESSION)',\n\t            Expression: 'Expression' //'(EXPRESSION)'\n\t        };\n\t\n\t        function Beautifier(js_source_text, options) {\n\t            \"use strict\";\n\t            var output;\n\t            var tokens = [],\n\t                token_pos;\n\t            var Tokenizer;\n\t            var current_token;\n\t            var last_type, last_last_text, indent_string;\n\t            var flags, previous_flags, flag_store;\n\t            var prefix;\n\t\n\t            var handlers, opt;\n\t            var baseIndentString = '';\n\t\n\t            handlers = {\n\t                'TK_START_EXPR': handle_start_expr,\n\t                'TK_END_EXPR': handle_end_expr,\n\t                'TK_START_BLOCK': handle_start_block,\n\t                'TK_END_BLOCK': handle_end_block,\n\t                'TK_WORD': handle_word,\n\t                'TK_RESERVED': handle_word,\n\t                'TK_SEMICOLON': handle_semicolon,\n\t                'TK_STRING': handle_string,\n\t                'TK_EQUALS': handle_equals,\n\t                'TK_OPERATOR': handle_operator,\n\t                'TK_COMMA': handle_comma,\n\t                'TK_BLOCK_COMMENT': handle_block_comment,\n\t                'TK_COMMENT': handle_comment,\n\t                'TK_DOT': handle_dot,\n\t                'TK_UNKNOWN': handle_unknown,\n\t                'TK_EOF': handle_eof\n\t            };\n\t\n\t            function create_flags(flags_base, mode) {\n\t                var next_indent_level = 0;\n\t                if (flags_base) {\n\t                    next_indent_level = flags_base.indentation_level;\n\t                    if (!output.just_added_newline() &&\n\t                        flags_base.line_indent_level > next_indent_level) {\n\t                        next_indent_level = flags_base.line_indent_level;\n\t                    }\n\t                }\n\t\n\t                var next_flags = {\n\t                    mode: mode,\n\t                    parent: flags_base,\n\t                    last_text: flags_base ? flags_base.last_text : '', // last token text\n\t                    last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed\n\t                    declaration_statement: false,\n\t                    declaration_assignment: false,\n\t                    multiline_frame: false,\n\t                    inline_frame: false,\n\t                    if_block: false,\n\t                    else_block: false,\n\t                    do_block: false,\n\t                    do_while: false,\n\t                    import_block: false,\n\t                    in_case_statement: false, // switch(..){ INSIDE HERE }\n\t                    in_case: false, // we're on the exact line with \"case 0:\"\n\t                    case_body: false, // the indented case-action block\n\t                    indentation_level: next_indent_level,\n\t                    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n\t                    start_line_index: output.get_line_number(),\n\t                    ternary_depth: 0\n\t                };\n\t                return next_flags;\n\t            }\n\t\n\t            // Some interpreters have unexpected results with foo = baz || bar;\n\t            options = options ? options : {};\n\t            opt = {};\n\t\n\t            // compatibility\n\t            if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option\n\t                opt.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n\t            }\n\t            opt.brace_style = options.brace_style ? options.brace_style : (opt.brace_style ? opt.brace_style : \"collapse\");\n\t\n\t            // graceful handling of deprecated option\n\t            if (opt.brace_style === \"expand-strict\") {\n\t                opt.brace_style = \"expand\";\n\t            }\n\t\n\t            opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n\t            opt.indent_char = options.indent_char ? options.indent_char : ' ';\n\t            opt.eol = options.eol ? options.eol : 'auto';\n\t            opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n\t            opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;\n\t            opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);\n\t            opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;\n\t            opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;\n\t            opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;\n\t            opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;\n\t            opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;\n\t            opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;\n\t            opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;\n\t            opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);\n\t            opt.e4x = (options.e4x === undefined) ? false : options.e4x;\n\t            opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n\t            opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;\n\t            opt.operator_position = sanitizeOperatorPosition(options.operator_position);\n\t\n\t            // For testing of beautify ignore:start directive\n\t            opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;\n\t\n\t            // force opt.space_after_anon_function to true if opt.jslint_happy\n\t            if (opt.jslint_happy) {\n\t                opt.space_after_anon_function = true;\n\t            }\n\t\n\t            if (options.indent_with_tabs) {\n\t                opt.indent_char = '\\t';\n\t                opt.indent_size = 1;\n\t            }\n\t\n\t            if (opt.eol === 'auto') {\n\t                opt.eol = '\\n';\n\t                if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {\n\t                    opt.eol = js_source_text.match(acorn.lineBreak)[0];\n\t                }\n\t            }\n\t\n\t            opt.eol = opt.eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\t\n\t            //----------------------------------\n\t            indent_string = '';\n\t            while (opt.indent_size > 0) {\n\t                indent_string += opt.indent_char;\n\t                opt.indent_size -= 1;\n\t            }\n\t\n\t            var preindent_index = 0;\n\t            if (js_source_text && js_source_text.length) {\n\t                while ((js_source_text.charAt(preindent_index) === ' ' ||\n\t                        js_source_text.charAt(preindent_index) === '\\t')) {\n\t                    baseIndentString += js_source_text.charAt(preindent_index);\n\t                    preindent_index += 1;\n\t                }\n\t                js_source_text = js_source_text.substring(preindent_index);\n\t            }\n\t\n\t            last_type = 'TK_START_BLOCK'; // last token type\n\t            last_last_text = ''; // pre-last token text\n\t            output = new Output(indent_string, baseIndentString);\n\t\n\t            // If testing the ignore directive, start with output disable set to true\n\t            output.raw = opt.test_output_raw;\n\t\n\t\n\t            // Stack of parsing/formatting states, including MODE.\n\t            // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n\t            // and formatted output.  This makes the beautifier less accurate than full parsers\n\t            // but also far more tolerant of syntax errors.\n\t            //\n\t            // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n\t            // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n\t            // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n\t            // most full parsers would die, but the beautifier gracefully falls back to\n\t            // MODE.BlockStatement and continues on.\n\t            flag_store = [];\n\t            set_mode(MODE.BlockStatement);\n\t\n\t            this.beautify = function() {\n\t\n\t                /*jshint onevar:true */\n\t                var local_token, sweet_code;\n\t                Tokenizer = new tokenizer(js_source_text, opt, indent_string);\n\t                tokens = Tokenizer.tokenize();\n\t                token_pos = 0;\n\t\n\t                function get_local_token() {\n\t                    local_token = get_token();\n\t                    return local_token;\n\t                }\n\t\n\t                while (get_local_token()) {\n\t                    for (var i = 0; i < local_token.comments_before.length; i++) {\n\t                        // The cleanest handling of inline comments is to treat them as though they aren't there.\n\t                        // Just continue formatting and the behavior should be logical.\n\t                        // Also ignore unknown tokens.  Again, this should result in better behavior.\n\t                        handle_token(local_token.comments_before[i]);\n\t                    }\n\t                    handle_token(local_token);\n\t\n\t                    last_last_text = flags.last_text;\n\t                    last_type = local_token.type;\n\t                    flags.last_text = local_token.text;\n\t\n\t                    token_pos += 1;\n\t                }\n\t\n\t                sweet_code = output.get_code();\n\t                if (opt.end_with_newline) {\n\t                    sweet_code += '\\n';\n\t                }\n\t\n\t                if (opt.eol !== '\\n') {\n\t                    sweet_code = sweet_code.replace(/[\\n]/g, opt.eol);\n\t                }\n\t\n\t                return sweet_code;\n\t            };\n\t\n\t            function handle_token(local_token) {\n\t                var newlines = local_token.newlines;\n\t                var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);\n\t\n\t                if (keep_whitespace) {\n\t                    for (var i = 0; i < newlines; i += 1) {\n\t                        print_newline(i > 0);\n\t                    }\n\t                } else {\n\t                    if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {\n\t                        newlines = opt.max_preserve_newlines;\n\t                    }\n\t\n\t                    if (opt.preserve_newlines) {\n\t                        if (local_token.newlines > 1) {\n\t                            print_newline();\n\t                            for (var j = 1; j < newlines; j += 1) {\n\t                                print_newline(true);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t\n\t                current_token = local_token;\n\t                handlers[current_token.type]();\n\t            }\n\t\n\t            // we could use just string.split, but\n\t            // IE doesn't like returning empty strings\n\t            function split_linebreaks(s) {\n\t                //return s.split(/\\x0d\\x0a|\\x0a/);\n\t\n\t                s = s.replace(acorn.allLineBreaks, '\\n');\n\t                var out = [],\n\t                    idx = s.indexOf(\"\\n\");\n\t                while (idx !== -1) {\n\t                    out.push(s.substring(0, idx));\n\t                    s = s.substring(idx + 1);\n\t                    idx = s.indexOf(\"\\n\");\n\t                }\n\t                if (s.length) {\n\t                    out.push(s);\n\t                }\n\t                return out;\n\t            }\n\t\n\t            var newline_restricted_tokens = ['break', 'contiue', 'return', 'throw'];\n\t\n\t            function allow_wrap_or_preserved_newline(force_linewrap) {\n\t                force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;\n\t\n\t                // Never wrap the first token on a line\n\t                if (output.just_added_newline()) {\n\t                    return;\n\t                }\n\t\n\t                var shouldPreserveOrForce = (opt.preserve_newlines && current_token.wanted_newline) || force_linewrap;\n\t                var operatorLogicApplies = in_array(flags.last_text, Tokenizer.positionable_operators) || in_array(current_token.text, Tokenizer.positionable_operators);\n\t\n\t                if (operatorLogicApplies) {\n\t                    var shouldPrintOperatorNewline = (\n\t                            in_array(flags.last_text, Tokenizer.positionable_operators) &&\n\t                            in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)\n\t                        ) ||\n\t                        in_array(current_token.text, Tokenizer.positionable_operators);\n\t                    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;\n\t                }\n\t\n\t                if (shouldPreserveOrForce) {\n\t                    print_newline(false, true);\n\t                } else if (opt.wrap_line_length) {\n\t                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {\n\t                        // These tokens should never have a newline inserted\n\t                        // between them and the following expression.\n\t                        return;\n\t                    }\n\t                    var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +\n\t                        (output.space_before_token ? 1 : 0);\n\t                    if (proposed_line_length >= opt.wrap_line_length) {\n\t                        print_newline(false, true);\n\t                    }\n\t                }\n\t            }\n\t\n\t            function print_newline(force_newline, preserve_statement_flags) {\n\t                if (!preserve_statement_flags) {\n\t                    if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {\n\t                        while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {\n\t                            restore_mode();\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (output.add_new_line(force_newline)) {\n\t                    flags.multiline_frame = true;\n\t                }\n\t            }\n\t\n\t            function print_token_line_indentation() {\n\t                if (output.just_added_newline()) {\n\t                    if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {\n\t                        output.current_line.push(current_token.whitespace_before);\n\t                        output.space_before_token = false;\n\t                    } else if (output.set_indent(flags.indentation_level)) {\n\t                        flags.line_indent_level = flags.indentation_level;\n\t                    }\n\t                }\n\t            }\n\t\n\t            function print_token(printable_token) {\n\t                if (output.raw) {\n\t                    output.add_raw_token(current_token);\n\t                    return;\n\t                }\n\t\n\t                if (opt.comma_first && last_type === 'TK_COMMA' &&\n\t                    output.just_added_newline()) {\n\t                    if (output.previous_line.last() === ',') {\n\t                        var popped = output.previous_line.pop();\n\t                        // if the comma was already at the start of the line,\n\t                        // pull back onto that line and reprint the indentation\n\t                        if (output.previous_line.is_empty()) {\n\t                            output.previous_line.push(popped);\n\t                            output.trim(true);\n\t                            output.current_line.pop();\n\t                            output.trim();\n\t                        }\n\t\n\t                        // add the comma in front of the next token\n\t                        print_token_line_indentation();\n\t                        output.add_token(',');\n\t                        output.space_before_token = true;\n\t                    }\n\t                }\n\t\n\t                printable_token = printable_token || current_token.text;\n\t                print_token_line_indentation();\n\t                output.add_token(printable_token);\n\t            }\n\t\n\t            function indent() {\n\t                flags.indentation_level += 1;\n\t            }\n\t\n\t            function deindent() {\n\t                if (flags.indentation_level > 0 &&\n\t                    ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {\n\t                    flags.indentation_level -= 1;\n\t\n\t                }\n\t            }\n\t\n\t            function set_mode(mode) {\n\t                if (flags) {\n\t                    flag_store.push(flags);\n\t                    previous_flags = flags;\n\t                } else {\n\t                    previous_flags = create_flags(null, mode);\n\t                }\n\t\n\t                flags = create_flags(previous_flags, mode);\n\t            }\n\t\n\t            function is_array(mode) {\n\t                return mode === MODE.ArrayLiteral;\n\t            }\n\t\n\t            function is_expression(mode) {\n\t                return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);\n\t            }\n\t\n\t            function restore_mode() {\n\t                if (flag_store.length > 0) {\n\t                    previous_flags = flags;\n\t                    flags = flag_store.pop();\n\t                    if (previous_flags.mode === MODE.Statement) {\n\t                        output.remove_redundant_indentation(previous_flags);\n\t                    }\n\t                }\n\t            }\n\t\n\t            function start_of_object_property() {\n\t                return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (\n\t                    (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));\n\t            }\n\t\n\t            function start_of_statement() {\n\t                if (\n\t                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||\n\t                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||\n\t                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw']) && !current_token.wanted_newline) ||\n\t                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' && !(current_token.type === 'TK_RESERVED' && current_token.text === 'if')) ||\n\t                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||\n\t                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement &&\n\t                        !flags.in_case &&\n\t                        !(current_token.text === '--' || current_token.text === '++') &&\n\t                        last_last_text !== 'function' &&\n\t                        current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||\n\t                    (flags.mode === MODE.ObjectLiteral && (\n\t                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))\n\t                ) {\n\t\n\t                    set_mode(MODE.Statement);\n\t                    indent();\n\t\n\t                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {\n\t                        flags.declaration_statement = true;\n\t                    }\n\t\n\t                    // Issue #276:\n\t                    // If starting a new statement with [if, for, while, do], push to a new line.\n\t                    // if (a) if (b) if(c) d(); else e(); else f();\n\t                    if (!start_of_object_property()) {\n\t                        allow_wrap_or_preserved_newline(\n\t                            current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));\n\t                    }\n\t\n\t                    return true;\n\t                }\n\t                return false;\n\t            }\n\t\n\t            function all_lines_start_with(lines, c) {\n\t                for (var i = 0; i < lines.length; i++) {\n\t                    var line = trim(lines[i]);\n\t                    if (line.charAt(0) !== c) {\n\t                        return false;\n\t                    }\n\t                }\n\t                return true;\n\t            }\n\t\n\t            function each_line_matches_indent(lines, indent) {\n\t                var i = 0,\n\t                    len = lines.length,\n\t                    line;\n\t                for (; i < len; i++) {\n\t                    line = lines[i];\n\t                    // allow empty lines to pass through\n\t                    if (line && line.indexOf(indent) !== 0) {\n\t                        return false;\n\t                    }\n\t                }\n\t                return true;\n\t            }\n\t\n\t            function is_special_word(word) {\n\t                return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);\n\t            }\n\t\n\t            function get_token(offset) {\n\t                var index = token_pos + (offset || 0);\n\t                return (index < 0 || index >= tokens.length) ? null : tokens[index];\n\t            }\n\t\n\t            function handle_start_expr() {\n\t                if (start_of_statement()) {\n\t                    // The conditional starts the statement if appropriate.\n\t                }\n\t\n\t                var next_mode = MODE.Expression;\n\t                if (current_token.text === '[') {\n\t\n\t                    if (last_type === 'TK_WORD' || flags.last_text === ')') {\n\t                        // this is array index specifier, break immediately\n\t                        // a[x], fn()[x]\n\t                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {\n\t                            output.space_before_token = true;\n\t                        }\n\t                        set_mode(next_mode);\n\t                        print_token();\n\t                        indent();\n\t                        if (opt.space_in_paren) {\n\t                            output.space_before_token = true;\n\t                        }\n\t                        return;\n\t                    }\n\t\n\t                    next_mode = MODE.ArrayLiteral;\n\t                    if (is_array(flags.mode)) {\n\t                        if (flags.last_text === '[' ||\n\t                            (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {\n\t                            // ], [ goes to new line\n\t                            // }, [ goes to new line\n\t                            if (!opt.keep_array_indentation) {\n\t                                print_newline();\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                } else {\n\t                    if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {\n\t                        next_mode = MODE.ForInitializer;\n\t                    } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {\n\t                        next_mode = MODE.Conditional;\n\t                    } else {\n\t                        // next_mode = MODE.Expression;\n\t                    }\n\t                }\n\t\n\t                if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {\n\t                    print_newline();\n\t                } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {\n\t                    // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n\t                    allow_wrap_or_preserved_newline(current_token.wanted_newline);\n\t                    // do nothing on (( and )( and ][ and ]( and .(\n\t                } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {\n\t                    output.space_before_token = true;\n\t                } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||\n\t                    (flags.last_text === '*' && last_last_text === 'function')) {\n\t                    // function() vs function ()\n\t                    if (opt.space_after_anon_function) {\n\t                        output.space_before_token = true;\n\t                    }\n\t                } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {\n\t                    if (opt.space_before_conditional) {\n\t                        output.space_before_token = true;\n\t                    }\n\t                }\n\t\n\t                // Should be a space between await and an IIFE\n\t                if (current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await') {\n\t                    output.space_before_token = true;\n\t                }\n\t\n\t                // Support of this kind of newline preservation.\n\t                // a = (b &&\n\t                //     (c || d));\n\t                if (current_token.text === '(') {\n\t                    if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n\t                        if (!start_of_object_property()) {\n\t                            allow_wrap_or_preserved_newline();\n\t                        }\n\t                    }\n\t                }\n\t\n\t                // Support preserving wrapped arrow function expressions\n\t                // a.b('c',\n\t                //     () => d.e\n\t                // )\n\t                if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {\n\t                    allow_wrap_or_preserved_newline();\n\t                }\n\t\n\t                set_mode(next_mode);\n\t                print_token();\n\t                if (opt.space_in_paren) {\n\t                    output.space_before_token = true;\n\t                }\n\t\n\t                // In all cases, if we newline while inside an expression it should be indented.\n\t                indent();\n\t            }\n\t\n\t            function handle_end_expr() {\n\t                // statements inside expressions are not valid syntax, but...\n\t                // statements must all be closed when their container closes\n\t                while (flags.mode === MODE.Statement) {\n\t                    restore_mode();\n\t                }\n\t\n\t                if (flags.multiline_frame) {\n\t                    allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);\n\t                }\n\t\n\t                if (opt.space_in_paren) {\n\t                    if (last_type === 'TK_START_EXPR' && !opt.space_in_empty_paren) {\n\t                        // () [] no inner space in empty parens like these, ever, ref #320\n\t                        output.trim();\n\t                        output.space_before_token = false;\n\t                    } else {\n\t                        output.space_before_token = true;\n\t                    }\n\t                }\n\t                if (current_token.text === ']' && opt.keep_array_indentation) {\n\t                    print_token();\n\t                    restore_mode();\n\t                } else {\n\t                    restore_mode();\n\t                    print_token();\n\t                }\n\t                output.remove_redundant_indentation(previous_flags);\n\t\n\t                // do {} while () // no statement required after\n\t                if (flags.do_while && previous_flags.mode === MODE.Conditional) {\n\t                    previous_flags.mode = MODE.Expression;\n\t                    flags.do_block = false;\n\t                    flags.do_while = false;\n\t\n\t                }\n\t            }\n\t\n\t            function handle_start_block() {\n\t                // Check if this is should be treated as a ObjectLiteral\n\t                var next_token = get_token(1);\n\t                var second_token = get_token(2);\n\t                if (second_token && (\n\t                        (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED'])) ||\n\t                        (in_array(next_token.text, ['get', 'set']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))\n\t                    )) {\n\t                    // We don't support TypeScript,but we didn't break it for a very long time.\n\t                    // We'll try to keep not breaking it.\n\t                    if (!in_array(last_last_text, ['class', 'interface'])) {\n\t                        set_mode(MODE.ObjectLiteral);\n\t                    } else {\n\t                        set_mode(MODE.BlockStatement);\n\t                    }\n\t                } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {\n\t                    // arrow function: (param1, paramN) => { statements }\n\t                    set_mode(MODE.BlockStatement);\n\t                } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||\n\t                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import']))\n\t                ) {\n\t                    // Detecting shorthand function syntax is difficult by scanning forward,\n\t                    //     so check the surrounding context.\n\t                    // If the block is being returned, imported, passed as arg,\n\t                    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.\n\t                    set_mode(MODE.ObjectLiteral);\n\t                } else {\n\t                    set_mode(MODE.BlockStatement);\n\t                }\n\t\n\t                var empty_braces = !next_token.comments_before.length && next_token.text === '}';\n\t                var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&\n\t                    last_type === 'TK_END_EXPR';\n\t\n\t\n\t                if (opt.brace_style === \"expand\" ||\n\t                    (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n\t                    if (last_type !== 'TK_OPERATOR' &&\n\t                        (empty_anonymous_function ||\n\t                            last_type === 'TK_EQUALS' ||\n\t                            (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {\n\t                        output.space_before_token = true;\n\t                    } else {\n\t                        print_newline(false, true);\n\t                    }\n\t                } else { // collapse\n\t                    if (opt.brace_style === 'collapse-preserve-inline') {\n\t                        // search forward for a newline wanted inside this block\n\t                        var index = 0;\n\t                        var check_token = null;\n\t                        flags.inline_frame = true;\n\t                        do {\n\t                            index += 1;\n\t                            check_token = get_token(index);\n\t                            if (check_token.wanted_newline) {\n\t                                flags.inline_frame = false;\n\t                                break;\n\t                            }\n\t                        } while (check_token.type !== 'TK_EOF' &&\n\t                            !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token));\n\t                    }\n\t\n\t                    if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {\n\t                        // if we're preserving inline,\n\t                        // allow newline between comma and next brace.\n\t                        if (last_type === 'TK_COMMA' || opt.space_in_paren) {\n\t                            output.space_before_token = true;\n\t                        }\n\t\n\t                        if (opt.brace_style === 'collapse-preserve-inline' &&\n\t                            (last_type === 'TK_COMMA' || (last_type === 'TK_START_EXPR' && flags.inline_frame))) {\n\t                            allow_wrap_or_preserved_newline();\n\t                            previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;\n\t                            flags.multiline_frame = false;\n\t                        }\n\t                    } else if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {\n\t                        if (last_type === 'TK_START_BLOCK') {\n\t                            print_newline();\n\t                        } else {\n\t                            output.space_before_token = true;\n\t                        }\n\t                    }\n\t                }\n\t                print_token();\n\t                indent();\n\t            }\n\t\n\t            function handle_end_block() {\n\t                // statements must all be closed when their container closes\n\t                while (flags.mode === MODE.Statement) {\n\t                    restore_mode();\n\t                }\n\t                var empty_braces = last_type === 'TK_START_BLOCK';\n\t\n\t                if (opt.brace_style === \"expand\") {\n\t                    if (!empty_braces) {\n\t                        print_newline();\n\t                    }\n\t                } else {\n\t                    // skip {}\n\t                    if (!empty_braces) {\n\t                        if (flags.inline_frame) {\n\t                            output.space_before_token = true;\n\t                        } else if (is_array(flags.mode) && opt.keep_array_indentation) {\n\t                            // we REALLY need a newline here, but newliner would skip that\n\t                            opt.keep_array_indentation = false;\n\t                            print_newline();\n\t                            opt.keep_array_indentation = true;\n\t\n\t                        } else {\n\t                            print_newline();\n\t                        }\n\t                    }\n\t                }\n\t                restore_mode();\n\t                print_token();\n\t            }\n\t\n\t            function handle_word() {\n\t                if (current_token.type === 'TK_RESERVED') {\n\t                    if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {\n\t                        current_token.type = 'TK_WORD';\n\t                    } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {\n\t                        current_token.type = 'TK_WORD';\n\t                    } else if (flags.mode === MODE.ObjectLiteral) {\n\t                        var next_token = get_token(1);\n\t                        if (next_token.text === ':') {\n\t                            current_token.type = 'TK_WORD';\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (start_of_statement()) {\n\t                    // The conditional starts the statement if appropriate.\n\t                } else if (current_token.wanted_newline && !is_expression(flags.mode) &&\n\t                    (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&\n\t                    last_type !== 'TK_EQUALS' &&\n\t                    (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {\n\t\n\t                    print_newline();\n\t                }\n\t\n\t                if (flags.do_block && !flags.do_while) {\n\t                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {\n\t                        // do {} ## while ()\n\t                        output.space_before_token = true;\n\t                        print_token();\n\t                        output.space_before_token = true;\n\t                        flags.do_while = true;\n\t                        return;\n\t                    } else {\n\t                        // do {} should always have while as the next word.\n\t                        // if we don't see the expected while, recover\n\t                        print_newline();\n\t                        flags.do_block = false;\n\t                    }\n\t                }\n\t\n\t                // if may be followed by else, or not\n\t                // Bare/inline ifs are tricky\n\t                // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n\t                if (flags.if_block) {\n\t                    if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {\n\t                        flags.else_block = true;\n\t                    } else {\n\t                        while (flags.mode === MODE.Statement) {\n\t                            restore_mode();\n\t                        }\n\t                        flags.if_block = false;\n\t                        flags.else_block = false;\n\t                    }\n\t                }\n\t\n\t                if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {\n\t                    print_newline();\n\t                    if (flags.case_body || opt.jslint_happy) {\n\t                        // switch cases following one another\n\t                        deindent();\n\t                        flags.case_body = false;\n\t                    }\n\t                    print_token();\n\t                    flags.in_case = true;\n\t                    flags.in_case_statement = true;\n\t                    return;\n\t                }\n\t\n\t                if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {\n\t                    if (in_array(flags.last_text, ['}', ';']) || (output.just_added_newline() && !in_array(flags.last_text, ['[', '{', ':', '=', ',']))) {\n\t                        // make sure there is a nice clean space of at least one blank line\n\t                        // before a new function definition\n\t                        if (!output.just_added_blankline() && !current_token.comments_before.length) {\n\t                            print_newline();\n\t                            print_newline(true);\n\t                        }\n\t                    }\n\t                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {\n\t                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {\n\t                            output.space_before_token = true;\n\t                        } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {\n\t                            output.space_before_token = true;\n\t                        } else {\n\t                            print_newline();\n\t                        }\n\t                    } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {\n\t                        // foo = function\n\t                        output.space_before_token = true;\n\t                    } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {\n\t                        // (function\n\t                    } else {\n\t                        print_newline();\n\t                    }\n\t                }\n\t\n\t                if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n\t                    if (!start_of_object_property()) {\n\t                        allow_wrap_or_preserved_newline();\n\t                    }\n\t                }\n\t\n\t                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['function', 'get', 'set'])) {\n\t                    print_token();\n\t                    flags.last_word = current_token.text;\n\t                    return;\n\t                }\n\t\n\t                prefix = 'NONE';\n\t\n\t                if (last_type === 'TK_END_BLOCK') {\n\t\n\t                    if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {\n\t                        prefix = 'NEWLINE';\n\t                    } else {\n\t                        if (opt.brace_style === \"expand\" ||\n\t                            opt.brace_style === \"end-expand\" ||\n\t                            (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n\t                            prefix = 'NEWLINE';\n\t                        } else {\n\t                            prefix = 'SPACE';\n\t                            output.space_before_token = true;\n\t                        }\n\t                    }\n\t                } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {\n\t                    // TODO: Should this be for STATEMENT as well?\n\t                    prefix = 'NEWLINE';\n\t                } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {\n\t                    prefix = 'SPACE';\n\t                } else if (last_type === 'TK_STRING') {\n\t                    prefix = 'NEWLINE';\n\t                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||\n\t                    (flags.last_text === '*' && last_last_text === 'function')) {\n\t                    prefix = 'SPACE';\n\t                } else if (last_type === 'TK_START_BLOCK') {\n\t                    if (flags.inline_frame) {\n\t                        prefix = 'SPACE';\n\t                    } else {\n\t                        prefix = 'NEWLINE';\n\t                    }\n\t                } else if (last_type === 'TK_END_EXPR') {\n\t                    output.space_before_token = true;\n\t                    prefix = 'NEWLINE';\n\t                }\n\t\n\t                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n\t                    if (flags.last_text === 'else' || flags.last_text === 'export') {\n\t                        prefix = 'SPACE';\n\t                    } else {\n\t                        prefix = 'NEWLINE';\n\t                    }\n\t\n\t                }\n\t\n\t                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {\n\t                    if (!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||\n\t                        opt.brace_style === \"expand\" ||\n\t                        opt.brace_style === \"end-expand\" ||\n\t                        (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n\t                        print_newline();\n\t                    } else {\n\t                        output.trim(true);\n\t                        var line = output.current_line;\n\t                        // If we trimmed and there's something other than a close block before us\n\t                        // put a newline back in.  Handles '} // comment' scenario.\n\t                        if (line.last() !== '}') {\n\t                            print_newline();\n\t                        }\n\t                        output.space_before_token = true;\n\t                    }\n\t                } else if (prefix === 'NEWLINE') {\n\t                    if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n\t                        // no newline between 'return nnn'\n\t                        output.space_before_token = true;\n\t                    } else if (last_type !== 'TK_END_EXPR') {\n\t                        if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {\n\t                            // no need to force newline on 'var': for (var x = 0...)\n\t                            if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {\n\t                                // no newline for } else if {\n\t                                output.space_before_token = true;\n\t                            } else {\n\t                                print_newline();\n\t                            }\n\t                        }\n\t                    } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n\t                        print_newline();\n\t                    }\n\t                } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {\n\t                    print_newline(); // }, in lists get a newline treatment\n\t                } else if (prefix === 'SPACE') {\n\t                    output.space_before_token = true;\n\t                }\n\t                print_token();\n\t                flags.last_word = current_token.text;\n\t\n\t                if (current_token.type === 'TK_RESERVED') {\n\t                    if (current_token.text === 'do') {\n\t                        flags.do_block = true;\n\t                    } else if (current_token.text === 'if') {\n\t                        flags.if_block = true;\n\t                    } else if (current_token.text === 'import') {\n\t                        flags.import_block = true;\n\t                    } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {\n\t                        flags.import_block = false;\n\t                    }\n\t                }\n\t            }\n\t\n\t            function handle_semicolon() {\n\t                if (start_of_statement()) {\n\t                    // The conditional starts the statement if appropriate.\n\t                    // Semicolon can be the start (and end) of a statement\n\t                    output.space_before_token = false;\n\t                }\n\t                while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {\n\t                    restore_mode();\n\t                }\n\t\n\t                // hacky but effective for the moment\n\t                if (flags.import_block) {\n\t                    flags.import_block = false;\n\t                }\n\t                print_token();\n\t            }\n\t\n\t            function handle_string() {\n\t                if (start_of_statement()) {\n\t                    // The conditional starts the statement if appropriate.\n\t                    // One difference - strings want at least a space before\n\t                    output.space_before_token = true;\n\t                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {\n\t                    output.space_before_token = true;\n\t                } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n\t                    if (!start_of_object_property()) {\n\t                        allow_wrap_or_preserved_newline();\n\t                    }\n\t                } else {\n\t                    print_newline();\n\t                }\n\t                print_token();\n\t            }\n\t\n\t            function handle_equals() {\n\t                if (start_of_statement()) {\n\t                    // The conditional starts the statement if appropriate.\n\t                }\n\t\n\t                if (flags.declaration_statement) {\n\t                    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n\t                    flags.declaration_assignment = true;\n\t                }\n\t                output.space_before_token = true;\n\t                print_token();\n\t                output.space_before_token = true;\n\t            }\n\t\n\t            function handle_comma() {\n\t                print_token();\n\t                output.space_before_token = true;\n\t                if (flags.declaration_statement) {\n\t                    if (is_expression(flags.parent.mode)) {\n\t                        // do not break on comma, for(var a = 1, b = 2)\n\t                        flags.declaration_assignment = false;\n\t                    }\n\t\n\t                    if (flags.declaration_assignment) {\n\t                        flags.declaration_assignment = false;\n\t                        print_newline(false, true);\n\t                    } else if (opt.comma_first) {\n\t                        // for comma-first, we want to allow a newline before the comma\n\t                        // to turn into a newline after the comma, which we will fixup later\n\t                        allow_wrap_or_preserved_newline();\n\t                    }\n\t                } else if (flags.mode === MODE.ObjectLiteral ||\n\t                    (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {\n\t                    if (flags.mode === MODE.Statement) {\n\t                        restore_mode();\n\t                    }\n\t\n\t                    if (!flags.inline_frame) {\n\t                        print_newline();\n\t                    }\n\t                } else if (opt.comma_first) {\n\t                    // EXPR or DO_BLOCK\n\t                    // for comma-first, we want to allow a newline before the comma\n\t                    // to turn into a newline after the comma, which we will fixup later\n\t                    allow_wrap_or_preserved_newline();\n\t                }\n\t            }\n\t\n\t            function handle_operator() {\n\t                if (start_of_statement()) {\n\t                    // The conditional starts the statement if appropriate.\n\t                }\n\t\n\t                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n\t                    // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n\t                    output.space_before_token = true;\n\t                    print_token();\n\t                    return;\n\t                }\n\t\n\t                // hack for actionscript's import .*;\n\t                if (current_token.text === '*' && last_type === 'TK_DOT') {\n\t                    print_token();\n\t                    return;\n\t                }\n\t\n\t                if (current_token.text === '::') {\n\t                    // no spaces around exotic namespacing syntax operator\n\t                    print_token();\n\t                    return;\n\t                }\n\t\n\t                // Allow line wrapping between operators when operator_position is\n\t                //   set to before or preserve\n\t                if (last_type === 'TK_OPERATOR' && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {\n\t                    allow_wrap_or_preserved_newline();\n\t                }\n\t\n\t                if (current_token.text === ':' && flags.in_case) {\n\t                    flags.case_body = true;\n\t                    indent();\n\t                    print_token();\n\t                    print_newline();\n\t                    flags.in_case = false;\n\t                    return;\n\t                }\n\t\n\t                var space_before = true;\n\t                var space_after = true;\n\t                var in_ternary = false;\n\t                var isGeneratorAsterisk = current_token.text === '*' && last_type === 'TK_RESERVED' && flags.last_text === 'function';\n\t                var isUnary = in_array(current_token.text, ['-', '+']) && (\n\t                    in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) ||\n\t                    in_array(flags.last_text, Tokenizer.line_starters) ||\n\t                    flags.last_text === ','\n\t                );\n\t\n\t                if (current_token.text === ':') {\n\t                    if (flags.ternary_depth === 0) {\n\t                        // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.\n\t                        space_before = false;\n\t                    } else {\n\t                        flags.ternary_depth -= 1;\n\t                        in_ternary = true;\n\t                    }\n\t                } else if (current_token.text === '?') {\n\t                    flags.ternary_depth += 1;\n\t                }\n\t\n\t                // let's handle the operator_position option prior to any conflicting logic\n\t                if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, Tokenizer.positionable_operators)) {\n\t                    var isColon = current_token.text === ':';\n\t                    var isTernaryColon = (isColon && in_ternary);\n\t                    var isOtherColon = (isColon && !in_ternary);\n\t\n\t                    switch (opt.operator_position) {\n\t                        case OPERATOR_POSITION.before_newline:\n\t                            // if the current token is : and it's not a ternary statement then we set space_before to false\n\t                            output.space_before_token = !isOtherColon;\n\t\n\t                            print_token();\n\t\n\t                            if (!isColon || isTernaryColon) {\n\t                                allow_wrap_or_preserved_newline();\n\t                            }\n\t\n\t                            output.space_before_token = true;\n\t                            return;\n\t\n\t                        case OPERATOR_POSITION.after_newline:\n\t                            // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,\n\t                            //   then print a newline.\n\t\n\t                            output.space_before_token = true;\n\t\n\t                            if (!isColon || isTernaryColon) {\n\t                                if (get_token(1).wanted_newline) {\n\t                                    print_newline(false, true);\n\t                                } else {\n\t                                    allow_wrap_or_preserved_newline();\n\t                                }\n\t                            } else {\n\t                                output.space_before_token = false;\n\t                            }\n\t\n\t                            print_token();\n\t\n\t                            output.space_before_token = true;\n\t                            return;\n\t\n\t                        case OPERATOR_POSITION.preserve_newline:\n\t                            if (!isOtherColon) {\n\t                                allow_wrap_or_preserved_newline();\n\t                            }\n\t\n\t                            // if we just added a newline, or the current token is : and it's not a ternary statement,\n\t                            //   then we set space_before to false\n\t                            space_before = !(output.just_added_newline() || isOtherColon);\n\t\n\t                            output.space_before_token = space_before;\n\t                            print_token();\n\t                            output.space_before_token = true;\n\t                            return;\n\t                    }\n\t                }\n\t\n\t                if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {\n\t                    // unary operators (and binary +/- pretending to be unary) special cases\n\t\n\t                    space_before = false;\n\t                    space_after = false;\n\t\n\t                    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n\t                    // if there is a newline between -- or ++ and anything else we should preserve it.\n\t                    if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {\n\t                        print_newline(false, true);\n\t                    }\n\t\n\t                    if (flags.last_text === ';' && is_expression(flags.mode)) {\n\t                        // for (;; ++i)\n\t                        //        ^^^\n\t                        space_before = true;\n\t                    }\n\t\n\t                    if (last_type === 'TK_RESERVED') {\n\t                        space_before = true;\n\t                    } else if (last_type === 'TK_END_EXPR') {\n\t                        space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));\n\t                    } else if (last_type === 'TK_OPERATOR') {\n\t                        // a++ + ++b;\n\t                        // a - -b\n\t                        space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);\n\t                        // + and - are not unary when preceeded by -- or ++ operator\n\t                        // a-- + b\n\t                        // a * +b\n\t                        // a - -b\n\t                        if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {\n\t                            space_after = true;\n\t                        }\n\t                    }\n\t\n\t\n\t                    if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&\n\t                        (flags.last_text === '{' || flags.last_text === ';')) {\n\t                        // { foo; --i }\n\t                        // foo(); --bar;\n\t                        print_newline();\n\t                    }\n\t                } else if (isGeneratorAsterisk) {\n\t                    space_before = false;\n\t                    space_after = false;\n\t                }\n\t                output.space_before_token = output.space_before_token || space_before;\n\t                print_token();\n\t                output.space_before_token = space_after;\n\t            }\n\t\n\t            function handle_block_comment() {\n\t                if (output.raw) {\n\t                    output.add_raw_token(current_token);\n\t                    if (current_token.directives && current_token.directives.preserve === 'end') {\n\t                        // If we're testing the raw output behavior, do not allow a directive to turn it off.\n\t                        output.raw = opt.test_output_raw;\n\t                    }\n\t                    return;\n\t                }\n\t\n\t                if (current_token.directives) {\n\t                    print_newline(false, true);\n\t                    print_token();\n\t                    if (current_token.directives.preserve === 'start') {\n\t                        output.raw = true;\n\t                    }\n\t                    print_newline(false, true);\n\t                    return;\n\t                }\n\t\n\t                // inline block\n\t                if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {\n\t                    output.space_before_token = true;\n\t                    print_token();\n\t                    output.space_before_token = true;\n\t                    return;\n\t                }\n\t\n\t                var lines = split_linebreaks(current_token.text);\n\t                var j; // iterator for this case\n\t                var javadoc = false;\n\t                var starless = false;\n\t                var lastIndent = current_token.whitespace_before;\n\t                var lastIndentLength = lastIndent.length;\n\t\n\t                // block comment starts with a new line\n\t                print_newline(false, true);\n\t                if (lines.length > 1) {\n\t                    javadoc = all_lines_start_with(lines.slice(1), '*');\n\t                    starless = each_line_matches_indent(lines.slice(1), lastIndent);\n\t                }\n\t\n\t                // first line always indented\n\t                print_token(lines[0]);\n\t                for (j = 1; j < lines.length; j++) {\n\t                    print_newline(false, true);\n\t                    if (javadoc) {\n\t                        // javadoc: reformat and re-indent\n\t                        print_token(' ' + ltrim(lines[j]));\n\t                    } else if (starless && lines[j].length > lastIndentLength) {\n\t                        // starless: re-indent non-empty content, avoiding trim\n\t                        print_token(lines[j].substring(lastIndentLength));\n\t                    } else {\n\t                        // normal comments output raw\n\t                        output.add_token(lines[j]);\n\t                    }\n\t                }\n\t\n\t                // for comments of more than one line, make sure there's a new line after\n\t                print_newline(false, true);\n\t            }\n\t\n\t            function handle_comment() {\n\t                if (current_token.wanted_newline) {\n\t                    print_newline(false, true);\n\t                } else {\n\t                    output.trim(true);\n\t                }\n\t\n\t                output.space_before_token = true;\n\t                print_token();\n\t                print_newline(false, true);\n\t            }\n\t\n\t            function handle_dot() {\n\t                if (start_of_statement()) {\n\t                    // The conditional starts the statement if appropriate.\n\t                }\n\t\n\t                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n\t                    output.space_before_token = true;\n\t                } else {\n\t                    // allow preserved newlines before dots in general\n\t                    // force newlines on dots after close paren when break_chained - for bar().baz()\n\t                    allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);\n\t                }\n\t\n\t                print_token();\n\t            }\n\t\n\t            function handle_unknown() {\n\t                print_token();\n\t\n\t                if (current_token.text[current_token.text.length - 1] === '\\n') {\n\t                    print_newline();\n\t                }\n\t            }\n\t\n\t            function handle_eof() {\n\t                // Unwind any open statements\n\t                while (flags.mode === MODE.Statement) {\n\t                    restore_mode();\n\t                }\n\t            }\n\t        }\n\t\n\t\n\t        function OutputLine(parent) {\n\t            var _character_count = 0;\n\t            // use indent_count as a marker for lines that have preserved indentation\n\t            var _indent_count = -1;\n\t\n\t            var _items = [];\n\t            var _empty = true;\n\t\n\t            this.set_indent = function(level) {\n\t                _character_count = parent.baseIndentLength + level * parent.indent_length;\n\t                _indent_count = level;\n\t            };\n\t\n\t            this.get_character_count = function() {\n\t                return _character_count;\n\t            };\n\t\n\t            this.is_empty = function() {\n\t                return _empty;\n\t            };\n\t\n\t            this.last = function() {\n\t                if (!this._empty) {\n\t                    return _items[_items.length - 1];\n\t                } else {\n\t                    return null;\n\t                }\n\t            };\n\t\n\t            this.push = function(input) {\n\t                _items.push(input);\n\t                _character_count += input.length;\n\t                _empty = false;\n\t            };\n\t\n\t            this.pop = function() {\n\t                var item = null;\n\t                if (!_empty) {\n\t                    item = _items.pop();\n\t                    _character_count -= item.length;\n\t                    _empty = _items.length === 0;\n\t                }\n\t                return item;\n\t            };\n\t\n\t            this.remove_indent = function() {\n\t                if (_indent_count > 0) {\n\t                    _indent_count -= 1;\n\t                    _character_count -= parent.indent_length;\n\t                }\n\t            };\n\t\n\t            this.trim = function() {\n\t                while (this.last() === ' ') {\n\t                    _items.pop();\n\t                    _character_count -= 1;\n\t                }\n\t                _empty = _items.length === 0;\n\t            };\n\t\n\t            this.toString = function() {\n\t                var result = '';\n\t                if (!this._empty) {\n\t                    if (_indent_count >= 0) {\n\t                        result = parent.indent_cache[_indent_count];\n\t                    }\n\t                    result += _items.join('');\n\t                }\n\t                return result;\n\t            };\n\t        }\n\t\n\t        function Output(indent_string, baseIndentString) {\n\t            baseIndentString = baseIndentString || '';\n\t            this.indent_cache = [baseIndentString];\n\t            this.baseIndentLength = baseIndentString.length;\n\t            this.indent_length = indent_string.length;\n\t            this.raw = false;\n\t\n\t            var lines = [];\n\t            this.baseIndentString = baseIndentString;\n\t            this.indent_string = indent_string;\n\t            this.previous_line = null;\n\t            this.current_line = null;\n\t            this.space_before_token = false;\n\t\n\t            this.add_outputline = function() {\n\t                this.previous_line = this.current_line;\n\t                this.current_line = new OutputLine(this);\n\t                lines.push(this.current_line);\n\t            };\n\t\n\t            // initialize\n\t            this.add_outputline();\n\t\n\t\n\t            this.get_line_number = function() {\n\t                return lines.length;\n\t            };\n\t\n\t            // Using object instead of string to allow for later expansion of info about each line\n\t            this.add_new_line = function(force_newline) {\n\t                if (this.get_line_number() === 1 && this.just_added_newline()) {\n\t                    return false; // no newline on start of file\n\t                }\n\t\n\t                if (force_newline || !this.just_added_newline()) {\n\t                    if (!this.raw) {\n\t                        this.add_outputline();\n\t                    }\n\t                    return true;\n\t                }\n\t\n\t                return false;\n\t            };\n\t\n\t            this.get_code = function() {\n\t                var sweet_code = lines.join('\\n').replace(/[\\r\\n\\t ]+$/, '');\n\t                return sweet_code;\n\t            };\n\t\n\t            this.set_indent = function(level) {\n\t                // Never indent your first output indent at the start of the file\n\t                if (lines.length > 1) {\n\t                    while (level >= this.indent_cache.length) {\n\t                        this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);\n\t                    }\n\t\n\t                    this.current_line.set_indent(level);\n\t                    return true;\n\t                }\n\t                this.current_line.set_indent(0);\n\t                return false;\n\t            };\n\t\n\t            this.add_raw_token = function(token) {\n\t                for (var x = 0; x < token.newlines; x++) {\n\t                    this.add_outputline();\n\t                }\n\t                this.current_line.push(token.whitespace_before);\n\t                this.current_line.push(token.text);\n\t                this.space_before_token = false;\n\t            };\n\t\n\t            this.add_token = function(printable_token) {\n\t                this.add_space_before_token();\n\t                this.current_line.push(printable_token);\n\t            };\n\t\n\t            this.add_space_before_token = function() {\n\t                if (this.space_before_token && !this.just_added_newline()) {\n\t                    this.current_line.push(' ');\n\t                }\n\t                this.space_before_token = false;\n\t            };\n\t\n\t            this.remove_redundant_indentation = function(frame) {\n\t                // This implementation is effective but has some issues:\n\t                //     - can cause line wrap to happen too soon due to indent removal\n\t                //           after wrap points are calculated\n\t                // These issues are minor compared to ugly indentation.\n\t\n\t                if (frame.multiline_frame ||\n\t                    frame.mode === MODE.ForInitializer ||\n\t                    frame.mode === MODE.Conditional) {\n\t                    return;\n\t                }\n\t\n\t                // remove one indent from each line inside this section\n\t                var index = frame.start_line_index;\n\t\n\t                var output_length = lines.length;\n\t                while (index < output_length) {\n\t                    lines[index].remove_indent();\n\t                    index++;\n\t                }\n\t            };\n\t\n\t            this.trim = function(eat_newlines) {\n\t                eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\t\n\t                this.current_line.trim(indent_string, baseIndentString);\n\t\n\t                while (eat_newlines && lines.length > 1 &&\n\t                    this.current_line.is_empty()) {\n\t                    lines.pop();\n\t                    this.current_line = lines[lines.length - 1];\n\t                    this.current_line.trim();\n\t                }\n\t\n\t                this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;\n\t            };\n\t\n\t            this.just_added_newline = function() {\n\t                return this.current_line.is_empty();\n\t            };\n\t\n\t            this.just_added_blankline = function() {\n\t                if (this.just_added_newline()) {\n\t                    if (lines.length === 1) {\n\t                        return true; // start of the file and newline = blank\n\t                    }\n\t\n\t                    var line = lines[lines.length - 2];\n\t                    return line.is_empty();\n\t                }\n\t                return false;\n\t            };\n\t        }\n\t\n\t\n\t        var Token = function(type, text, newlines, whitespace_before, parent) {\n\t            this.type = type;\n\t            this.text = text;\n\t            this.comments_before = [];\n\t            this.newlines = newlines || 0;\n\t            this.wanted_newline = newlines > 0;\n\t            this.whitespace_before = whitespace_before || '';\n\t            this.parent = parent || null;\n\t            this.opened = null;\n\t            this.directives = null;\n\t        };\n\t\n\t        function tokenizer(input, opts) {\n\t\n\t            var whitespace = \"\\n\\r\\t \".split('');\n\t            var digit = /[0-9]/;\n\t            var digit_bin = /[01]/;\n\t            var digit_oct = /[01234567]/;\n\t            var digit_hex = /[0123456789abcdefABCDEF]/;\n\t\n\t            this.positionable_operators = '!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');\n\t            var punct = this.positionable_operators.concat(\n\t                // non-positionable operators - these do not follow operator position settings\n\t                '! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~'.split(' '));\n\t\n\t            // words which should always start on new line.\n\t            this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');\n\t            var reserved_words = this.line_starters.concat(['do', 'in', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);\n\t\n\t            //  /* ... */ comment ends with nearest */ or end of file\n\t            var block_comment_pattern = /([\\s\\S]*?)((?:\\*\\/)|$)/g;\n\t\n\t            // comment ends just before nearest linefeed or end of file\n\t            var comment_pattern = /([^\\n\\r\\u2028\\u2029]*)/g;\n\t\n\t            var directives_block_pattern = /\\/\\* beautify( \\w+[:]\\w+)+ \\*\\//g;\n\t            var directive_pattern = / (\\w+)[:](\\w+)/g;\n\t            var directives_end_ignore_pattern = /([\\s\\S]*?)((?:\\/\\*\\sbeautify\\signore:end\\s\\*\\/)|$)/g;\n\t\n\t            var template_pattern = /((<\\?php|<\\?=)[\\s\\S]*?\\?>)|(<%[\\s\\S]*?%>)/g;\n\t\n\t            var n_newlines, whitespace_before_token, in_html_comment, tokens, parser_pos;\n\t            var input_length;\n\t\n\t            this.tokenize = function() {\n\t                // cache the source's length.\n\t                input_length = input.length;\n\t                parser_pos = 0;\n\t                in_html_comment = false;\n\t                tokens = [];\n\t\n\t                var next, last;\n\t                var token_values;\n\t                var open = null;\n\t                var open_stack = [];\n\t                var comments = [];\n\t\n\t                while (!(last && last.type === 'TK_EOF')) {\n\t                    token_values = tokenize_next();\n\t                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n\t                    while (next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {\n\t                        if (next.type === 'TK_BLOCK_COMMENT') {\n\t                            next.directives = token_values[2];\n\t                        }\n\t                        comments.push(next);\n\t                        token_values = tokenize_next();\n\t                        next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n\t                    }\n\t\n\t                    if (comments.length) {\n\t                        next.comments_before = comments;\n\t                        comments = [];\n\t                    }\n\t\n\t                    if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {\n\t                        next.parent = last;\n\t                        open_stack.push(open);\n\t                        open = next;\n\t                    } else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&\n\t                        (open && (\n\t                            (next.text === ']' && open.text === '[') ||\n\t                            (next.text === ')' && open.text === '(') ||\n\t                            (next.text === '}' && open.text === '{')))) {\n\t                        next.parent = open.parent;\n\t                        next.opened = open;\n\t\n\t                        open = open_stack.pop();\n\t                    }\n\t\n\t                    tokens.push(next);\n\t                    last = next;\n\t                }\n\t\n\t                return tokens;\n\t            };\n\t\n\t            function get_directives(text) {\n\t                if (!text.match(directives_block_pattern)) {\n\t                    return null;\n\t                }\n\t\n\t                var directives = {};\n\t                directive_pattern.lastIndex = 0;\n\t                var directive_match = directive_pattern.exec(text);\n\t\n\t                while (directive_match) {\n\t                    directives[directive_match[1]] = directive_match[2];\n\t                    directive_match = directive_pattern.exec(text);\n\t                }\n\t\n\t                return directives;\n\t            }\n\t\n\t            function tokenize_next() {\n\t                var resulting_string;\n\t                var whitespace_on_this_line = [];\n\t\n\t                n_newlines = 0;\n\t                whitespace_before_token = '';\n\t\n\t                if (parser_pos >= input_length) {\n\t                    return ['', 'TK_EOF'];\n\t                }\n\t\n\t                var last_token;\n\t                if (tokens.length) {\n\t                    last_token = tokens[tokens.length - 1];\n\t                } else {\n\t                    // For the sake of tokenizing we can pretend that there was on open brace to start\n\t                    last_token = new Token('TK_START_BLOCK', '{');\n\t                }\n\t\n\t\n\t                var c = input.charAt(parser_pos);\n\t                parser_pos += 1;\n\t\n\t                while (in_array(c, whitespace)) {\n\t\n\t                    if (acorn.newline.test(c)) {\n\t                        if (!(c === '\\n' && input.charAt(parser_pos - 2) === '\\r')) {\n\t                            n_newlines += 1;\n\t                            whitespace_on_this_line = [];\n\t                        }\n\t                    } else {\n\t                        whitespace_on_this_line.push(c);\n\t                    }\n\t\n\t                    if (parser_pos >= input_length) {\n\t                        return ['', 'TK_EOF'];\n\t                    }\n\t\n\t                    c = input.charAt(parser_pos);\n\t                    parser_pos += 1;\n\t                }\n\t\n\t                if (whitespace_on_this_line.length) {\n\t                    whitespace_before_token = whitespace_on_this_line.join('');\n\t                }\n\t\n\t                if (digit.test(c) || (c === '.' && digit.test(input.charAt(parser_pos)))) {\n\t                    var allow_decimal = true;\n\t                    var allow_e = true;\n\t                    var local_digit = digit;\n\t\n\t                    if (c === '0' && parser_pos < input_length && /[XxOoBb]/.test(input.charAt(parser_pos))) {\n\t                        // switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits\n\t                        allow_decimal = false;\n\t                        allow_e = false;\n\t                        if (/[Bb]/.test(input.charAt(parser_pos))) {\n\t                            local_digit = digit_bin;\n\t                        } else if (/[Oo]/.test(input.charAt(parser_pos))) {\n\t                            local_digit = digit_oct;\n\t                        } else {\n\t                            local_digit = digit_hex;\n\t                        }\n\t                        c += input.charAt(parser_pos);\n\t                        parser_pos += 1;\n\t                    } else if (c === '.') {\n\t                        // Already have a decimal for this literal, don't allow another\n\t                        allow_decimal = false;\n\t                    } else {\n\t                        // we know this first loop will run.  It keeps the logic simpler.\n\t                        c = '';\n\t                        parser_pos -= 1;\n\t                    }\n\t\n\t                    // Add the digits\n\t                    while (parser_pos < input_length && local_digit.test(input.charAt(parser_pos))) {\n\t                        c += input.charAt(parser_pos);\n\t                        parser_pos += 1;\n\t\n\t                        if (allow_decimal && parser_pos < input_length && input.charAt(parser_pos) === '.') {\n\t                            c += input.charAt(parser_pos);\n\t                            parser_pos += 1;\n\t                            allow_decimal = false;\n\t                        } else if (allow_e && parser_pos < input_length && /[Ee]/.test(input.charAt(parser_pos))) {\n\t                            c += input.charAt(parser_pos);\n\t                            parser_pos += 1;\n\t\n\t                            if (parser_pos < input_length && /[+-]/.test(input.charAt(parser_pos))) {\n\t                                c += input.charAt(parser_pos);\n\t                                parser_pos += 1;\n\t                            }\n\t\n\t                            allow_e = false;\n\t                            allow_decimal = false;\n\t                        }\n\t                    }\n\t\n\t                    return [c, 'TK_WORD'];\n\t                }\n\t\n\t                if (acorn.isIdentifierStart(input.charCodeAt(parser_pos - 1))) {\n\t                    if (parser_pos < input_length) {\n\t                        while (acorn.isIdentifierChar(input.charCodeAt(parser_pos))) {\n\t                            c += input.charAt(parser_pos);\n\t                            parser_pos += 1;\n\t                            if (parser_pos === input_length) {\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                    if (!(last_token.type === 'TK_DOT' ||\n\t                            (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get']))) &&\n\t                        in_array(c, reserved_words)) {\n\t                        if (c === 'in') { // hack for 'in' operator\n\t                            return [c, 'TK_OPERATOR'];\n\t                        }\n\t                        return [c, 'TK_RESERVED'];\n\t                    }\n\t\n\t                    return [c, 'TK_WORD'];\n\t                }\n\t\n\t                if (c === '(' || c === '[') {\n\t                    return [c, 'TK_START_EXPR'];\n\t                }\n\t\n\t                if (c === ')' || c === ']') {\n\t                    return [c, 'TK_END_EXPR'];\n\t                }\n\t\n\t                if (c === '{') {\n\t                    return [c, 'TK_START_BLOCK'];\n\t                }\n\t\n\t                if (c === '}') {\n\t                    return [c, 'TK_END_BLOCK'];\n\t                }\n\t\n\t                if (c === ';') {\n\t                    return [c, 'TK_SEMICOLON'];\n\t                }\n\t\n\t                if (c === '/') {\n\t                    var comment = '';\n\t                    var comment_match;\n\t                    // peek for comment /* ... */\n\t                    if (input.charAt(parser_pos) === '*') {\n\t                        parser_pos += 1;\n\t                        block_comment_pattern.lastIndex = parser_pos;\n\t                        comment_match = block_comment_pattern.exec(input);\n\t                        comment = '/*' + comment_match[0];\n\t                        parser_pos += comment_match[0].length;\n\t                        var directives = get_directives(comment);\n\t                        if (directives && directives.ignore === 'start') {\n\t                            directives_end_ignore_pattern.lastIndex = parser_pos;\n\t                            comment_match = directives_end_ignore_pattern.exec(input);\n\t                            comment += comment_match[0];\n\t                            parser_pos += comment_match[0].length;\n\t                        }\n\t                        comment = comment.replace(acorn.allLineBreaks, '\\n');\n\t                        return [comment, 'TK_BLOCK_COMMENT', directives];\n\t                    }\n\t                    // peek for comment // ...\n\t                    if (input.charAt(parser_pos) === '/') {\n\t                        parser_pos += 1;\n\t                        comment_pattern.lastIndex = parser_pos;\n\t                        comment_match = comment_pattern.exec(input);\n\t                        comment = '//' + comment_match[0];\n\t                        parser_pos += comment_match[0].length;\n\t                        return [comment, 'TK_COMMENT'];\n\t                    }\n\t\n\t                }\n\t\n\t                var startXmlRegExp = /^<([-a-zA-Z:0-9_.]+|{.+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{.+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{.+?}))*\\s*(\\/?)\\s*>/;\n\t\n\t                if (c === '`' || c === \"'\" || c === '\"' || // string\n\t                    (\n\t                        (c === '/') || // regexp\n\t                        (opts.e4x && c === \"<\" && input.slice(parser_pos - 1).match(startXmlRegExp)) // xml\n\t                    ) && ( // regex and xml can only appear in specific locations during parsing\n\t                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||\n\t                        (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&\n\t                            last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||\n\t                        (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',\n\t                            'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'\n\t                        ]))\n\t                    )) {\n\t\n\t                    var sep = c,\n\t                        esc = false,\n\t                        has_char_escapes = false;\n\t\n\t                    resulting_string = c;\n\t\n\t                    if (sep === '/') {\n\t                        //\n\t                        // handle regexp\n\t                        //\n\t                        var in_char_class = false;\n\t                        while (parser_pos < input_length &&\n\t                            ((esc || in_char_class || input.charAt(parser_pos) !== sep) &&\n\t                                !acorn.newline.test(input.charAt(parser_pos)))) {\n\t                            resulting_string += input.charAt(parser_pos);\n\t                            if (!esc) {\n\t                                esc = input.charAt(parser_pos) === '\\\\';\n\t                                if (input.charAt(parser_pos) === '[') {\n\t                                    in_char_class = true;\n\t                                } else if (input.charAt(parser_pos) === ']') {\n\t                                    in_char_class = false;\n\t                                }\n\t                            } else {\n\t                                esc = false;\n\t                            }\n\t                            parser_pos += 1;\n\t                        }\n\t                    } else if (opts.e4x && sep === '<') {\n\t                        //\n\t                        // handle e4x xml literals\n\t                        //\n\t\n\t                        var xmlRegExp = /<(\\/?)([-a-zA-Z:0-9_.]+|{.+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{.+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{.+?}))*\\s*(\\/?)\\s*>/g;\n\t                        var xmlStr = input.slice(parser_pos - 1);\n\t                        var match = xmlRegExp.exec(xmlStr);\n\t                        if (match && match.index === 0) {\n\t                            var rootTag = match[2];\n\t                            var depth = 0;\n\t                            while (match) {\n\t                                var isEndTag = !!match[1];\n\t                                var tagName = match[2];\n\t                                var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");\n\t                                if (tagName === rootTag && !isSingletonTag) {\n\t                                    if (isEndTag) {\n\t                                        --depth;\n\t                                    } else {\n\t                                        ++depth;\n\t                                    }\n\t                                }\n\t                                if (depth <= 0) {\n\t                                    break;\n\t                                }\n\t                                match = xmlRegExp.exec(xmlStr);\n\t                            }\n\t                            var xmlLength = match ? match.index + match[0].length : xmlStr.length;\n\t                            xmlStr = xmlStr.slice(0, xmlLength);\n\t                            parser_pos += xmlLength - 1;\n\t                            xmlStr = xmlStr.replace(acorn.allLineBreaks, '\\n');\n\t                            return [xmlStr, \"TK_STRING\"];\n\t                        }\n\t                    } else {\n\t                        //\n\t                        // handle string\n\t                        //\n\t                        var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {\n\t                            // Template strings can travers lines without escape characters.\n\t                            // Other strings cannot\n\t                            var current_char;\n\t                            while (parser_pos < input_length) {\n\t                                current_char = input.charAt(parser_pos);\n\t                                if (!(esc || (current_char !== delimiter &&\n\t                                        (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {\n\t                                    break;\n\t                                }\n\t\n\t                                // Handle \\r\\n linebreaks after escapes or in template strings\n\t                                if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {\n\t                                    if (current_char === '\\r' && input.charAt(parser_pos + 1) === '\\n') {\n\t                                        parser_pos += 1;\n\t                                        current_char = input.charAt(parser_pos);\n\t                                    }\n\t                                    resulting_string += '\\n';\n\t                                } else {\n\t                                    resulting_string += current_char;\n\t                                }\n\t                                if (esc) {\n\t                                    if (current_char === 'x' || current_char === 'u') {\n\t                                        has_char_escapes = true;\n\t                                    }\n\t                                    esc = false;\n\t                                } else {\n\t                                    esc = current_char === '\\\\';\n\t                                }\n\t\n\t                                parser_pos += 1;\n\t\n\t                                if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {\n\t                                    if (delimiter === '`') {\n\t                                        parse_string('}', allow_unescaped_newlines, '`');\n\t                                    } else {\n\t                                        parse_string('`', allow_unescaped_newlines, '${');\n\t                                    }\n\t                                }\n\t                            }\n\t                        };\n\t\n\t                        if (sep === '`') {\n\t                            parse_string('`', true, '${');\n\t                        } else {\n\t                            parse_string(sep);\n\t                        }\n\t                    }\n\t\n\t                    if (has_char_escapes && opts.unescape_strings) {\n\t                        resulting_string = unescape_string(resulting_string);\n\t                    }\n\t\n\t                    if (parser_pos < input_length && input.charAt(parser_pos) === sep) {\n\t                        resulting_string += sep;\n\t                        parser_pos += 1;\n\t\n\t                        if (sep === '/') {\n\t                            // regexps may have modifiers /regexp/MOD , so fetch those, too\n\t                            // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.\n\t                            while (parser_pos < input_length && acorn.isIdentifierStart(input.charCodeAt(parser_pos))) {\n\t                                resulting_string += input.charAt(parser_pos);\n\t                                parser_pos += 1;\n\t                            }\n\t                        }\n\t                    }\n\t                    return [resulting_string, 'TK_STRING'];\n\t                }\n\t\n\t                if (c === '#') {\n\t\n\t                    if (tokens.length === 0 && input.charAt(parser_pos) === '!') {\n\t                        // shebang\n\t                        resulting_string = c;\n\t                        while (parser_pos < input_length && c !== '\\n') {\n\t                            c = input.charAt(parser_pos);\n\t                            resulting_string += c;\n\t                            parser_pos += 1;\n\t                        }\n\t                        return [trim(resulting_string) + '\\n', 'TK_UNKNOWN'];\n\t                    }\n\t\n\t\n\t\n\t                    // Spidermonkey-specific sharp variables for circular references\n\t                    // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript\n\t                    // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935\n\t                    var sharp = '#';\n\t                    if (parser_pos < input_length && digit.test(input.charAt(parser_pos))) {\n\t                        do {\n\t                            c = input.charAt(parser_pos);\n\t                            sharp += c;\n\t                            parser_pos += 1;\n\t                        } while (parser_pos < input_length && c !== '#' && c !== '=');\n\t                        if (c === '#') {\n\t                            //\n\t                        } else if (input.charAt(parser_pos) === '[' && input.charAt(parser_pos + 1) === ']') {\n\t                            sharp += '[]';\n\t                            parser_pos += 2;\n\t                        } else if (input.charAt(parser_pos) === '{' && input.charAt(parser_pos + 1) === '}') {\n\t                            sharp += '{}';\n\t                            parser_pos += 2;\n\t                        }\n\t                        return [sharp, 'TK_WORD'];\n\t                    }\n\t                }\n\t\n\t                if (c === '<' && (input.charAt(parser_pos) === '?' || input.charAt(parser_pos) === '%')) {\n\t                    template_pattern.lastIndex = parser_pos - 1;\n\t                    var template_match = template_pattern.exec(input);\n\t                    if (template_match) {\n\t                        c = template_match[0];\n\t                        parser_pos += c.length - 1;\n\t                        c = c.replace(acorn.allLineBreaks, '\\n');\n\t                        return [c, 'TK_STRING'];\n\t                    }\n\t                }\n\t\n\t                if (c === '<' && input.substring(parser_pos - 1, parser_pos + 3) === '<!--') {\n\t                    parser_pos += 3;\n\t                    c = '<!--';\n\t                    while (!acorn.newline.test(input.charAt(parser_pos)) && parser_pos < input_length) {\n\t                        c += input.charAt(parser_pos);\n\t                        parser_pos++;\n\t                    }\n\t                    in_html_comment = true;\n\t                    return [c, 'TK_COMMENT'];\n\t                }\n\t\n\t                if (c === '-' && in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === '-->') {\n\t                    in_html_comment = false;\n\t                    parser_pos += 2;\n\t                    return ['-->', 'TK_COMMENT'];\n\t                }\n\t\n\t                if (c === '.') {\n\t                    return [c, 'TK_DOT'];\n\t                }\n\t\n\t                if (in_array(c, punct)) {\n\t                    while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {\n\t                        c += input.charAt(parser_pos);\n\t                        parser_pos += 1;\n\t                        if (parser_pos >= input_length) {\n\t                            break;\n\t                        }\n\t                    }\n\t\n\t                    if (c === ',') {\n\t                        return [c, 'TK_COMMA'];\n\t                    } else if (c === '=') {\n\t                        return [c, 'TK_EQUALS'];\n\t                    } else {\n\t                        return [c, 'TK_OPERATOR'];\n\t                    }\n\t                }\n\t\n\t                return [c, 'TK_UNKNOWN'];\n\t            }\n\t\n\t\n\t            function unescape_string(s) {\n\t                var esc = false,\n\t                    out = '',\n\t                    pos = 0,\n\t                    s_hex = '',\n\t                    escaped = 0,\n\t                    c;\n\t\n\t                while (esc || pos < s.length) {\n\t\n\t                    c = s.charAt(pos);\n\t                    pos++;\n\t\n\t                    if (esc) {\n\t                        esc = false;\n\t                        if (c === 'x') {\n\t                            // simple hex-escape \\x24\n\t                            s_hex = s.substr(pos, 2);\n\t                            pos += 2;\n\t                        } else if (c === 'u') {\n\t                            // unicode-escape, \\u2134\n\t                            s_hex = s.substr(pos, 4);\n\t                            pos += 4;\n\t                        } else {\n\t                            // some common escape, e.g \\n\n\t                            out += '\\\\' + c;\n\t                            continue;\n\t                        }\n\t                        if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {\n\t                            // some weird escaping, bail out,\n\t                            // leaving whole string intact\n\t                            return s;\n\t                        }\n\t\n\t                        escaped = parseInt(s_hex, 16);\n\t\n\t                        if (escaped >= 0x00 && escaped < 0x20) {\n\t                            // leave 0x00...0x1f escaped\n\t                            if (c === 'x') {\n\t                                out += '\\\\x' + s_hex;\n\t                            } else {\n\t                                out += '\\\\u' + s_hex;\n\t                            }\n\t                            continue;\n\t                        } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n\t                            // single-quote, apostrophe, backslash - escape these\n\t                            out += '\\\\' + String.fromCharCode(escaped);\n\t                        } else if (c === 'x' && escaped > 0x7e && escaped <= 0xff) {\n\t                            // we bail out on \\x7f..\\xff,\n\t                            // leaving whole string escaped,\n\t                            // as it's probably completely binary\n\t                            return s;\n\t                        } else {\n\t                            out += String.fromCharCode(escaped);\n\t                        }\n\t                    } else if (c === '\\\\') {\n\t                        esc = true;\n\t                    } else {\n\t                        out += c;\n\t                    }\n\t                }\n\t                return out;\n\t            }\n\t        }\n\t\n\t        var beautifier = new Beautifier(js_source_text, options);\n\t        return beautifier.beautify();\n\t\n\t    }\n\t\n\t    if (true) {\n\t        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t            return { js_beautify: js_beautify };\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports !== \"undefined\") {\n\t        // Add support for CommonJS. Just put this file somewhere on your require.paths\n\t        // and you will be able to `var js_beautify = require(\"beautify\").js_beautify`.\n\t        exports.js_beautify = js_beautify;\n\t    } else if (typeof window !== \"undefined\") {\n\t        // If we're running a web page and don't have either of the above, add our one global\n\t        window.js_beautify = js_beautify;\n\t    } else if (typeof global !== \"undefined\") {\n\t        // If we don't even have window, try global.\n\t        global.js_beautify = js_beautify;\n\t    }\n\t\n\t}());\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n\t/*\n\t\n\t  The MIT License (MIT)\n\t\n\t  Copyright (c) 2007-2013 Einar Lielmanis and contributors.\n\t\n\t  Permission is hereby granted, free of charge, to any person\n\t  obtaining a copy of this software and associated documentation files\n\t  (the \"Software\"), to deal in the Software without restriction,\n\t  including without limitation the rights to use, copy, modify, merge,\n\t  publish, distribute, sublicense, and/or sell copies of the Software,\n\t  and to permit persons to whom the Software is furnished to do so,\n\t  subject to the following conditions:\n\t\n\t  The above copyright notice and this permission notice shall be\n\t  included in all copies or substantial portions of the Software.\n\t\n\t  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\t  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\t  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\t  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t  SOFTWARE.\n\t\n\t\n\t CSS Beautifier\n\t---------------\n\t\n\t    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)\n\t\n\t    Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>\n\t        http://jsbeautifier.org/\n\t\n\t    Usage:\n\t        css_beautify(source_text);\n\t        css_beautify(source_text, options);\n\t\n\t    The options are (default in brackets):\n\t        indent_size (4)                         — indentation size,\n\t        indent_char (space)                     — character to indent with,\n\t        selector_separator_newline (true)       - separate selectors with newline or\n\t                                                  not (e.g. \"a,\\nbr\" or \"a, br\")\n\t        end_with_newline (false)                - end with a newline\n\t        newline_between_rules (true)            - add a new line after every css rule\n\t        space_around_selector_separator (false) - ensure space around selector separators:\n\t                                                  '>', '+', '~' (e.g. \"a>b\" -> \"a > b\")\n\t    e.g\n\t\n\t    css_beautify(css_source_text, {\n\t      'indent_size': 1,\n\t      'indent_char': '\\t',\n\t      'selector_separator': ' ',\n\t      'end_with_newline': false,\n\t      'newline_between_rules': true,\n\t      'space_around_selector_separator': true\n\t    });\n\t*/\n\t\n\t// http://www.w3.org/TR/CSS21/syndata.html#tokenization\n\t// http://www.w3.org/TR/css3-syntax/\n\t\n\t(function() {\n\t    function css_beautify(source_text, options) {\n\t        options = options || {};\n\t        source_text = source_text || '';\n\t        // HACK: newline parsing inconsistent. This brute force normalizes the input.\n\t        source_text = source_text.replace(/\\r\\n|[\\r\\u2028\\u2029]/g, '\\n');\n\t\n\t        var indentSize = options.indent_size || 4;\n\t        var indentCharacter = options.indent_char || ' ';\n\t        var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;\n\t        var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n\t        var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;\n\t        var spaceAroundSelectorSeparator = (options.space_around_selector_separator === undefined) ? false : options.space_around_selector_separator;\n\t        var eol = options.eol ? options.eol : '\\n';\n\t\n\t        // compatibility\n\t        if (typeof indentSize === \"string\") {\n\t            indentSize = parseInt(indentSize, 10);\n\t        }\n\t\n\t        if (options.indent_with_tabs) {\n\t            indentCharacter = '\\t';\n\t            indentSize = 1;\n\t        }\n\t\n\t        eol = eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\t\n\t\n\t        // tokenizer\n\t        var whiteRe = /^\\s+$/;\n\t\n\t        var pos = -1,\n\t            ch;\n\t        var parenLevel = 0;\n\t\n\t        function next() {\n\t            ch = source_text.charAt(++pos);\n\t            return ch || '';\n\t        }\n\t\n\t        function peek(skipWhitespace) {\n\t            var result = '';\n\t            var prev_pos = pos;\n\t            if (skipWhitespace) {\n\t                eatWhitespace();\n\t            }\n\t            result = source_text.charAt(pos + 1) || '';\n\t            pos = prev_pos - 1;\n\t            next();\n\t            return result;\n\t        }\n\t\n\t        function eatString(endChars) {\n\t            var start = pos;\n\t            while (next()) {\n\t                if (ch === \"\\\\\") {\n\t                    next();\n\t                } else if (endChars.indexOf(ch) !== -1) {\n\t                    break;\n\t                } else if (ch === \"\\n\") {\n\t                    break;\n\t                }\n\t            }\n\t            return source_text.substring(start, pos + 1);\n\t        }\n\t\n\t        function peekString(endChar) {\n\t            var prev_pos = pos;\n\t            var str = eatString(endChar);\n\t            pos = prev_pos - 1;\n\t            next();\n\t            return str;\n\t        }\n\t\n\t        function eatWhitespace() {\n\t            var result = '';\n\t            while (whiteRe.test(peek())) {\n\t                next();\n\t                result += ch;\n\t            }\n\t            return result;\n\t        }\n\t\n\t        function skipWhitespace() {\n\t            var result = '';\n\t            if (ch && whiteRe.test(ch)) {\n\t                result = ch;\n\t            }\n\t            while (whiteRe.test(next())) {\n\t                result += ch;\n\t            }\n\t            return result;\n\t        }\n\t\n\t        function eatComment(singleLine) {\n\t            var start = pos;\n\t            singleLine = peek() === \"/\";\n\t            next();\n\t            while (next()) {\n\t                if (!singleLine && ch === \"*\" && peek() === \"/\") {\n\t                    next();\n\t                    break;\n\t                } else if (singleLine && ch === \"\\n\") {\n\t                    return source_text.substring(start, pos);\n\t                }\n\t            }\n\t\n\t            return source_text.substring(start, pos) + ch;\n\t        }\n\t\n\t\n\t        function lookBack(str) {\n\t            return source_text.substring(pos - str.length, pos).toLowerCase() ===\n\t                str;\n\t        }\n\t\n\t        // Nested pseudo-class if we are insideRule\n\t        // and the next special character found opens\n\t        // a new block\n\t        function foundNestedPseudoClass() {\n\t            var openParen = 0;\n\t            for (var i = pos + 1; i < source_text.length; i++) {\n\t                var ch = source_text.charAt(i);\n\t                if (ch === \"{\") {\n\t                    return true;\n\t                } else if (ch === '(') {\n\t                    // pseudoclasses can contain ()\n\t                    openParen += 1;\n\t                } else if (ch === ')') {\n\t                    if (openParen === 0) {\n\t                        return false;\n\t                    }\n\t                    openParen -= 1;\n\t                } else if (ch === \";\" || ch === \"}\") {\n\t                    return false;\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t\n\t        // printer\n\t        var basebaseIndentString = source_text.match(/^[\\t ]*/)[0];\n\t        var singleIndent = new Array(indentSize + 1).join(indentCharacter);\n\t        var indentLevel = 0;\n\t        var nestedLevel = 0;\n\t\n\t        function indent() {\n\t            indentLevel++;\n\t            basebaseIndentString += singleIndent;\n\t        }\n\t\n\t        function outdent() {\n\t            indentLevel--;\n\t            basebaseIndentString = basebaseIndentString.slice(0, -indentSize);\n\t        }\n\t\n\t        var print = {};\n\t        print[\"{\"] = function(ch) {\n\t            print.singleSpace();\n\t            output.push(ch);\n\t            print.newLine();\n\t        };\n\t        print[\"}\"] = function(ch) {\n\t            print.newLine();\n\t            output.push(ch);\n\t            print.newLine();\n\t        };\n\t\n\t        print._lastCharWhitespace = function() {\n\t            return whiteRe.test(output[output.length - 1]);\n\t        };\n\t\n\t        print.newLine = function(keepWhitespace) {\n\t            if (output.length) {\n\t                if (!keepWhitespace && output[output.length - 1] !== '\\n') {\n\t                    print.trim();\n\t                }\n\t\n\t                output.push('\\n');\n\t\n\t                if (basebaseIndentString) {\n\t                    output.push(basebaseIndentString);\n\t                }\n\t            }\n\t        };\n\t        print.singleSpace = function() {\n\t            if (output.length && !print._lastCharWhitespace()) {\n\t                output.push(' ');\n\t            }\n\t        };\n\t\n\t        print.preserveSingleSpace = function() {\n\t            if (isAfterSpace) {\n\t                print.singleSpace();\n\t            }\n\t        };\n\t\n\t        print.trim = function() {\n\t            while (print._lastCharWhitespace()) {\n\t                output.pop();\n\t            }\n\t        };\n\t\n\t\n\t        var output = [];\n\t        /*_____________________--------------------_____________________*/\n\t\n\t        var insideRule = false;\n\t        var insidePropertyValue = false;\n\t        var enteringConditionalGroup = false;\n\t        var top_ch = '';\n\t        var last_top_ch = '';\n\t\n\t        while (true) {\n\t            var whitespace = skipWhitespace();\n\t            var isAfterSpace = whitespace !== '';\n\t            var isAfterNewline = whitespace.indexOf('\\n') !== -1;\n\t            last_top_ch = top_ch;\n\t            top_ch = ch;\n\t\n\t            if (!ch) {\n\t                break;\n\t            } else if (ch === '/' && peek() === '*') { /* css comment */\n\t                var header = indentLevel === 0;\n\t\n\t                if (isAfterNewline || header) {\n\t                    print.newLine();\n\t                }\n\t\n\t                output.push(eatComment());\n\t                print.newLine();\n\t                if (header) {\n\t                    print.newLine(true);\n\t                }\n\t            } else if (ch === '/' && peek() === '/') { // single line comment\n\t                if (!isAfterNewline && last_top_ch !== '{') {\n\t                    print.trim();\n\t                }\n\t                print.singleSpace();\n\t                output.push(eatComment());\n\t                print.newLine();\n\t            } else if (ch === '@') {\n\t                print.preserveSingleSpace();\n\t\n\t                // deal with less propery mixins @{...}\n\t                if (peek() === '{') {\n\t                    output.push(eatString('}'));\n\t                } else {\n\t                    output.push(ch);\n\t\n\t                    // strip trailing space, if present, for hash property checks\n\t                    var variableOrRule = peekString(\": ,;{}()[]/='\\\"\");\n\t\n\t                    if (variableOrRule.match(/[ :]$/)) {\n\t                        // we have a variable or pseudo-class, add it and insert one space before continuing\n\t                        next();\n\t                        variableOrRule = eatString(\": \").replace(/\\s$/, '');\n\t                        output.push(variableOrRule);\n\t                        print.singleSpace();\n\t                    }\n\t\n\t                    variableOrRule = variableOrRule.replace(/\\s$/, '');\n\t\n\t                    // might be a nesting at-rule\n\t                    if (variableOrRule in css_beautify.NESTED_AT_RULE) {\n\t                        nestedLevel += 1;\n\t                        if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {\n\t                            enteringConditionalGroup = true;\n\t                        }\n\t                    }\n\t                }\n\t            } else if (ch === '#' && peek() === '{') {\n\t                print.preserveSingleSpace();\n\t                output.push(eatString('}'));\n\t            } else if (ch === '{') {\n\t                if (peek(true) === '}') {\n\t                    eatWhitespace();\n\t                    next();\n\t                    print.singleSpace();\n\t                    output.push(\"{}\");\n\t                    print.newLine();\n\t                    if (newline_between_rules && indentLevel === 0) {\n\t                        print.newLine(true);\n\t                    }\n\t                } else {\n\t                    indent();\n\t                    print[\"{\"](ch);\n\t                    // when entering conditional groups, only rulesets are allowed\n\t                    if (enteringConditionalGroup) {\n\t                        enteringConditionalGroup = false;\n\t                        insideRule = (indentLevel > nestedLevel);\n\t                    } else {\n\t                        // otherwise, declarations are also allowed\n\t                        insideRule = (indentLevel >= nestedLevel);\n\t                    }\n\t                }\n\t            } else if (ch === '}') {\n\t                outdent();\n\t                print[\"}\"](ch);\n\t                insideRule = false;\n\t                insidePropertyValue = false;\n\t                if (nestedLevel) {\n\t                    nestedLevel--;\n\t                }\n\t                if (newline_between_rules && indentLevel === 0) {\n\t                    print.newLine(true);\n\t                }\n\t            } else if (ch === \":\") {\n\t                eatWhitespace();\n\t                if ((insideRule || enteringConditionalGroup) &&\n\t                    !(lookBack(\"&\") || foundNestedPseudoClass())) {\n\t                    // 'property: value' delimiter\n\t                    // which could be in a conditional group query\n\t                    insidePropertyValue = true;\n\t                    output.push(':');\n\t                    print.singleSpace();\n\t                } else {\n\t                    // sass/less parent reference don't use a space\n\t                    // sass nested pseudo-class don't use a space\n\t                    if (peek() === \":\") {\n\t                        // pseudo-element\n\t                        next();\n\t                        output.push(\"::\");\n\t                    } else {\n\t                        // pseudo-class\n\t                        output.push(':');\n\t                    }\n\t                }\n\t            } else if (ch === '\"' || ch === '\\'') {\n\t                print.preserveSingleSpace();\n\t                output.push(eatString(ch));\n\t            } else if (ch === ';') {\n\t                insidePropertyValue = false;\n\t                output.push(ch);\n\t                print.newLine();\n\t            } else if (ch === '(') { // may be a url\n\t                if (lookBack(\"url\")) {\n\t                    output.push(ch);\n\t                    eatWhitespace();\n\t                    if (next()) {\n\t                        if (ch !== ')' && ch !== '\"' && ch !== '\\'') {\n\t                            output.push(eatString(')'));\n\t                        } else {\n\t                            pos--;\n\t                        }\n\t                    }\n\t                } else {\n\t                    parenLevel++;\n\t                    print.preserveSingleSpace();\n\t                    output.push(ch);\n\t                    eatWhitespace();\n\t                }\n\t            } else if (ch === ')') {\n\t                output.push(ch);\n\t                parenLevel--;\n\t            } else if (ch === ',') {\n\t                output.push(ch);\n\t                eatWhitespace();\n\t                if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {\n\t                    print.newLine();\n\t                } else {\n\t                    print.singleSpace();\n\t                }\n\t            } else if (ch === '>' || ch === '+' || ch === '~') {\n\t                //handl selector separator spacing\n\t                if (spaceAroundSelectorSeparator && !insidePropertyValue && parenLevel < 1) {\n\t                    print.singleSpace();\n\t                    output.push(ch);\n\t                    print.singleSpace();\n\t                } else {\n\t                    output.push(ch);\n\t                }\n\t            } else if (ch === ']') {\n\t                output.push(ch);\n\t            } else if (ch === '[') {\n\t                print.preserveSingleSpace();\n\t                output.push(ch);\n\t            } else if (ch === '=') { // no whitespace before or after\n\t                eatWhitespace();\n\t                ch = '=';\n\t                output.push(ch);\n\t            } else {\n\t                print.preserveSingleSpace();\n\t                output.push(ch);\n\t            }\n\t        }\n\t\n\t\n\t        var sweetCode = '';\n\t        if (basebaseIndentString) {\n\t            sweetCode += basebaseIndentString;\n\t        }\n\t\n\t        sweetCode += output.join('').replace(/[\\r\\n\\t ]+$/, '');\n\t\n\t        // establish end_with_newline\n\t        if (end_with_newline) {\n\t            sweetCode += '\\n';\n\t        }\n\t\n\t        if (eol !== '\\n') {\n\t            sweetCode = sweetCode.replace(/[\\n]/g, eol);\n\t        }\n\t\n\t        return sweetCode;\n\t    }\n\t\n\t    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n\t    css_beautify.NESTED_AT_RULE = {\n\t        \"@page\": true,\n\t        \"@font-face\": true,\n\t        \"@keyframes\": true,\n\t        // also in CONDITIONAL_GROUP_RULE below\n\t        \"@media\": true,\n\t        \"@supports\": true,\n\t        \"@document\": true\n\t    };\n\t    css_beautify.CONDITIONAL_GROUP_RULE = {\n\t        \"@media\": true,\n\t        \"@supports\": true,\n\t        \"@document\": true\n\t    };\n\t\n\t    /*global define */\n\t    if (true) {\n\t        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t            return {\n\t                css_beautify: css_beautify\n\t            };\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports !== \"undefined\") {\n\t        // Add support for CommonJS. Just put this file somewhere on your require.paths\n\t        // and you will be able to `var html_beautify = require(\"beautify\").html_beautify`.\n\t        exports.css_beautify = css_beautify;\n\t    } else if (typeof window !== \"undefined\") {\n\t        // If we're running a web page and don't have either of the above, add our one global\n\t        window.css_beautify = css_beautify;\n\t    } else if (typeof global !== \"undefined\") {\n\t        // If we don't even have window, try global.\n\t        global.css_beautify = css_beautify;\n\t    }\n\t\n\t}());\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n\t/*\n\t\n\t  The MIT License (MIT)\n\t\n\t  Copyright (c) 2007-2013 Einar Lielmanis and contributors.\n\t\n\t  Permission is hereby granted, free of charge, to any person\n\t  obtaining a copy of this software and associated documentation files\n\t  (the \"Software\"), to deal in the Software without restriction,\n\t  including without limitation the rights to use, copy, modify, merge,\n\t  publish, distribute, sublicense, and/or sell copies of the Software,\n\t  and to permit persons to whom the Software is furnished to do so,\n\t  subject to the following conditions:\n\t\n\t  The above copyright notice and this permission notice shall be\n\t  included in all copies or substantial portions of the Software.\n\t\n\t  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\t  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\t  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\t  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\t  SOFTWARE.\n\t\n\t\n\t Style HTML\n\t---------------\n\t\n\t  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\t\n\t  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>\n\t    http://jsbeautifier.org/\n\t\n\t  Usage:\n\t    style_html(html_source);\n\t\n\t    style_html(html_source, options);\n\t\n\t  The options are:\n\t    indent_inner_html (default false)  — indent <head> and <body> sections,\n\t    indent_size (default 4)          — indentation size,\n\t    indent_char (default space)      — character to indent with,\n\t    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)\n\t    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\"\n\t            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n\t    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted\n\t    indent_scripts (default normal)  - \"keep\"|\"separate\"|\"normal\"\n\t    preserve_newlines (default true) - whether existing line breaks before elements should be preserved\n\t                                        Only works before elements, not inside tags or for text.\n\t    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk\n\t    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}\n\t    end_with_newline (false)          - end with a newline\n\t    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.\n\t\n\t    e.g.\n\t\n\t    style_html(html_source, {\n\t      'indent_inner_html': false,\n\t      'indent_size': 2,\n\t      'indent_char': ' ',\n\t      'wrap_line_length': 78,\n\t      'brace_style': 'expand',\n\t      'preserve_newlines': true,\n\t      'max_preserve_newlines': 5,\n\t      'indent_handlebars': false,\n\t      'extra_liners': ['/html']\n\t    });\n\t*/\n\t\n\t(function() {\n\t\n\t    // function trim(s) {\n\t    //     return s.replace(/^\\s+|\\s+$/g, '');\n\t    // }\n\t\n\t    function ltrim(s) {\n\t        return s.replace(/^\\s+/g, '');\n\t    }\n\t\n\t    function rtrim(s) {\n\t        return s.replace(/\\s+$/g, '');\n\t    }\n\t\n\t    function style_html(html_source, options, js_beautify, css_beautify) {\n\t        //Wrapper function to invoke all the necessary constructors and deal with the output.\n\t\n\t        var multi_parser,\n\t            indent_inner_html,\n\t            indent_size,\n\t            indent_character,\n\t            wrap_line_length,\n\t            brace_style,\n\t            unformatted,\n\t            preserve_newlines,\n\t            max_preserve_newlines,\n\t            indent_handlebars,\n\t            wrap_attributes,\n\t            wrap_attributes_indent_size,\n\t            end_with_newline,\n\t            extra_liners,\n\t            eol;\n\t\n\t        options = options || {};\n\t\n\t        // backwards compatibility to 1.3.4\n\t        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&\n\t            (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {\n\t            options.wrap_line_length = options.max_char;\n\t        }\n\t\n\t        indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;\n\t        indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);\n\t        indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;\n\t        brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;\n\t        wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);\n\t        unformatted = options.unformatted || [\n\t            // https://www.w3.org/TR/html5/dom.html#phrasing-content\n\t            'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',\n\t            'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',\n\t            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',\n\t            'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',\n\t            'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',\n\t            'video', 'wbr', 'text',\n\t            // prexisting - not sure of full effect of removing, leaving in\n\t            'acronym', 'address', 'big', 'dt', 'ins', 'small', 'strike', 'tt',\n\t            'pre',\n\t            'h1', 'h2', 'h3', 'h4', 'h5', 'h6'\n\t        ];\n\t        preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n\t        max_preserve_newlines = preserve_newlines ?\n\t            (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10)) :\n\t            0;\n\t        indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;\n\t        wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;\n\t        wrap_attributes_indent_size = (isNaN(parseInt(options.wrap_attributes_indent_size, 10))) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);\n\t        end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n\t        extra_liners = (typeof options.extra_liners === 'object') && options.extra_liners ?\n\t            options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?\n\t            options.extra_liners.split(',') : 'head,body,/html'.split(',');\n\t        eol = options.eol ? options.eol : '\\n';\n\t\n\t        if (options.indent_with_tabs) {\n\t            indent_character = '\\t';\n\t            indent_size = 1;\n\t        }\n\t\n\t        eol = eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\t\n\t        function Parser() {\n\t\n\t            this.pos = 0; //Parser position\n\t            this.token = '';\n\t            this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT\n\t            this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values\n\t                parent: 'parent1',\n\t                parentcount: 1,\n\t                parent1: ''\n\t            };\n\t            this.tag_type = '';\n\t            this.token_text = this.last_token = this.last_text = this.token_type = '';\n\t            this.newlines = 0;\n\t            this.indent_content = indent_inner_html;\n\t\n\t            this.Utils = { //Uilities made available to the various functions\n\t                whitespace: \"\\n\\r\\t \".split(''),\n\t\n\t                single_token: [\n\t                    // HTLM void elements - aka self-closing tags - aka singletons\n\t                    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n\t                    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n\t                    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',\n\t                    // NOTE: Optional tags - are not understood.\n\t                    // https://www.w3.org/TR/html5/syntax.html#optional-tags\n\t                    // The rules for optional tags are too complex for a simple list\n\t                    // Also, the content of these tags should still be indented in many cases.\n\t                    // 'li' is a good exmple.\n\t\n\t                    // Doctype and xml elements\n\t                    '!doctype', '?xml',\n\t                    // ?php tag\n\t                    '?php',\n\t                    // other tags that were in this list, keeping just in case\n\t                    'basefont', 'isindex'\n\t                ],\n\t                extra_liners: extra_liners, //for tags that need a line of whitespace before them\n\t                in_array: function(what, arr) {\n\t                    for (var i = 0; i < arr.length; i++) {\n\t                        if (what === arr[i]) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                    return false;\n\t                }\n\t            };\n\t\n\t            // Return true if the given text is composed entirely of whitespace.\n\t            this.is_whitespace = function(text) {\n\t                for (var n = 0; n < text.length; n++) {\n\t                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {\n\t                        return false;\n\t                    }\n\t                }\n\t                return true;\n\t            };\n\t\n\t            this.traverse_whitespace = function() {\n\t                var input_char = '';\n\t\n\t                input_char = this.input.charAt(this.pos);\n\t                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n\t                    this.newlines = 0;\n\t                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n\t                        if (preserve_newlines && input_char === '\\n' && this.newlines <= max_preserve_newlines) {\n\t                            this.newlines += 1;\n\t                        }\n\t\n\t                        this.pos++;\n\t                        input_char = this.input.charAt(this.pos);\n\t                    }\n\t                    return true;\n\t                }\n\t                return false;\n\t            };\n\t\n\t            // Append a space to the given content (string array) or, if we are\n\t            // at the wrap_line_length, append a newline/indentation.\n\t            // return true if a newline was added, false if a space was added\n\t            this.space_or_wrap = function(content) {\n\t                if (this.line_char_count >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached\n\t                    this.print_newline(false, content);\n\t                    this.print_indentation(content);\n\t                    return true;\n\t                } else {\n\t                    this.line_char_count++;\n\t                    content.push(' ');\n\t                    return false;\n\t                }\n\t            };\n\t\n\t            this.get_content = function() { //function to capture regular content between tags\n\t                var input_char = '',\n\t                    content = [];\n\t\n\t                while (this.input.charAt(this.pos) !== '<') {\n\t                    if (this.pos >= this.input.length) {\n\t                        return content.length ? content.join('') : ['', 'TK_EOF'];\n\t                    }\n\t\n\t                    if (this.traverse_whitespace()) {\n\t                        this.space_or_wrap(content);\n\t                        continue;\n\t                    }\n\t\n\t                    if (indent_handlebars) {\n\t                        // Handlebars parsing is complicated.\n\t                        // {{#foo}} and {{/foo}} are formatted tags.\n\t                        // {{something}} should get treated as content, except:\n\t                        // {{else}} specifically behaves like {{#if}} and {{/if}}\n\t                        var peek3 = this.input.substr(this.pos, 3);\n\t                        if (peek3 === '{{#' || peek3 === '{{/') {\n\t                            // These are tags and not content.\n\t                            break;\n\t                        } else if (peek3 === '{{!') {\n\t                            return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];\n\t                        } else if (this.input.substr(this.pos, 2) === '{{') {\n\t                            if (this.get_tag(true) === '{{else}}') {\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                    input_char = this.input.charAt(this.pos);\n\t                    this.pos++;\n\t                    this.line_char_count++;\n\t                    content.push(input_char); //letter at-a-time (or string) inserted to an array\n\t                }\n\t                return content.length ? content.join('') : '';\n\t            };\n\t\n\t            this.get_contents_to = function(name) { //get the full content of a script or style to pass to js_beautify\n\t                if (this.pos === this.input.length) {\n\t                    return ['', 'TK_EOF'];\n\t                }\n\t                var content = '';\n\t                var reg_match = new RegExp('</' + name + '\\\\s*>', 'igm');\n\t                reg_match.lastIndex = this.pos;\n\t                var reg_array = reg_match.exec(this.input);\n\t                var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script\n\t                if (this.pos < end_script) { //get everything in between the script tags\n\t                    content = this.input.substring(this.pos, end_script);\n\t                    this.pos = end_script;\n\t                }\n\t                return content;\n\t            };\n\t\n\t            this.record_tag = function(tag) { //function to record a tag and its parent in this.tags Object\n\t                if (this.tags[tag + 'count']) { //check for the existence of this tag type\n\t                    this.tags[tag + 'count']++;\n\t                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n\t                } else { //otherwise initialize this tag type\n\t                    this.tags[tag + 'count'] = 1;\n\t                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n\t                }\n\t                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)\n\t                this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')\n\t            };\n\t\n\t            this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer\n\t                if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it\n\t                    var temp_parent = this.tags.parent; //check to see if it's a closable tag.\n\t                    while (temp_parent) { //till we reach '' (the initial value);\n\t                        if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it\n\t                            break;\n\t                        }\n\t                        temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree\n\t                    }\n\t                    if (temp_parent) { //if we caught something\n\t                        this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly\n\t                        this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent\n\t                    }\n\t                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...\n\t                    delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself\n\t                    if (this.tags[tag + 'count'] === 1) {\n\t                        delete this.tags[tag + 'count'];\n\t                    } else {\n\t                        this.tags[tag + 'count']--;\n\t                    }\n\t                }\n\t            };\n\t\n\t            this.indent_to_tag = function(tag) {\n\t                // Match the indentation level to the last use of this tag, but don't remove it.\n\t                if (!this.tags[tag + 'count']) {\n\t                    return;\n\t                }\n\t                var temp_parent = this.tags.parent;\n\t                while (temp_parent) {\n\t                    if (tag + this.tags[tag + 'count'] === temp_parent) {\n\t                        break;\n\t                    }\n\t                    temp_parent = this.tags[temp_parent + 'parent'];\n\t                }\n\t                if (temp_parent) {\n\t                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];\n\t                }\n\t            };\n\t\n\t            this.get_tag = function(peek) { //function to get a full tag and parse its type\n\t                var input_char = '',\n\t                    content = [],\n\t                    comment = '',\n\t                    space = false,\n\t                    first_attr = true,\n\t                    tag_start, tag_end,\n\t                    tag_start_char,\n\t                    orig_pos = this.pos,\n\t                    orig_line_char_count = this.line_char_count;\n\t\n\t                peek = peek !== undefined ? peek : false;\n\t\n\t                do {\n\t                    if (this.pos >= this.input.length) {\n\t                        if (peek) {\n\t                            this.pos = orig_pos;\n\t                            this.line_char_count = orig_line_char_count;\n\t                        }\n\t                        return content.length ? content.join('') : ['', 'TK_EOF'];\n\t                    }\n\t\n\t                    input_char = this.input.charAt(this.pos);\n\t                    this.pos++;\n\t\n\t                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space\n\t                        space = true;\n\t                        continue;\n\t                    }\n\t\n\t                    if (input_char === \"'\" || input_char === '\"') {\n\t                        input_char += this.get_unformatted(input_char);\n\t                        space = true;\n\t\n\t                    }\n\t\n\t                    if (input_char === '=') { //no space before =\n\t                        space = false;\n\t                    }\n\t\n\t                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {\n\t                        //no space after = or before >\n\t                        var wrapped = this.space_or_wrap(content);\n\t                        var indentAttrs = wrapped && input_char !== '/' && wrap_attributes !== 'force';\n\t                        space = false;\n\t                        if (!first_attr && wrap_attributes === 'force' && input_char !== '/') {\n\t                            this.print_newline(false, content);\n\t                            this.print_indentation(content);\n\t                            indentAttrs = true;\n\t                        }\n\t                        if (indentAttrs) {\n\t                            //indent attributes an auto or forced line-wrap\n\t                            for (var count = 0; count < wrap_attributes_indent_size; count++) {\n\t                                content.push(indent_character);\n\t                            }\n\t                        }\n\t                        for (var i = 0; i < content.length; i++) {\n\t                            if (content[i] === ' ') {\n\t                                first_attr = false;\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                    if (indent_handlebars && tag_start_char === '<') {\n\t                        // When inside an angle-bracket tag, put spaces around\n\t                        // handlebars not inside of strings.\n\t                        if ((input_char + this.input.charAt(this.pos)) === '{{') {\n\t                            input_char += this.get_unformatted('}}');\n\t                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {\n\t                                input_char = ' ' + input_char;\n\t                            }\n\t                            space = true;\n\t                        }\n\t                    }\n\t\n\t                    if (input_char === '<' && !tag_start_char) {\n\t                        tag_start = this.pos - 1;\n\t                        tag_start_char = '<';\n\t                    }\n\t\n\t                    if (indent_handlebars && !tag_start_char) {\n\t                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {\n\t                            if (input_char === '#' || input_char === '/' || input_char === '!') {\n\t                                tag_start = this.pos - 3;\n\t                            } else {\n\t                                tag_start = this.pos - 2;\n\t                            }\n\t                            tag_start_char = '{';\n\t                        }\n\t                    }\n\t\n\t                    this.line_char_count++;\n\t                    content.push(input_char); //inserts character at-a-time (or string)\n\t\n\t                    if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) { //if we're in a comment, do something special\n\t                        // We treat all comments as literals, even more than preformatted tags\n\t                        // we just look for the appropriate close tag\n\t                        content = [this.get_comment(tag_start)];\n\t                        break;\n\t                    }\n\t\n\t                    if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') { //if we're in a comment, do something special\n\t                        // We treat all comments as literals, even more than preformatted tags\n\t                        // we just look for the appropriate close tag\n\t                        content = [this.get_comment(tag_start)];\n\t                        break;\n\t                    }\n\t\n\t                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {\n\t                        break;\n\t                    }\n\t                } while (input_char !== '>');\n\t\n\t                var tag_complete = content.join('');\n\t                var tag_index;\n\t                var tag_offset;\n\t\n\t                if (tag_complete.indexOf(' ') !== -1) { //if there's whitespace, thats where the tag name ends\n\t                    tag_index = tag_complete.indexOf(' ');\n\t                } else if (tag_complete.charAt(0) === '{') {\n\t                    tag_index = tag_complete.indexOf('}');\n\t                } else { //otherwise go with the tag ending\n\t                    tag_index = tag_complete.indexOf('>');\n\t                }\n\t                if (tag_complete.charAt(0) === '<' || !indent_handlebars) {\n\t                    tag_offset = 1;\n\t                } else {\n\t                    tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;\n\t                }\n\t                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();\n\t                if (tag_complete.charAt(tag_complete.length - 2) === '/' ||\n\t                    this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)\n\t                    if (!peek) {\n\t                        this.tag_type = 'SINGLE';\n\t                    }\n\t                } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {\n\t                    if (!peek) {\n\t                        this.indent_to_tag('if');\n\t                        this.tag_type = 'HANDLEBARS_ELSE';\n\t                        this.indent_content = true;\n\t                        this.traverse_whitespace();\n\t                    }\n\t                } else if (this.is_unformatted(tag_check, unformatted)) { // do not reformat the \"unformatted\" tags\n\t                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function\n\t                    content.push(comment);\n\t                    tag_end = this.pos - 1;\n\t                    this.tag_type = 'SINGLE';\n\t                } else if (tag_check === 'script' &&\n\t                    (tag_complete.search('type') === -1 ||\n\t                        (tag_complete.search('type') > -1 &&\n\t                            tag_complete.search(/\\b(text|application)\\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\\+)?json)/) > -1))) {\n\t                    if (!peek) {\n\t                        this.record_tag(tag_check);\n\t                        this.tag_type = 'SCRIPT';\n\t                    }\n\t                } else if (tag_check === 'style' &&\n\t                    (tag_complete.search('type') === -1 ||\n\t                        (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {\n\t                    if (!peek) {\n\t                        this.record_tag(tag_check);\n\t                        this.tag_type = 'STYLE';\n\t                    }\n\t                } else if (tag_check.charAt(0) === '!') { //peek for <! comment\n\t                    // for comments content is already correct.\n\t                    if (!peek) {\n\t                        this.tag_type = 'SINGLE';\n\t                        this.traverse_whitespace();\n\t                    }\n\t                } else if (!peek) {\n\t                    if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending\n\t                        this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors\n\t                        this.tag_type = 'END';\n\t                    } else { //otherwise it's a start-tag\n\t                        this.record_tag(tag_check); //push it on the tag stack\n\t                        if (tag_check.toLowerCase() !== 'html') {\n\t                            this.indent_content = true;\n\t                        }\n\t                        this.tag_type = 'START';\n\t                    }\n\t\n\t                    // Allow preserving of newlines after a start or end tag\n\t                    if (this.traverse_whitespace()) {\n\t                        this.space_or_wrap(content);\n\t                    }\n\t\n\t                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line\n\t                        this.print_newline(false, this.output);\n\t                        if (this.output.length && this.output[this.output.length - 2] !== '\\n') {\n\t                            this.print_newline(true, this.output);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (peek) {\n\t                    this.pos = orig_pos;\n\t                    this.line_char_count = orig_line_char_count;\n\t                }\n\t\n\t                return content.join(''); //returns fully formatted tag\n\t            };\n\t\n\t            this.get_comment = function(start_pos) { //function to return comment content in its entirety\n\t                // this is will have very poor perf, but will work for now.\n\t                var comment = '',\n\t                    delimiter = '>',\n\t                    matched = false;\n\t\n\t                this.pos = start_pos;\n\t                var input_char = this.input.charAt(this.pos);\n\t                this.pos++;\n\t\n\t                while (this.pos <= this.input.length) {\n\t                    comment += input_char;\n\t\n\t                    // only need to check for the delimiter if the last chars match\n\t                    if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&\n\t                        comment.indexOf(delimiter) !== -1) {\n\t                        break;\n\t                    }\n\t\n\t                    // only need to search for custom delimiter for the first few characters\n\t                    if (!matched && comment.length < 10) {\n\t                        if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment\n\t                            delimiter = '<![endif]>';\n\t                            matched = true;\n\t                        } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...\n\t                            delimiter = ']]>';\n\t                            matched = true;\n\t                        } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...\n\t                            delimiter = ']>';\n\t                            matched = true;\n\t                        } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...\n\t                            delimiter = '-->';\n\t                            matched = true;\n\t                        } else if (comment.indexOf('{{!') === 0) { // {{! handlebars comment\n\t                            delimiter = '}}';\n\t                            matched = true;\n\t                        } else if (comment.indexOf('<?') === 0) { // {{! handlebars comment\n\t                            delimiter = '?>';\n\t                            matched = true;\n\t                        } else if (comment.indexOf('<%') === 0) { // {{! handlebars comment\n\t                            delimiter = '%>';\n\t                            matched = true;\n\t                        }\n\t                    }\n\t\n\t                    input_char = this.input.charAt(this.pos);\n\t                    this.pos++;\n\t                }\n\t\n\t                return comment;\n\t            };\n\t\n\t            function tokenMatcher(delimiter) {\n\t                var token = '';\n\t\n\t                var add = function(str) {\n\t                    var newToken = token + str.toLowerCase();\n\t                    token = newToken.length <= delimiter.length ? newToken : newToken.substr(newToken.length - delimiter.length, delimiter.length);\n\t                };\n\t\n\t                var doesNotMatch = function() {\n\t                    return token.indexOf(delimiter) === -1;\n\t                };\n\t\n\t                return {\n\t                    add: add,\n\t                    doesNotMatch: doesNotMatch\n\t                };\n\t            }\n\t\n\t            this.get_unformatted = function(delimiter, orig_tag) { //function to return unformatted content in its entirety\n\t                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {\n\t                    return '';\n\t                }\n\t                var input_char = '';\n\t                var content = '';\n\t                var space = true;\n\t\n\t                var delimiterMatcher = tokenMatcher(delimiter);\n\t\n\t                do {\n\t\n\t                    if (this.pos >= this.input.length) {\n\t                        return content;\n\t                    }\n\t\n\t                    input_char = this.input.charAt(this.pos);\n\t                    this.pos++;\n\t\n\t                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n\t                        if (!space) {\n\t                            this.line_char_count--;\n\t                            continue;\n\t                        }\n\t                        if (input_char === '\\n' || input_char === '\\r') {\n\t                            content += '\\n';\n\t                            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'\n\t                for (var i=0; i<this.indent_level; i++) {\n\t                  content += this.indent_string;\n\t                }\n\t                space = false; //...and make sure other indentation is erased\n\t                */\n\t                            this.line_char_count = 0;\n\t                            continue;\n\t                        }\n\t                    }\n\t                    content += input_char;\n\t                    delimiterMatcher.add(input_char);\n\t                    this.line_char_count++;\n\t                    space = true;\n\t\n\t                    if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {\n\t                        // Handlebars expressions in strings should also be unformatted.\n\t                        content += this.get_unformatted('}}');\n\t                        // Don't consider when stopping for delimiters.\n\t                    }\n\t                } while (delimiterMatcher.doesNotMatch());\n\t\n\t                return content;\n\t            };\n\t\n\t            this.get_token = function() { //initial handler for token-retrieval\n\t                var token;\n\t\n\t                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript\n\t                    var type = this.last_token.substr(7);\n\t                    token = this.get_contents_to(type);\n\t                    if (typeof token !== 'string') {\n\t                        return token;\n\t                    }\n\t                    return [token, 'TK_' + type];\n\t                }\n\t                if (this.current_mode === 'CONTENT') {\n\t                    token = this.get_content();\n\t                    if (typeof token !== 'string') {\n\t                        return token;\n\t                    } else {\n\t                        return [token, 'TK_CONTENT'];\n\t                    }\n\t                }\n\t\n\t                if (this.current_mode === 'TAG') {\n\t                    token = this.get_tag();\n\t                    if (typeof token !== 'string') {\n\t                        return token;\n\t                    } else {\n\t                        var tag_name_type = 'TK_TAG_' + this.tag_type;\n\t                        return [token, tag_name_type];\n\t                    }\n\t                }\n\t            };\n\t\n\t            this.get_full_indent = function(level) {\n\t                level = this.indent_level + level || 0;\n\t                if (level < 1) {\n\t                    return '';\n\t                }\n\t\n\t                return Array(level + 1).join(this.indent_string);\n\t            };\n\t\n\t            this.is_unformatted = function(tag_check, unformatted) {\n\t                //is this an HTML5 block-level link?\n\t                if (!this.Utils.in_array(tag_check, unformatted)) {\n\t                    return false;\n\t                }\n\t\n\t                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {\n\t                    return true;\n\t                }\n\t\n\t                //at this point we have an  tag; is its first child something we want to remain\n\t                //unformatted?\n\t                var next_tag = this.get_tag(true /* peek. */ );\n\t\n\t                // test next_tag to see if it is just html tag (no external content)\n\t                var tag = (next_tag || \"\").match(/^\\s*<\\s*\\/?([a-z]*)\\s*[^>]*>\\s*$/);\n\t\n\t                // if next_tag comes back but is not an isolated tag, then\n\t                // let's treat the 'a' tag as having content\n\t                // and respect the unformatted option\n\t                if (!tag || this.Utils.in_array(tag, unformatted)) {\n\t                    return true;\n\t                } else {\n\t                    return false;\n\t                }\n\t            };\n\t\n\t            this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions\n\t\n\t                this.input = js_source || ''; //gets the input for the Parser\n\t\n\t                // HACK: newline parsing inconsistent. This brute force normalizes the input.\n\t                this.input = this.input.replace(/\\r\\n|[\\r\\u2028\\u2029]/g, '\\n');\n\t\n\t                this.output = [];\n\t                this.indent_character = indent_character;\n\t                this.indent_string = '';\n\t                this.indent_size = indent_size;\n\t                this.brace_style = brace_style;\n\t                this.indent_level = 0;\n\t                this.wrap_line_length = wrap_line_length;\n\t                this.line_char_count = 0; //count to see if wrap_line_length was exceeded\n\t\n\t                for (var i = 0; i < this.indent_size; i++) {\n\t                    this.indent_string += this.indent_character;\n\t                }\n\t\n\t                this.print_newline = function(force, arr) {\n\t                    this.line_char_count = 0;\n\t                    if (!arr || !arr.length) {\n\t                        return;\n\t                    }\n\t                    if (force || (arr[arr.length - 1] !== '\\n')) { //we might want the extra line\n\t                        if ((arr[arr.length - 1] !== '\\n')) {\n\t                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);\n\t                        }\n\t                        arr.push('\\n');\n\t                    }\n\t                };\n\t\n\t                this.print_indentation = function(arr) {\n\t                    for (var i = 0; i < this.indent_level; i++) {\n\t                        arr.push(this.indent_string);\n\t                        this.line_char_count += this.indent_string.length;\n\t                    }\n\t                };\n\t\n\t                this.print_token = function(text) {\n\t                    // Avoid printing initial whitespace.\n\t                    if (this.is_whitespace(text) && !this.output.length) {\n\t                        return;\n\t                    }\n\t                    if (text || text !== '') {\n\t                        if (this.output.length && this.output[this.output.length - 1] === '\\n') {\n\t                            this.print_indentation(this.output);\n\t                            text = ltrim(text);\n\t                        }\n\t                    }\n\t                    this.print_token_raw(text);\n\t                };\n\t\n\t                this.print_token_raw = function(text) {\n\t                    // If we are going to print newlines, truncate trailing\n\t                    // whitespace, as the newlines will represent the space.\n\t                    if (this.newlines > 0) {\n\t                        text = rtrim(text);\n\t                    }\n\t\n\t                    if (text && text !== '') {\n\t                        if (text.length > 1 && text.charAt(text.length - 1) === '\\n') {\n\t                            // unformatted tags can grab newlines as their last character\n\t                            this.output.push(text.slice(0, -1));\n\t                            this.print_newline(false, this.output);\n\t                        } else {\n\t                            this.output.push(text);\n\t                        }\n\t                    }\n\t\n\t                    for (var n = 0; n < this.newlines; n++) {\n\t                        this.print_newline(n > 0, this.output);\n\t                    }\n\t                    this.newlines = 0;\n\t                };\n\t\n\t                this.indent = function() {\n\t                    this.indent_level++;\n\t                };\n\t\n\t                this.unindent = function() {\n\t                    if (this.indent_level > 0) {\n\t                        this.indent_level--;\n\t                    }\n\t                };\n\t            };\n\t            return this;\n\t        }\n\t\n\t        /*_____________________--------------------_____________________*/\n\t\n\t        multi_parser = new Parser(); //wrapping functions Parser\n\t        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values\n\t\n\t        while (true) {\n\t            var t = multi_parser.get_token();\n\t            multi_parser.token_text = t[0];\n\t            multi_parser.token_type = t[1];\n\t\n\t            if (multi_parser.token_type === 'TK_EOF') {\n\t                break;\n\t            }\n\t\n\t            switch (multi_parser.token_type) {\n\t                case 'TK_TAG_START':\n\t                    multi_parser.print_newline(false, multi_parser.output);\n\t                    multi_parser.print_token(multi_parser.token_text);\n\t                    if (multi_parser.indent_content) {\n\t                        multi_parser.indent();\n\t                        multi_parser.indent_content = false;\n\t                    }\n\t                    multi_parser.current_mode = 'CONTENT';\n\t                    break;\n\t                case 'TK_TAG_STYLE':\n\t                case 'TK_TAG_SCRIPT':\n\t                    multi_parser.print_newline(false, multi_parser.output);\n\t                    multi_parser.print_token(multi_parser.token_text);\n\t                    multi_parser.current_mode = 'CONTENT';\n\t                    break;\n\t                case 'TK_TAG_END':\n\t                    //Print new line only if the tag has no content and has child\n\t                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {\n\t                        var tag_name = multi_parser.token_text.match(/\\w+/)[0];\n\t                        var tag_extracted_from_last_output = null;\n\t                        if (multi_parser.output.length) {\n\t                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\\s*(\\w+)/);\n\t                        }\n\t                        if (tag_extracted_from_last_output === null ||\n\t                            (tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted))) {\n\t                            multi_parser.print_newline(false, multi_parser.output);\n\t                        }\n\t                    }\n\t                    multi_parser.print_token(multi_parser.token_text);\n\t                    multi_parser.current_mode = 'CONTENT';\n\t                    break;\n\t                case 'TK_TAG_SINGLE':\n\t                    // Don't add a newline before elements that should remain unformatted.\n\t                    var tag_check = multi_parser.token_text.match(/^\\s*<([a-z-]+)/i);\n\t                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {\n\t                        multi_parser.print_newline(false, multi_parser.output);\n\t                    }\n\t                    multi_parser.print_token(multi_parser.token_text);\n\t                    multi_parser.current_mode = 'CONTENT';\n\t                    break;\n\t                case 'TK_TAG_HANDLEBARS_ELSE':\n\t                    // Don't add a newline if opening {{#if}} tag is on the current line\n\t                    var foundIfOnCurrentLine = false;\n\t                    for (var lastCheckedOutput = multi_parser.output.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n\t                        if (multi_parser.output[lastCheckedOutput] === '\\n') {\n\t                            break;\n\t                        } else {\n\t                            if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {\n\t                                foundIfOnCurrentLine = true;\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t                    if (!foundIfOnCurrentLine) {\n\t                        multi_parser.print_newline(false, multi_parser.output);\n\t                    }\n\t                    multi_parser.print_token(multi_parser.token_text);\n\t                    if (multi_parser.indent_content) {\n\t                        multi_parser.indent();\n\t                        multi_parser.indent_content = false;\n\t                    }\n\t                    multi_parser.current_mode = 'CONTENT';\n\t                    break;\n\t                case 'TK_TAG_HANDLEBARS_COMMENT':\n\t                    multi_parser.print_token(multi_parser.token_text);\n\t                    multi_parser.current_mode = 'TAG';\n\t                    break;\n\t                case 'TK_CONTENT':\n\t                    multi_parser.print_token(multi_parser.token_text);\n\t                    multi_parser.current_mode = 'TAG';\n\t                    break;\n\t                case 'TK_STYLE':\n\t                case 'TK_SCRIPT':\n\t                    if (multi_parser.token_text !== '') {\n\t                        multi_parser.print_newline(false, multi_parser.output);\n\t                        var text = multi_parser.token_text,\n\t                            _beautifier,\n\t                            script_indent_level = 1;\n\t                        if (multi_parser.token_type === 'TK_SCRIPT') {\n\t                            _beautifier = typeof js_beautify === 'function' && js_beautify;\n\t                        } else if (multi_parser.token_type === 'TK_STYLE') {\n\t                            _beautifier = typeof css_beautify === 'function' && css_beautify;\n\t                        }\n\t\n\t                        if (options.indent_scripts === \"keep\") {\n\t                            script_indent_level = 0;\n\t                        } else if (options.indent_scripts === \"separate\") {\n\t                            script_indent_level = -multi_parser.indent_level;\n\t                        }\n\t\n\t                        var indentation = multi_parser.get_full_indent(script_indent_level);\n\t                        if (_beautifier) {\n\t\n\t                            // call the Beautifier if avaliable\n\t                            var Child_options = function() {\n\t                                this.eol = '\\n';\n\t                            };\n\t                            Child_options.prototype = options;\n\t                            var child_options = new Child_options();\n\t                            text = _beautifier(text.replace(/^\\s*/, indentation), child_options);\n\t                        } else {\n\t                            // simply indent the string otherwise\n\t                            var white = text.match(/^\\s*/)[0];\n\t                            var _level = white.match(/[^\\n\\r]*$/)[0].split(multi_parser.indent_string).length - 1;\n\t                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);\n\t                            text = text.replace(/^\\s*/, indentation)\n\t                                .replace(/\\r\\n|\\r|\\n/g, '\\n' + reindent)\n\t                                .replace(/\\s+$/, '');\n\t                        }\n\t                        if (text) {\n\t                            multi_parser.print_token_raw(text);\n\t                            multi_parser.print_newline(true, multi_parser.output);\n\t                        }\n\t                    }\n\t                    multi_parser.current_mode = 'TAG';\n\t                    break;\n\t                default:\n\t                    // We should not be getting here but we don't want to drop input on the floor\n\t                    // Just output the text and move on\n\t                    if (multi_parser.token_text !== '') {\n\t                        multi_parser.print_token(multi_parser.token_text);\n\t                    }\n\t                    break;\n\t            }\n\t            multi_parser.last_token = multi_parser.token_type;\n\t            multi_parser.last_text = multi_parser.token_text;\n\t        }\n\t        var sweet_code = multi_parser.output.join('').replace(/[\\r\\n\\t ]+$/, '');\n\t\n\t        // establish end_with_newline\n\t        if (end_with_newline) {\n\t            sweet_code += '\\n';\n\t        }\n\t\n\t        if (eol !== '\\n') {\n\t            sweet_code = sweet_code.replace(/[\\n]/g, eol);\n\t        }\n\t\n\t        return sweet_code;\n\t    }\n\t\n\t    if (true) {\n\t        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(requireamd) {\n\t            var js_beautify = __webpack_require__(3);\n\t            var css_beautify = __webpack_require__(4);\n\t\n\t            return {\n\t                html_beautify: function(html_source, options) {\n\t                    return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);\n\t                }\n\t            };\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports !== \"undefined\") {\n\t        // Add support for CommonJS. Just put this file somewhere on your require.paths\n\t        // and you will be able to `var html_beautify = require(\"beautify\").html_beautify`.\n\t        var js_beautify = require('./beautify.js');\n\t        var css_beautify = require('./beautify-css.js');\n\t\n\t        exports.html_beautify = function(html_source, options) {\n\t            return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);\n\t        };\n\t    } else if (typeof window !== \"undefined\") {\n\t        // If we're running a web page and don't have either of the above, add our one global\n\t        window.html_beautify = function(html_source, options) {\n\t            return style_html(html_source, options, window.js_beautify, window.css_beautify);\n\t        };\n\t    } else if (typeof global !== \"undefined\") {\n\t        // If we don't even have window, try global.\n\t        global.html_beautify = function(html_source, options) {\n\t            return style_html(html_source, options, global.js_beautify, global.css_beautify);\n\t        };\n\t    }\n\t\n\t}());\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar map = {\n\t\t\"./ru.js\": 7\n\t};\n\tfunction webpackContext(req) {\n\t\treturn __webpack_require__(webpackContextResolve(req));\n\t};\n\tfunction webpackContextResolve(req) {\n\t\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n\t};\n\twebpackContext.keys = function webpackContextKeys() {\n\t\treturn Object.keys(map);\n\t};\n\twebpackContext.resolve = webpackContextResolve;\n\tmodule.exports = webpackContext;\n\twebpackContext.id = 6;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  months: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'],\n\t  monthsShort: ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'],\n\t  days: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],\n\t  daysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],\n\t  thousandSeparator: ' ',\n\t  decimalSeparator: ',',\n\t  formats: {\n\t    'General Number': '#.#',\n\t    'Currency': '#,##0.00р.;[Red]-#,##0.00р.',\n\t    'Fixed': '0.00',\n\t    'Standard': '#,##0.00',\n\t    'Percent': '0.00%',\n\t    'Scientific': '0.00E+00',\n\t    'Yes/No': '\"Да\";\"Да\";\"Нет\"',\n\t    'True/False': '\"Истина\";\"Истина\";\"Ложь\"',\n\t    'On/Off': '\"Вкл\";\"Вкл\";\"Выкл\"',\n\t    'Short Date': 'mm.dd.yyyy',\n\t    'Long Date': 'dd mmmm yyyy',\n\t    'General Date': 'mm.dd.yyyy h:mm',\n\t    'Medium Date': 'dd.mmm.yy',\n\t    'Long Time': 'hh:mm:ss AM/PM',\n\t    'Short Time': 'h:mm',\n\t    'Medium Time': 'hh:mm AM/PM'\n\t  }\n\t};\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** test.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3784fcfa51cbdfac215e\n **/","import { Code, each, extend } from './utils';\n\nconst ZERO_DATE = new Date('1899-12-31T00:00:00.000');\n\nconsole.log('test')\n\n//TODO debug is unneccessary, it must be over way with importing beautyfier\n\nclass DataFormatter {\n\n  constructor(opts = {}) {\n    // Set default options\n    this.opts = extend({\n      locale: 'ru',\n      debug: false\n    }, opts);\n\n    this.setLocale(this.opts.locale);\n  }\n\n  setLocale(locale) {\n    const localeData = require('./locales/' + locale + '.js');\n    this.locale = localeData.default;\n    // Clear saved memoized functions\n    this.memoized = {};\n  }\n\n  log() {\n    if (this.opts.debug) {\n      console.log(...arguments);\n    }\n  }\n\n  /**\n   * Greatest common divisor\n   */\n  gcd(a, b) {\n    let r;\n    while (b) {\n      r = a % b;\n      a = b;\n      b = r;\n    }\n    return a;\n  }\n\n  toFixed(n, decimals) {\n    let factor = Math.pow(10, decimals);\n    return Math.round(n * factor) / factor;\n  }\n\n  applyNumberPattern(n, pattern, direction) {\n    n = n.toString();\n    let s = '';\n\n    if (direction === 'right') {\n      let j = 0;\n      let i = -1;\n\n      while (++i < pattern.length) {\n        switch (pattern[i]) {\n          case '0':\n            s += n[j] || '0';\n            j++;\n            break;\n          case '#':\n            s += n[j] || '';\n            j++;\n            break;\n          case '?':\n            s += n[j] || ' ';\n            j++;\n            break;\n          case '[':\n            while (i < pattern.length && pattern[i] !== ']') {\n              s += pattern[i];\n              i++;\n            }\n            i--;\n            break;\n          default:\n            s += pattern[i];\n        }\n      }\n    }\n    else {\n      // Should separate thousands\n      let separateThousands = false;\n      let mostLeftDigit;\n\n      pattern = pattern.replace(/(0|#|\\?)(,+?)(0|#|\\?)/g, (a, m1, m2, m3)=> {\n        separateThousands = true;\n        return m1 + m3;\n      });\n\n      // Add separation\n      if (separateThousands) {\n        let j = n.length - 3;\n        while ((n[0] === '-' ? j > 1 : j > 0)) {\n          n = n.substr(0, j) + this.locale.thousandSeparator + n.substr(j);\n          j -= 3;\n        }\n      }\n\n      let j = n.length - 1;\n      let i = pattern.length;\n\n      while (i--) {\n        switch (pattern[i]) {\n          case '0':\n            s = (n[j] || '0') + s;\n            mostLeftDigit = i;\n            j--;\n            break;\n          case '#':\n            s = (n[j] || '') + s;\n            mostLeftDigit = i;\n            j--;\n            break;\n          case '?':\n            s = (n[j] || ' ') + s;\n            mostLeftDigit = i;\n            j--;\n            break;\n          case ']':\n            while (i > 0 && pattern[i] !== '[') {\n              s = pattern[i] + s;\n              i--;\n            }\n            i++;\n            break;\n          default:\n            s = pattern[i] + s;\n        }\n      }\n      // Add remaining digits, example: n=1234, ptrn=00, result must be 1234 instead of 34\n      if (j >= 0 && mostLeftDigit !== null) {\n        s = s.substr(0, mostLeftDigit) +\n            n.substr(0, j + 1) +\n            s.substr(mostLeftDigit);\n      }\n    }\n\n    return s;\n  }\n\n  restoreOrigins(value, origins) {\n    return value.toString().replace(/\\[(?:(\\$*?)|(.*?))\\]/g, (a, m1)=>\n      m1 && origins[m1.length - 1] || ''\n    );\n  }\n\n  formatAsNumberDecimal(n, decimals, patternIntegerPart, patternDecimalPart) {\n\n    n = this.toFixed(n, decimals).toString().split('.');\n    let integerPart = parseInt(n[0]);\n    let decimalPart = parseInt(n[1] || 0);\n\n    return this.applyNumberPattern(integerPart, patternIntegerPart) +\n      this.locale.decimalSeparator +\n      this.applyNumberPattern(decimalPart, patternDecimalPart, 'right');\n  }\n\n  formatAsNumberFractial(n, patternNumeratorPart, patternDenominatorPart) {\n    let m = n.toString().split(\".\");\n    m = m[1] ? Math.pow(10, m[1].length) : 1;\n    n = Math.floor(n * m);\n\n    let factor = this.gcd(n, m);\n\n    return this.applyNumberPattern(n / factor, patternNumeratorPart) +\n      '/' +\n      this.applyNumberPattern(m / factor, patternDenominatorPart);\n  }\n\n  formatAsNumberFractialMixed(n, leftPatternNumeratorPart, rightPatternNumeratorPart, patternDenominatorPart) {\n    let f = 0;\n    let c = 1;\n    let factor = 1;\n    let m = n.toString().split('.');\n\n    if (m[1]) {\n      c = Math.pow(10, m[1].length);\n      f = parseInt(m[1]);\n      factor = this.gcd(f, c);\n    }\n\n    return this.applyNumberPattern(Math.floor(n), leftPatternNumeratorPart) +\n      this.applyNumberPattern(f / factor, rightPatternNumeratorPart) +\n      '/' +\n      this.applyNumberPattern(c / factor, patternDenominatorPart);\n  }\n\n  formatAsNumberExponential(n, integerPart, decimalPart, patternIntegerPart, patternDecimalPart, patternPowPart) {\n\n    let sign = n < 0 ? -1 : 1;\n    let pow = 0;\n\n    if (n !== 0) {\n\n      n = Math.abs(n);\n\n      let integerPartDivision = Math.pow(10, integerPart);\n\n      while(n < integerPartDivision || this.toFixed(n, decimalPart) < integerPartDivision){\n        n *= 10;\n        pow ++;\n      }\n\n      while(n >= integerPartDivision || this.toFixed(n, decimalPart) >= integerPartDivision){\n        n /= 10;\n        pow --;\n      }\n\n    }\n\n    n = this.toFixed(n * sign, decimalPart).toString().split('.');\n\n    // Build res\n    let res = '';\n\n    // Integer part\n    res += this.applyNumberPattern(parseInt(n[0]), patternIntegerPart);\n\n    // Decimal part\n    if (patternDecimalPart) {\n      res += this.locale.decimalSeparator +\n        this.applyNumberPattern(parseInt(n[1]), patternDecimalPart, 'right');\n    }\n\n    // Pow part\n    res += 'E' +\n      (pow > 0 ? '-' : '+') +\n      this.applyNumberPattern(Math.abs(pow), patternPowPart);\n\n    return res;\n  }\n\n  formatAsDateTimeElapsed(n, foundDays, foundHours, foundMinutes, pattern) {\n\n    n = Math.abs(n.getTime() - ZERO_DATE.getTime());\n\n    let seconds = parseInt(n / 1000);\n    let minutes = parseInt(seconds / 60);\n    let hours = parseInt(minutes / 60);\n    let days = parseInt(hours / 24);\n\n    hours = foundDays ? hours % 24 : hours;\n    minutes = foundHours ? minutes % 60 : minutes;\n    seconds = foundMinutes ? seconds % 60 : seconds;\n\n    return pattern.replace(/(dd)|(d)|(hh)|(h)|(mm)|(m)|(ss)|(s)/gi, (a, dd, d, hh, h, mm, m, ss, s)=> {\n\n      if (dd) {\n        return this.applyNumberPattern(days, '00');\n      }\n\n      if (d) {\n        return days;\n      }\n\n      if (hh) {\n        return this.applyNumberPattern(hours, '00');\n      }\n\n      if (h) {\n        return hours;\n      }\n\n      if (mm) {\n        return this.applyNumberPattern(minutes, '00');\n      }\n\n      if (m) {\n        return minutes;\n      }\n\n      if (ss) {\n        return this.applyNumberPattern(seconds, '00');\n      }\n\n      if (s) {\n        return seconds;\n      }\n\n      return '';\n    });\n  }\n\n  formatAsDateTimeNormal(n, pattern) {\n    let { days, daysShort, months, monthsShort } = this.locale;\n    let foundAMPM = false;\n\n    let year = n.getFullYear();\n    let month = n.getMonth();\n    let date = n.getDate();\n    let weekDay = n.getDay();\n    let hours = n.getHours();\n    let minutes = n.getMinutes();\n    let seconds = n.getSeconds();\n\n    // Build res\n    let res = pattern.replace(/((?:am\\/pm)|(?:a\\/p))|(?:(h[^ydsap]*?)mm)|(?:mm([^ydh]*?s))|(?:(h[^ydsap]*?)m)|(?:m([^ydh]*?s))/gi, (a, ampm, fmin, fmin2, mmin, mmin2)=> {\n\n      if (ampm) {\n        foundAMPM = true;\n        return '[]';\n      }\n\n      if (fmin) {\n        return fmin + this.applyNumberPattern(minutes, '00');\n      }\n\n      if (fmin2) {\n        return this.applyNumberPattern(minutes, '00') + fmin2;\n      }\n\n      if (mmin) {\n        return mmin + minutes;\n      }\n\n      if (mmin2) {\n        return minutes + mmin2;\n      }\n\n      return '';\n    });\n\n    return res.replace(/(ss)|(s)|(hh)|(h)|(dddd)|(ddd)|(dd)|(d)|(mmmmm)|(mmmm)|(mmm)|(mm)|(m)|(yyyy)|(yy)|(\\[\\])/gi, (a, ss, s, hh, h, dddd, ddd, dd, d, mmmmm, mmmm, mmm, mm, m, yyyy, yy, ampm)=> {\n\n      if (ss) {\n        return this.applyNumberPattern(seconds, '00');\n      }\n\n      if (s) {\n        return seconds;\n      }\n\n      if (hh) {\n        return this.applyNumberPattern(foundAMPM ? hours % 12 : hours, '00');\n      }\n\n      if (h) {\n        return foundAMPM ? hours % 12 : hours;\n      }\n\n      if (dddd) {\n        return days[weekDay];\n      }\n\n      if (ddd) {\n        return daysShort[weekDay];\n      }\n\n      if (dd) {\n        return this.applyNumberPattern(date, '00');\n      }\n\n      if (d) {\n        return date;\n      }\n\n      if (mmmmm) {\n        return monthsShort[month][0];\n      }\n\n      if (mmmm) {\n        return months[month];\n      }\n\n      if (mmm) {\n        return monthsShort[month];\n      }\n\n      if (mm) {\n        return this.applyNumberPattern(month + 1, '00');\n      }\n\n      if (m) {\n        return month + 1;\n      }\n\n      if (yyyy) {\n        return year;\n      }\n\n      if (yy) {\n        return year.toString().substr(2);\n      }\n\n      if (ampm) {\n        return hours < 12 ? 'AM' : 'PM';\n      }\n\n      return '';\n    });\n  }\n\n  createTextCode(section) {\n    let code = new Code();\n\n    code.append(`\n      res.value = {0}.replace(/@/, n);\n    `, section);\n\n    return code.toString();\n  }\n\n  createGeneralCode() {\n    let code = new Code();\n    let numberCode = this.createNumberCode('0.00');\n    let dateTimeCode = this.createDateTimeCode('[d]');\n\n    code.append(`\n      if (type === \"Number\") {\n        ${numberCode}\n      }\n      if (type === \"DateTime\") {\n        ${dateTimeCode}\n      }\n    `);\n\n    return code.toString();\n  }\n\n  createNumberExponentialCode(exponentialMatch) {\n    let patternIntegerPart = exponentialMatch[1];\n    let patternDecimalPart = exponentialMatch[2];\n    let patternPowPart = exponentialMatch[3];\n    let code = new Code();\n    let integerPart;\n    let decimalPart;\n\n    let zerosCount = (s)=> s.match(/0|\\?|#/g).length;\n\n    // Integer part\n    if (!patternIntegerPart) {\n      patternIntegerPart = '#';\n      integerPart = 1;\n    }\n    else {\n      integerPart = zerosCount(patternIntegerPart);\n    }\n\n    // Decimal part\n    if (!patternDecimalPart) {\n      patternDecimalPart = '';\n      decimalPart = 0;\n    }\n    else {\n      decimalPart = zerosCount(patternDecimalPart);\n    }\n\n    code.append(`\n      result.value = this.formatAsNumberExponential(n, {0}, {1}, {2}, {3}, {4});\n    `,\n      integerPart,\n      decimalPart,\n      patternIntegerPart,\n      patternDecimalPart,\n      patternPowPart\n    );\n\n    return code.toString();\n  }\n\n  createNumberFractialCode(fractialMatch) {\n    let code = new Code();\n    let patternNumeratorPart = fractialMatch[1] || '#';\n    let patternDenominatorPart = fractialMatch[2] || '#';\n    // TODO watch here\n    let zeroPos = patternNumeratorPart.length - 1;\n\n    while (\n      patternNumeratorPart[zeroPos] === '0' &&\n      patternNumeratorPart[zeroPos] !== '?' &&\n      patternNumeratorPart[zeroPos] !== '#' &&\n      patternNumeratorPart[zeroPos] !== ' ' &&\n      zeroPos > 0\n    ) {\n      zeroPos --;\n    }\n\n    let leftPatternNumeratorPart = patternNumeratorPart.substr(0, zeroPos);\n    let rightPatternNumeratorPart = patternNumeratorPart.substr(zeroPos);\n\n    if (!leftPatternNumeratorPart) {\n      code.append(`\n        result.value = this.formatAsNumberFractial(n, {0}, {1});\n      `,\n        rightPatternNumeratorPart,\n        patternDenominatorPart\n      );\n    }\n    // Mixed fraction\n    else {\n      code.append(`\n        result.value = this.formatAsNumberFractialMixed(n, {0}, {1}, {2});\n      `,\n        leftPatternNumeratorPart,\n        rightPatternNumeratorPart,\n        patternDenominatorPart\n      );\n    }\n\n    return code.toString();\n  }\n\n  createNumberDecimalCode(decimalMatch) {\n    let code = new Code();\n    let patternIntegerPart = decimalMatch[1] || '0';\n    let patternDecimalPart = decimalMatch[2] || '';\n    let decimals;\n    let factor = 1;\n\n    let zerosCount = (s)=> s.match(/0|\\?|#/g).length;\n\n    if (!patternDecimalPart) {\n      decimals = 0;\n    }\n    else {\n      decimals = zerosCount(patternDecimalPart);\n    }\n\n    // Spaces before .\n    patternIntegerPart = patternIntegerPart.replace(/(0|#|\\?)(,+)([^0?#]*)$/, (a, m1, m2, m3)=> {\n      factor *= Math.pow(1000, m2.length);\n      return m1 + m3;\n    });\n\n    if (factor !== 1) {\n      code.append(`\n        n /= {0};\n      `, factor);\n    }\n\n    code.append(`\n      result.value = this.formatAsNumberDecimal(n, {0}, {1}, {2});\n    `,\n      decimals,\n      patternIntegerPart,\n      patternDecimalPart\n    );\n\n    return code.toString();\n  }\n\n  createNumberIntegerCode(section) {\n    let code = new Code();\n\n    code.append(`\n      n = Math.round(n);\n      result.value = this.applyNumberPattern(n, {0});\n    `, section);\n\n    return code.toString();\n  }\n\n  createNumberCode(section, shouldAbsNumber) {\n    let numberCode = new Code();\n\n    // Abs\n    if (shouldAbsNumber) {\n      numberCode.append(`\n        n = Math.abs(n);\n      `);\n    }\n\n    // Exponential form regexp\n    let exponentialMatch = section.match(/(.*?)(?:\\.(.*?))?e(?:\\+|\\-)(.*)/i);\n\n    if (exponentialMatch) {\n\n      // Exponential form\n      numberCode.appendRaw(this.createNumberExponentialCode(exponentialMatch));\n\n    }\n    else {\n      let factor = 1;\n\n      // Spaces before end\n      section = section.replace(/(0|#|\\?)(,+)([^0?#]*)$/, (a, m1, m2, m3)=> {\n        factor *= Math.pow(1000, m2.length);\n        return m1 + m3;\n      });\n\n      // Percents\n      let percentMatch = section.match(/%/g);\n      if (percentMatch) {\n        factor /= Math.pow(100, percentMatch.length);\n      }\n\n      // Factor\n      if (factor !== 1) {\n        numberCode.append(`\n          n /= {0};\n        `, factor);\n      }\n\n      let fractialMatch;\n      let decimalMatch;\n\n      switch (true) {\n\n        // Fractial form\n        case !!(fractialMatch = section.match(/(.*?)\\/(.*)/)):\n          numberCode.appendRaw(this.createNumberFractialCode(fractialMatch));\n          break;\n\n        // Decimal form\n        case !!(decimalMatch = section.match(/(.*?)\\.(.*)/)):\n          numberCode.appendRaw(this.createNumberDecimalCode(decimalMatch));\n          break;\n\n        // Integer form\n        default:\n          numberCode.appendRaw(this.createNumberIntegerCode(section));\n\n      }\n    }\n\n    // Final code\n    let code = new Code();\n\n    // Parse to float\n    code.append(`\n      n = parseFloat(n);\n    `);\n\n    // Checks\n    code.append(`\n      if (!isNaN(n)) {\n        if (n >= 1e21 || n <= -1e21) {\n          result.value = n.toString().toUpperCase();\n        }\n        else {\n          ${numberCode}\n        }\n      }\n    `);\n\n    return code.toString();\n  }\n\n  createDateTimeElapsedCode(section) {\n    let code = new Code();\n\n    let foundDays = /d/i.test(section);\n    let foundHours = /h/i.test(section);\n    let foundMinutes = /m/i.test(section);\n\n    code.append(`\n      result.value = this.formatAsDateTimeElapsed(n, {0}, {1}, {2}, {3});\n    `,\n      foundDays,\n      foundHours,\n      foundMinutes,\n      section\n    );\n\n    return code.toString();\n  }\n\n  createDateTimeNormalCode(section) {\n    let code = new Code();\n\n    code.append(`\n      result.value = this.formatAsDateTimeNormal(n, {0});\n    `, section);\n\n    return code.toString();\n  }\n\n  createDateTimeCode(section) {\n    let code = new Code();\n    let elapsed = false;\n\n    section = section.replace(/\\[(h+?|m+?|s+?|y+?)]/ig, (a, m1)=> {\n      elapsed = true;\n      return m1;\n    });\n\n    let dateTimeCode = elapsed ?\n                       this.createDateTimeElapsedCode(section) :\n                       this.createDateTimeNormalCode(section);\n\n    code.append(`\n      n = new Date(n);\n      if (!isNaN(n.getTime())) {\n        ${dateTimeCode}\n      }\n    `);\n\n    return code.toString();\n  }\n\n  createSectionCode(section, sectionIndex, sectionsCount) {\n    // Start creating code for function\n    let code = new Code();\n\n    let condition;\n    let shouldAbsNumber = false;\n\n    // Find condition for sector or add standard sector condition (positive number, negative number, etc.)\n    let conditionMatch = section.match(/\\[((?:>|>=|<|<=|=|<>)[0-9\\.]+?)]/);\n\n    switch(true) {\n\n      // Found condition\n      case !!conditionMatch:\n        let cond = conditionMatch[1]\n          .replace(/<>/, '!=')\n          .replace('/=/', '==');\n        condition = `type == \"Number\" && parseFloat(n)${cond}`;\n        break;\n\n      // Standard condition for first section of 3+\n      case sectionIndex === 0 && sectionsCount > 2:\n        condition = `type == \"Number\" && parseFloat(n) > 0`;\n        break;\n\n      // Standard condition for first section of 2\n      case sectionIndex === 0 && sectionsCount === 2:\n        condition = `type == \"Number\" && parseFloat(n) >= 0`;\n        break;\n\n      // Standard condition for negative number\n      case sectionIndex === 1:\n        condition = `type == \"Number\" && parseFloat(n) < 0`;\n        shouldAbsNumber = true;\n        break;\n\n    }\n\n    // Text color\n    let colorMatch = section.match(/\\[(Red|Green|White|Blue|Magenta|Yellow|Cyan|Black)]/i);\n    if (colorMatch) {\n      code.append(`\n        result.color = {0};\n      `, colorMatch[1]);\n    }\n\n    // Remove all [], except our replacements and elapsed days, hours, minutes, seconds\n    section = section.replace(/(\\[((?!((\\$*?)|(d*?)|(h*?)|(m*?)|(s*?))]).*?)])/, '');\n\n    // Format code\n    let formatCode;\n\n    switch (true) {\n\n      // General format\n      case /General/i.test(section):\n        formatCode = this.createGeneralCode(section);\n        break;\n\n      // Text\n      case /@/.test(section):\n        formatCode = this.createTextCode(section);\n        break;\n\n      // Number\n      case /#|\\?|0/.test(section):\n        if (!condition) {\n          condition = 'type === \"Number\"';\n        }\n        formatCode = this.createNumberCode(section, shouldAbsNumber);\n        break;\n\n      // DateTime\n      case /h|m|s|y|d/i.test(section):\n        if (!condition) {\n          condition = 'type === \"DateTime\"';\n        }\n        formatCode = this.createDateTimeCode(section);\n        break;\n\n      default:\n        condition = 'true';\n        formatCode = new Code().toString();\n\n    }\n\n    code.append(`\n      // Section {0}\n\n      if (${condition}) {\n        result.pattern = {0};\n        result.value = {0};\n        ${formatCode}\n      }\n      // End section {0}\n\n    `, section);\n\n    return code.toString();\n  }\n\n  createPatternCode(pattern) {\n    let origins = [];\n    let replaces = '';\n\n    // Find quotes, slash symbols\n    let patternReplaced = pattern.replace(/\"([^\"]+)\"|\\\\(.?)|(_.?)|(\\*.?)|(\")/g, function(a, m1, m2, m3) {\n      // Quote found\n      if (m1) {\n        origins.push(m1.replace(/(\"|'|\\\\)/g, \"\\\\$1\"));\n        return `[${(replaces += '$')}]`;\n      }\n      // Slash found\n      if (m2) {\n        origins.push(m2.replace(/(\"|'|\\\\)/g, \"\\\\$1\"));\n        return `[${(replaces += '$')}]`\n      }\n      // Space found\n      if (m3) {\n        origins.push(' ');\n        return `[${(replaces += '$')}]`;\n      }\n      return '';\n    });\n\n    // Split pattern to sections\n    let sections = patternReplaced.split(/;/);\n\n    // Init code\n    let code = new Code();\n\n    // Result variable\n    code.append(`\n      var result = {\n        value: \"\",\n        align: type === \"Number\" || type === \"DateTime\" ? \"right\" : \"\",\n        color: \"\",\n        pattern: \"\"\n      };\n    `);\n\n    // Remove unnesessary sections\n    sections = sections.slice(0, 4);\n\n    // Loop trough sections\n    // TODO обратить внимание на parseInt, если убирать\n    // свои функции, то скорее всего он не понадобится\n    each(sections, (section, sectionIndex)=>\n      code.appendRaw(this.createSectionCode(section, parseInt(sectionIndex), sections.length))\n    );\n\n    // Restore origins\n    code.append(`\n      result.value = this.restoreOrigins(result.value, {0});\n      result.pattern = this.restoreOrigins(result.pattern, {0});\n      return result;\n    `, origins);\n\n    return code.toString();\n  }\n\n  format(n, type, pattern) {\n    this.log(`Input: n=${n}, type=${type}, pattern=${pattern}`);\n\n    n = n.toString();\n    pattern = pattern.toString();\n\n    // Find predefined format\n    if (this.locale.formats[pattern]) {\n      pattern = this.locale.formats[pattern];\n    }\n\n    // Create function\n    if (!this.memoized[pattern]) {\n      let code = this.createPatternCode(pattern);\n      this.memoized[pattern] = Function('n', 'type', code);\n      this.log('Code:');\n      this.log(code);\n    }\n\n    // Call function\n    return this.memoized[pattern].call(this, n, type);\n  }\n\n};\n\n// Create instance\nconst dataFormatter = new DataFormatter();\n\n// Add AMD support\nif (typeof define === 'function' && define.amd) {\n  define('dataFormatter', ()=> dataFormatter);\n  define('DataFormatter', ()=> DataFormatter);\n}\n// CommonJS\nelse if (typeof module === 'object' && module.exports) {\n  console.log('here 1')\n  module.exports = dataFormatter;\n  module.exports.DataFormatter = DataFormatter;\n}\n// Window\nelse {\n  global.dataFormatter = dataFormatter;\n  global.DataFormatter = DataFormatter;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","/// TODO IT MUST BE ONLY IN DEV\nimport beautify from 'js-beautify';\n\n/**\n * Invokes func for every element\n */\nexport function each(obj, func) {\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      func(obj[key], key);\n    }\n  }\n};\n\n/**\n * Transform values\n */\nexport function map(obj, func) {\n  var res = [];\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      res.push(func(obj[key], key));\n    }\n  }\n  return res;\n};\n\n/**\n * Extends object\n */\nexport function extend(a, ...b) {\n  for(let i = 0; i < b.length; i++) {\n    for (let j in b[i]) {\n      if (b[i].hasOwnProperty(j)) {\n        a[j] = b[i][j];\n      }\n    }\n  }\n  return a;\n};\n\n/**\n * Format string like sprintf() in PHP\n */\nexport function formatString(s, ...args) {\n  return s.replace(/{(\\d+)}/g, (match, number)=>\n    typeof args[number] != 'undefined' ? args[number] : match\n  );\n};\n\n/**\n * Class for building code\n */\nexport class Code {\n\n  constructor() {\n    this.code = '';\n  }\n\n  makeString(s, ...values) {\n    values = map(values, (val)=> JSON.stringify(val));\n    return formatString(s, ...values);\n  };\n\n  append() {\n    this.code += this.makeString(...arguments);\n  }\n\n  toString() {\n    return beautify(this.code);\n  }\n\n  appendRaw(str) {\n    this.code += str;\n  }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/utils.js\n **/","/**\nThe following batches are equivalent:\n\nvar beautify_js = require('js-beautify');\nvar beautify_js = require('js-beautify').js;\nvar beautify_js = require('js-beautify').js_beautify;\n\nvar beautify_css = require('js-beautify').css;\nvar beautify_css = require('js-beautify').css_beautify;\n\nvar beautify_html = require('js-beautify').html;\nvar beautify_html = require('js-beautify').html_beautify;\n\nAll methods returned accept two arguments, the source string and an options object.\n**/\n\nfunction get_beautify(js_beautify, css_beautify, html_beautify) {\n    // the default is js\n    var beautify = function(src, config) {\n        return js_beautify.js_beautify(src, config);\n    };\n\n    // short aliases\n    beautify.js = js_beautify.js_beautify;\n    beautify.css = css_beautify.css_beautify;\n    beautify.html = html_beautify.html_beautify;\n\n    // legacy aliases\n    beautify.js_beautify = js_beautify.js_beautify;\n    beautify.css_beautify = css_beautify.css_beautify;\n    beautify.html_beautify = html_beautify.html_beautify;\n\n    return beautify;\n}\n\nif (typeof define === \"function\" && define.amd) {\n    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n    define([\n        \"./lib/beautify\",\n        \"./lib/beautify-css\",\n        \"./lib/beautify-html\"\n    ], function(js_beautify, css_beautify, html_beautify) {\n        return get_beautify(js_beautify, css_beautify, html_beautify);\n    });\n} else {\n    (function(mod) {\n        var js_beautify = require('./lib/beautify');\n        var css_beautify = require('./lib/beautify-css');\n        var html_beautify = require('./lib/beautify-html');\n\n        mod.exports = get_beautify(js_beautify, css_beautify, html_beautify);\n\n    })(module);\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-beautify/js/index.js\n ** module id = 2\n ** module chunks = 0\n **/","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2013 Einar Lielmanis and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n JS Beautifier\n---------------\n\n\n  Written by Einar Lielmanis, <einar@jsbeautifier.org>\n      http://jsbeautifier.org/\n\n  Originally converted to javascript by Vital, <vital76@gmail.com>\n  \"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>\n  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>\n\n\n  Usage:\n    js_beautify(js_source_text);\n    js_beautify(js_source_text, options);\n\n  The options are:\n    indent_size (default 4)          - indentation size,\n    indent_char (default space)      - character to indent with,\n    preserve_newlines (default true) - whether existing line breaks should be preserved,\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\n    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\n            jslint_happy        !jslint_happy\n            ---------------------------------\n            function ()         function()\n\n            switch () {         switch() {\n            case 1:               case 1:\n              break;                break;\n            }                   }\n\n    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, \"function()\" vs \"function ()\",\n          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)\n\n    brace_style (default \"collapse\") - \"collapse-preserve-inline\" | \"collapse\" | \"expand\" | \"end-expand\" | \"none\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n\n    space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\n    unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\n    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.\n          NOTE: This is not a hard limit. Lines will continue until a point where a newline would\n                be preserved if it were present.\n\n    end_with_newline (default false)  - end output with a newline\n\n\n    e.g\n\n    js_beautify(js_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t'\n    });\n\n*/\n\n// Object.values polyfill found here:\n// http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html\nif (!Object.values) {\n    Object.values = function(o) {\n        if (o !== Object(o)) {\n            throw new TypeError('Object.values called on a non-object');\n        }\n        var k = [],\n            p;\n        for (p in o) {\n            if (Object.prototype.hasOwnProperty.call(o, p)) {\n                k.push(o[p]);\n            }\n        }\n        return k;\n    };\n}\n\n(function() {\n\n    function js_beautify(js_source_text, options) {\n\n        var acorn = {};\n        (function(exports) {\n            /* jshint curly: false */\n            // This section of code is taken from acorn.\n            //\n            // Acorn was written by Marijn Haverbeke and released under an MIT\n            // license. The Unicode regexps (for identifiers and whitespace) were\n            // taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n            //\n            // Git repositories for Acorn are available at\n            //\n            //     http://marijnhaverbeke.nl/git/acorn\n            //     https://github.com/marijnh/acorn.git\n\n            // ## Character categories\n\n            // Big ugly regular expressions that match characters in the\n            // whitespace, identifier, and identifier-start categories. These\n            // are only applied when a character is found to actually have a\n            // code point above 128.\n\n            var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\n            var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n            var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n            var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n            var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n            // Whether a single character denotes a newline.\n\n            exports.newline = /[\\n\\r\\u2028\\u2029]/;\n\n            // Matches a whole line break (where CRLF is considered a single\n            // line break). Used to count lines.\n\n            // in javascript, these two differ\n            // in python they are the same, different methods are called on them\n            exports.lineBreak = new RegExp('\\r\\n|' + exports.newline.source);\n            exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');\n\n\n            // Test whether a given character code starts an identifier.\n\n            exports.isIdentifierStart = function(code) {\n                // permit $ (36) and @ (64). @ is used in ES7 decorators.\n                if (code < 65) return code === 36 || code === 64;\n                // 65 through 91 are uppercase letters.\n                if (code < 91) return true;\n                // permit _ (95).\n                if (code < 97) return code === 95;\n                // 97 through 123 are lowercase letters.\n                if (code < 123) return true;\n                return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n            };\n\n            // Test whether a given character is part of an identifier.\n\n            exports.isIdentifierChar = function(code) {\n                if (code < 48) return code === 36;\n                if (code < 58) return true;\n                if (code < 65) return false;\n                if (code < 91) return true;\n                if (code < 97) return code === 95;\n                if (code < 123) return true;\n                return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n            };\n        })(acorn);\n        /* jshint curly: true */\n\n        function in_array(what, arr) {\n            for (var i = 0; i < arr.length; i += 1) {\n                if (arr[i] === what) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        function trim(s) {\n            return s.replace(/^\\s+|\\s+$/g, '');\n        }\n\n        function ltrim(s) {\n            return s.replace(/^\\s+/g, '');\n        }\n\n        // function rtrim(s) {\n        //     return s.replace(/\\s+$/g, '');\n        // }\n\n        function sanitizeOperatorPosition(opPosition) {\n            opPosition = opPosition || OPERATOR_POSITION.before_newline;\n\n            var validPositionValues = Object.values(OPERATOR_POSITION);\n\n            if (!in_array(opPosition, validPositionValues)) {\n                throw new Error(\"Invalid Option Value: The option 'operator_position' must be one of the following values\\n\" +\n                    validPositionValues +\n                    \"\\nYou passed in: '\" + opPosition + \"'\");\n            }\n\n            return opPosition;\n        }\n\n        var OPERATOR_POSITION = {\n            before_newline: 'before-newline',\n            after_newline: 'after-newline',\n            preserve_newline: 'preserve-newline',\n        };\n\n        var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];\n\n        var MODE = {\n            BlockStatement: 'BlockStatement', // 'BLOCK'\n            Statement: 'Statement', // 'STATEMENT'\n            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',\n            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',\n            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',\n            Conditional: 'Conditional', //'(COND-EXPRESSION)',\n            Expression: 'Expression' //'(EXPRESSION)'\n        };\n\n        function Beautifier(js_source_text, options) {\n            \"use strict\";\n            var output;\n            var tokens = [],\n                token_pos;\n            var Tokenizer;\n            var current_token;\n            var last_type, last_last_text, indent_string;\n            var flags, previous_flags, flag_store;\n            var prefix;\n\n            var handlers, opt;\n            var baseIndentString = '';\n\n            handlers = {\n                'TK_START_EXPR': handle_start_expr,\n                'TK_END_EXPR': handle_end_expr,\n                'TK_START_BLOCK': handle_start_block,\n                'TK_END_BLOCK': handle_end_block,\n                'TK_WORD': handle_word,\n                'TK_RESERVED': handle_word,\n                'TK_SEMICOLON': handle_semicolon,\n                'TK_STRING': handle_string,\n                'TK_EQUALS': handle_equals,\n                'TK_OPERATOR': handle_operator,\n                'TK_COMMA': handle_comma,\n                'TK_BLOCK_COMMENT': handle_block_comment,\n                'TK_COMMENT': handle_comment,\n                'TK_DOT': handle_dot,\n                'TK_UNKNOWN': handle_unknown,\n                'TK_EOF': handle_eof\n            };\n\n            function create_flags(flags_base, mode) {\n                var next_indent_level = 0;\n                if (flags_base) {\n                    next_indent_level = flags_base.indentation_level;\n                    if (!output.just_added_newline() &&\n                        flags_base.line_indent_level > next_indent_level) {\n                        next_indent_level = flags_base.line_indent_level;\n                    }\n                }\n\n                var next_flags = {\n                    mode: mode,\n                    parent: flags_base,\n                    last_text: flags_base ? flags_base.last_text : '', // last token text\n                    last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed\n                    declaration_statement: false,\n                    declaration_assignment: false,\n                    multiline_frame: false,\n                    inline_frame: false,\n                    if_block: false,\n                    else_block: false,\n                    do_block: false,\n                    do_while: false,\n                    import_block: false,\n                    in_case_statement: false, // switch(..){ INSIDE HERE }\n                    in_case: false, // we're on the exact line with \"case 0:\"\n                    case_body: false, // the indented case-action block\n                    indentation_level: next_indent_level,\n                    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n                    start_line_index: output.get_line_number(),\n                    ternary_depth: 0\n                };\n                return next_flags;\n            }\n\n            // Some interpreters have unexpected results with foo = baz || bar;\n            options = options ? options : {};\n            opt = {};\n\n            // compatibility\n            if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option\n                opt.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n            }\n            opt.brace_style = options.brace_style ? options.brace_style : (opt.brace_style ? opt.brace_style : \"collapse\");\n\n            // graceful handling of deprecated option\n            if (opt.brace_style === \"expand-strict\") {\n                opt.brace_style = \"expand\";\n            }\n\n            opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n            opt.indent_char = options.indent_char ? options.indent_char : ' ';\n            opt.eol = options.eol ? options.eol : 'auto';\n            opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n            opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;\n            opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);\n            opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;\n            opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;\n            opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;\n            opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;\n            opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;\n            opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;\n            opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;\n            opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);\n            opt.e4x = (options.e4x === undefined) ? false : options.e4x;\n            opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n            opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;\n            opt.operator_position = sanitizeOperatorPosition(options.operator_position);\n\n            // For testing of beautify ignore:start directive\n            opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;\n\n            // force opt.space_after_anon_function to true if opt.jslint_happy\n            if (opt.jslint_happy) {\n                opt.space_after_anon_function = true;\n            }\n\n            if (options.indent_with_tabs) {\n                opt.indent_char = '\\t';\n                opt.indent_size = 1;\n            }\n\n            if (opt.eol === 'auto') {\n                opt.eol = '\\n';\n                if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {\n                    opt.eol = js_source_text.match(acorn.lineBreak)[0];\n                }\n            }\n\n            opt.eol = opt.eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n            //----------------------------------\n            indent_string = '';\n            while (opt.indent_size > 0) {\n                indent_string += opt.indent_char;\n                opt.indent_size -= 1;\n            }\n\n            var preindent_index = 0;\n            if (js_source_text && js_source_text.length) {\n                while ((js_source_text.charAt(preindent_index) === ' ' ||\n                        js_source_text.charAt(preindent_index) === '\\t')) {\n                    baseIndentString += js_source_text.charAt(preindent_index);\n                    preindent_index += 1;\n                }\n                js_source_text = js_source_text.substring(preindent_index);\n            }\n\n            last_type = 'TK_START_BLOCK'; // last token type\n            last_last_text = ''; // pre-last token text\n            output = new Output(indent_string, baseIndentString);\n\n            // If testing the ignore directive, start with output disable set to true\n            output.raw = opt.test_output_raw;\n\n\n            // Stack of parsing/formatting states, including MODE.\n            // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n            // and formatted output.  This makes the beautifier less accurate than full parsers\n            // but also far more tolerant of syntax errors.\n            //\n            // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n            // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n            // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n            // most full parsers would die, but the beautifier gracefully falls back to\n            // MODE.BlockStatement and continues on.\n            flag_store = [];\n            set_mode(MODE.BlockStatement);\n\n            this.beautify = function() {\n\n                /*jshint onevar:true */\n                var local_token, sweet_code;\n                Tokenizer = new tokenizer(js_source_text, opt, indent_string);\n                tokens = Tokenizer.tokenize();\n                token_pos = 0;\n\n                function get_local_token() {\n                    local_token = get_token();\n                    return local_token;\n                }\n\n                while (get_local_token()) {\n                    for (var i = 0; i < local_token.comments_before.length; i++) {\n                        // The cleanest handling of inline comments is to treat them as though they aren't there.\n                        // Just continue formatting and the behavior should be logical.\n                        // Also ignore unknown tokens.  Again, this should result in better behavior.\n                        handle_token(local_token.comments_before[i]);\n                    }\n                    handle_token(local_token);\n\n                    last_last_text = flags.last_text;\n                    last_type = local_token.type;\n                    flags.last_text = local_token.text;\n\n                    token_pos += 1;\n                }\n\n                sweet_code = output.get_code();\n                if (opt.end_with_newline) {\n                    sweet_code += '\\n';\n                }\n\n                if (opt.eol !== '\\n') {\n                    sweet_code = sweet_code.replace(/[\\n]/g, opt.eol);\n                }\n\n                return sweet_code;\n            };\n\n            function handle_token(local_token) {\n                var newlines = local_token.newlines;\n                var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);\n\n                if (keep_whitespace) {\n                    for (var i = 0; i < newlines; i += 1) {\n                        print_newline(i > 0);\n                    }\n                } else {\n                    if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {\n                        newlines = opt.max_preserve_newlines;\n                    }\n\n                    if (opt.preserve_newlines) {\n                        if (local_token.newlines > 1) {\n                            print_newline();\n                            for (var j = 1; j < newlines; j += 1) {\n                                print_newline(true);\n                            }\n                        }\n                    }\n                }\n\n                current_token = local_token;\n                handlers[current_token.type]();\n            }\n\n            // we could use just string.split, but\n            // IE doesn't like returning empty strings\n            function split_linebreaks(s) {\n                //return s.split(/\\x0d\\x0a|\\x0a/);\n\n                s = s.replace(acorn.allLineBreaks, '\\n');\n                var out = [],\n                    idx = s.indexOf(\"\\n\");\n                while (idx !== -1) {\n                    out.push(s.substring(0, idx));\n                    s = s.substring(idx + 1);\n                    idx = s.indexOf(\"\\n\");\n                }\n                if (s.length) {\n                    out.push(s);\n                }\n                return out;\n            }\n\n            var newline_restricted_tokens = ['break', 'contiue', 'return', 'throw'];\n\n            function allow_wrap_or_preserved_newline(force_linewrap) {\n                force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;\n\n                // Never wrap the first token on a line\n                if (output.just_added_newline()) {\n                    return;\n                }\n\n                var shouldPreserveOrForce = (opt.preserve_newlines && current_token.wanted_newline) || force_linewrap;\n                var operatorLogicApplies = in_array(flags.last_text, Tokenizer.positionable_operators) || in_array(current_token.text, Tokenizer.positionable_operators);\n\n                if (operatorLogicApplies) {\n                    var shouldPrintOperatorNewline = (\n                            in_array(flags.last_text, Tokenizer.positionable_operators) &&\n                            in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)\n                        ) ||\n                        in_array(current_token.text, Tokenizer.positionable_operators);\n                    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;\n                }\n\n                if (shouldPreserveOrForce) {\n                    print_newline(false, true);\n                } else if (opt.wrap_line_length) {\n                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {\n                        // These tokens should never have a newline inserted\n                        // between them and the following expression.\n                        return;\n                    }\n                    var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +\n                        (output.space_before_token ? 1 : 0);\n                    if (proposed_line_length >= opt.wrap_line_length) {\n                        print_newline(false, true);\n                    }\n                }\n            }\n\n            function print_newline(force_newline, preserve_statement_flags) {\n                if (!preserve_statement_flags) {\n                    if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {\n                        while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {\n                            restore_mode();\n                        }\n                    }\n                }\n\n                if (output.add_new_line(force_newline)) {\n                    flags.multiline_frame = true;\n                }\n            }\n\n            function print_token_line_indentation() {\n                if (output.just_added_newline()) {\n                    if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {\n                        output.current_line.push(current_token.whitespace_before);\n                        output.space_before_token = false;\n                    } else if (output.set_indent(flags.indentation_level)) {\n                        flags.line_indent_level = flags.indentation_level;\n                    }\n                }\n            }\n\n            function print_token(printable_token) {\n                if (output.raw) {\n                    output.add_raw_token(current_token);\n                    return;\n                }\n\n                if (opt.comma_first && last_type === 'TK_COMMA' &&\n                    output.just_added_newline()) {\n                    if (output.previous_line.last() === ',') {\n                        var popped = output.previous_line.pop();\n                        // if the comma was already at the start of the line,\n                        // pull back onto that line and reprint the indentation\n                        if (output.previous_line.is_empty()) {\n                            output.previous_line.push(popped);\n                            output.trim(true);\n                            output.current_line.pop();\n                            output.trim();\n                        }\n\n                        // add the comma in front of the next token\n                        print_token_line_indentation();\n                        output.add_token(',');\n                        output.space_before_token = true;\n                    }\n                }\n\n                printable_token = printable_token || current_token.text;\n                print_token_line_indentation();\n                output.add_token(printable_token);\n            }\n\n            function indent() {\n                flags.indentation_level += 1;\n            }\n\n            function deindent() {\n                if (flags.indentation_level > 0 &&\n                    ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {\n                    flags.indentation_level -= 1;\n\n                }\n            }\n\n            function set_mode(mode) {\n                if (flags) {\n                    flag_store.push(flags);\n                    previous_flags = flags;\n                } else {\n                    previous_flags = create_flags(null, mode);\n                }\n\n                flags = create_flags(previous_flags, mode);\n            }\n\n            function is_array(mode) {\n                return mode === MODE.ArrayLiteral;\n            }\n\n            function is_expression(mode) {\n                return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);\n            }\n\n            function restore_mode() {\n                if (flag_store.length > 0) {\n                    previous_flags = flags;\n                    flags = flag_store.pop();\n                    if (previous_flags.mode === MODE.Statement) {\n                        output.remove_redundant_indentation(previous_flags);\n                    }\n                }\n            }\n\n            function start_of_object_property() {\n                return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (\n                    (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));\n            }\n\n            function start_of_statement() {\n                if (\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||\n                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw']) && !current_token.wanted_newline) ||\n                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' && !(current_token.type === 'TK_RESERVED' && current_token.text === 'if')) ||\n                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||\n                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement &&\n                        !flags.in_case &&\n                        !(current_token.text === '--' || current_token.text === '++') &&\n                        last_last_text !== 'function' &&\n                        current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||\n                    (flags.mode === MODE.ObjectLiteral && (\n                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))\n                ) {\n\n                    set_mode(MODE.Statement);\n                    indent();\n\n                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {\n                        flags.declaration_statement = true;\n                    }\n\n                    // Issue #276:\n                    // If starting a new statement with [if, for, while, do], push to a new line.\n                    // if (a) if (b) if(c) d(); else e(); else f();\n                    if (!start_of_object_property()) {\n                        allow_wrap_or_preserved_newline(\n                            current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));\n                    }\n\n                    return true;\n                }\n                return false;\n            }\n\n            function all_lines_start_with(lines, c) {\n                for (var i = 0; i < lines.length; i++) {\n                    var line = trim(lines[i]);\n                    if (line.charAt(0) !== c) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n            function each_line_matches_indent(lines, indent) {\n                var i = 0,\n                    len = lines.length,\n                    line;\n                for (; i < len; i++) {\n                    line = lines[i];\n                    // allow empty lines to pass through\n                    if (line && line.indexOf(indent) !== 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n            function is_special_word(word) {\n                return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);\n            }\n\n            function get_token(offset) {\n                var index = token_pos + (offset || 0);\n                return (index < 0 || index >= tokens.length) ? null : tokens[index];\n            }\n\n            function handle_start_expr() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                }\n\n                var next_mode = MODE.Expression;\n                if (current_token.text === '[') {\n\n                    if (last_type === 'TK_WORD' || flags.last_text === ')') {\n                        // this is array index specifier, break immediately\n                        // a[x], fn()[x]\n                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {\n                            output.space_before_token = true;\n                        }\n                        set_mode(next_mode);\n                        print_token();\n                        indent();\n                        if (opt.space_in_paren) {\n                            output.space_before_token = true;\n                        }\n                        return;\n                    }\n\n                    next_mode = MODE.ArrayLiteral;\n                    if (is_array(flags.mode)) {\n                        if (flags.last_text === '[' ||\n                            (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {\n                            // ], [ goes to new line\n                            // }, [ goes to new line\n                            if (!opt.keep_array_indentation) {\n                                print_newline();\n                            }\n                        }\n                    }\n\n                } else {\n                    if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {\n                        next_mode = MODE.ForInitializer;\n                    } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {\n                        next_mode = MODE.Conditional;\n                    } else {\n                        // next_mode = MODE.Expression;\n                    }\n                }\n\n                if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {\n                    print_newline();\n                } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {\n                    // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n                    allow_wrap_or_preserved_newline(current_token.wanted_newline);\n                    // do nothing on (( and )( and ][ and ]( and .(\n                } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {\n                    output.space_before_token = true;\n                } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||\n                    (flags.last_text === '*' && last_last_text === 'function')) {\n                    // function() vs function ()\n                    if (opt.space_after_anon_function) {\n                        output.space_before_token = true;\n                    }\n                } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {\n                    if (opt.space_before_conditional) {\n                        output.space_before_token = true;\n                    }\n                }\n\n                // Should be a space between await and an IIFE\n                if (current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await') {\n                    output.space_before_token = true;\n                }\n\n                // Support of this kind of newline preservation.\n                // a = (b &&\n                //     (c || d));\n                if (current_token.text === '(') {\n                    if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                        if (!start_of_object_property()) {\n                            allow_wrap_or_preserved_newline();\n                        }\n                    }\n                }\n\n                // Support preserving wrapped arrow function expressions\n                // a.b('c',\n                //     () => d.e\n                // )\n                if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {\n                    allow_wrap_or_preserved_newline();\n                }\n\n                set_mode(next_mode);\n                print_token();\n                if (opt.space_in_paren) {\n                    output.space_before_token = true;\n                }\n\n                // In all cases, if we newline while inside an expression it should be indented.\n                indent();\n            }\n\n            function handle_end_expr() {\n                // statements inside expressions are not valid syntax, but...\n                // statements must all be closed when their container closes\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n\n                if (flags.multiline_frame) {\n                    allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);\n                }\n\n                if (opt.space_in_paren) {\n                    if (last_type === 'TK_START_EXPR' && !opt.space_in_empty_paren) {\n                        // () [] no inner space in empty parens like these, ever, ref #320\n                        output.trim();\n                        output.space_before_token = false;\n                    } else {\n                        output.space_before_token = true;\n                    }\n                }\n                if (current_token.text === ']' && opt.keep_array_indentation) {\n                    print_token();\n                    restore_mode();\n                } else {\n                    restore_mode();\n                    print_token();\n                }\n                output.remove_redundant_indentation(previous_flags);\n\n                // do {} while () // no statement required after\n                if (flags.do_while && previous_flags.mode === MODE.Conditional) {\n                    previous_flags.mode = MODE.Expression;\n                    flags.do_block = false;\n                    flags.do_while = false;\n\n                }\n            }\n\n            function handle_start_block() {\n                // Check if this is should be treated as a ObjectLiteral\n                var next_token = get_token(1);\n                var second_token = get_token(2);\n                if (second_token && (\n                        (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED'])) ||\n                        (in_array(next_token.text, ['get', 'set']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))\n                    )) {\n                    // We don't support TypeScript,but we didn't break it for a very long time.\n                    // We'll try to keep not breaking it.\n                    if (!in_array(last_last_text, ['class', 'interface'])) {\n                        set_mode(MODE.ObjectLiteral);\n                    } else {\n                        set_mode(MODE.BlockStatement);\n                    }\n                } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {\n                    // arrow function: (param1, paramN) => { statements }\n                    set_mode(MODE.BlockStatement);\n                } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||\n                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import']))\n                ) {\n                    // Detecting shorthand function syntax is difficult by scanning forward,\n                    //     so check the surrounding context.\n                    // If the block is being returned, imported, passed as arg,\n                    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.\n                    set_mode(MODE.ObjectLiteral);\n                } else {\n                    set_mode(MODE.BlockStatement);\n                }\n\n                var empty_braces = !next_token.comments_before.length && next_token.text === '}';\n                var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&\n                    last_type === 'TK_END_EXPR';\n\n\n                if (opt.brace_style === \"expand\" ||\n                    (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n                    if (last_type !== 'TK_OPERATOR' &&\n                        (empty_anonymous_function ||\n                            last_type === 'TK_EQUALS' ||\n                            (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {\n                        output.space_before_token = true;\n                    } else {\n                        print_newline(false, true);\n                    }\n                } else { // collapse\n                    if (opt.brace_style === 'collapse-preserve-inline') {\n                        // search forward for a newline wanted inside this block\n                        var index = 0;\n                        var check_token = null;\n                        flags.inline_frame = true;\n                        do {\n                            index += 1;\n                            check_token = get_token(index);\n                            if (check_token.wanted_newline) {\n                                flags.inline_frame = false;\n                                break;\n                            }\n                        } while (check_token.type !== 'TK_EOF' &&\n                            !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token));\n                    }\n\n                    if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {\n                        // if we're preserving inline,\n                        // allow newline between comma and next brace.\n                        if (last_type === 'TK_COMMA' || opt.space_in_paren) {\n                            output.space_before_token = true;\n                        }\n\n                        if (opt.brace_style === 'collapse-preserve-inline' &&\n                            (last_type === 'TK_COMMA' || (last_type === 'TK_START_EXPR' && flags.inline_frame))) {\n                            allow_wrap_or_preserved_newline();\n                            previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;\n                            flags.multiline_frame = false;\n                        }\n                    } else if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {\n                        if (last_type === 'TK_START_BLOCK') {\n                            print_newline();\n                        } else {\n                            output.space_before_token = true;\n                        }\n                    }\n                }\n                print_token();\n                indent();\n            }\n\n            function handle_end_block() {\n                // statements must all be closed when their container closes\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n                var empty_braces = last_type === 'TK_START_BLOCK';\n\n                if (opt.brace_style === \"expand\") {\n                    if (!empty_braces) {\n                        print_newline();\n                    }\n                } else {\n                    // skip {}\n                    if (!empty_braces) {\n                        if (flags.inline_frame) {\n                            output.space_before_token = true;\n                        } else if (is_array(flags.mode) && opt.keep_array_indentation) {\n                            // we REALLY need a newline here, but newliner would skip that\n                            opt.keep_array_indentation = false;\n                            print_newline();\n                            opt.keep_array_indentation = true;\n\n                        } else {\n                            print_newline();\n                        }\n                    }\n                }\n                restore_mode();\n                print_token();\n            }\n\n            function handle_word() {\n                if (current_token.type === 'TK_RESERVED') {\n                    if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {\n                        current_token.type = 'TK_WORD';\n                    } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {\n                        current_token.type = 'TK_WORD';\n                    } else if (flags.mode === MODE.ObjectLiteral) {\n                        var next_token = get_token(1);\n                        if (next_token.text === ':') {\n                            current_token.type = 'TK_WORD';\n                        }\n                    }\n                }\n\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                } else if (current_token.wanted_newline && !is_expression(flags.mode) &&\n                    (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&\n                    last_type !== 'TK_EQUALS' &&\n                    (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {\n\n                    print_newline();\n                }\n\n                if (flags.do_block && !flags.do_while) {\n                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {\n                        // do {} ## while ()\n                        output.space_before_token = true;\n                        print_token();\n                        output.space_before_token = true;\n                        flags.do_while = true;\n                        return;\n                    } else {\n                        // do {} should always have while as the next word.\n                        // if we don't see the expected while, recover\n                        print_newline();\n                        flags.do_block = false;\n                    }\n                }\n\n                // if may be followed by else, or not\n                // Bare/inline ifs are tricky\n                // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n                if (flags.if_block) {\n                    if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {\n                        flags.else_block = true;\n                    } else {\n                        while (flags.mode === MODE.Statement) {\n                            restore_mode();\n                        }\n                        flags.if_block = false;\n                        flags.else_block = false;\n                    }\n                }\n\n                if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {\n                    print_newline();\n                    if (flags.case_body || opt.jslint_happy) {\n                        // switch cases following one another\n                        deindent();\n                        flags.case_body = false;\n                    }\n                    print_token();\n                    flags.in_case = true;\n                    flags.in_case_statement = true;\n                    return;\n                }\n\n                if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {\n                    if (in_array(flags.last_text, ['}', ';']) || (output.just_added_newline() && !in_array(flags.last_text, ['[', '{', ':', '=', ',']))) {\n                        // make sure there is a nice clean space of at least one blank line\n                        // before a new function definition\n                        if (!output.just_added_blankline() && !current_token.comments_before.length) {\n                            print_newline();\n                            print_newline(true);\n                        }\n                    }\n                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {\n                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {\n                            output.space_before_token = true;\n                        } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {\n                            output.space_before_token = true;\n                        } else {\n                            print_newline();\n                        }\n                    } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {\n                        // foo = function\n                        output.space_before_token = true;\n                    } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {\n                        // (function\n                    } else {\n                        print_newline();\n                    }\n                }\n\n                if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                    if (!start_of_object_property()) {\n                        allow_wrap_or_preserved_newline();\n                    }\n                }\n\n                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['function', 'get', 'set'])) {\n                    print_token();\n                    flags.last_word = current_token.text;\n                    return;\n                }\n\n                prefix = 'NONE';\n\n                if (last_type === 'TK_END_BLOCK') {\n\n                    if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {\n                        prefix = 'NEWLINE';\n                    } else {\n                        if (opt.brace_style === \"expand\" ||\n                            opt.brace_style === \"end-expand\" ||\n                            (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n                            prefix = 'NEWLINE';\n                        } else {\n                            prefix = 'SPACE';\n                            output.space_before_token = true;\n                        }\n                    }\n                } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {\n                    // TODO: Should this be for STATEMENT as well?\n                    prefix = 'NEWLINE';\n                } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {\n                    prefix = 'SPACE';\n                } else if (last_type === 'TK_STRING') {\n                    prefix = 'NEWLINE';\n                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||\n                    (flags.last_text === '*' && last_last_text === 'function')) {\n                    prefix = 'SPACE';\n                } else if (last_type === 'TK_START_BLOCK') {\n                    if (flags.inline_frame) {\n                        prefix = 'SPACE';\n                    } else {\n                        prefix = 'NEWLINE';\n                    }\n                } else if (last_type === 'TK_END_EXPR') {\n                    output.space_before_token = true;\n                    prefix = 'NEWLINE';\n                }\n\n                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n                    if (flags.last_text === 'else' || flags.last_text === 'export') {\n                        prefix = 'SPACE';\n                    } else {\n                        prefix = 'NEWLINE';\n                    }\n\n                }\n\n                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {\n                    if (!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||\n                        opt.brace_style === \"expand\" ||\n                        opt.brace_style === \"end-expand\" ||\n                        (opt.brace_style === \"none\" && current_token.wanted_newline)) {\n                        print_newline();\n                    } else {\n                        output.trim(true);\n                        var line = output.current_line;\n                        // If we trimmed and there's something other than a close block before us\n                        // put a newline back in.  Handles '} // comment' scenario.\n                        if (line.last() !== '}') {\n                            print_newline();\n                        }\n                        output.space_before_token = true;\n                    }\n                } else if (prefix === 'NEWLINE') {\n                    if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                        // no newline between 'return nnn'\n                        output.space_before_token = true;\n                    } else if (last_type !== 'TK_END_EXPR') {\n                        if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {\n                            // no need to force newline on 'var': for (var x = 0...)\n                            if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {\n                                // no newline for } else if {\n                                output.space_before_token = true;\n                            } else {\n                                print_newline();\n                            }\n                        }\n                    } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {\n                        print_newline();\n                    }\n                } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {\n                    print_newline(); // }, in lists get a newline treatment\n                } else if (prefix === 'SPACE') {\n                    output.space_before_token = true;\n                }\n                print_token();\n                flags.last_word = current_token.text;\n\n                if (current_token.type === 'TK_RESERVED') {\n                    if (current_token.text === 'do') {\n                        flags.do_block = true;\n                    } else if (current_token.text === 'if') {\n                        flags.if_block = true;\n                    } else if (current_token.text === 'import') {\n                        flags.import_block = true;\n                    } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {\n                        flags.import_block = false;\n                    }\n                }\n            }\n\n            function handle_semicolon() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                    // Semicolon can be the start (and end) of a statement\n                    output.space_before_token = false;\n                }\n                while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {\n                    restore_mode();\n                }\n\n                // hacky but effective for the moment\n                if (flags.import_block) {\n                    flags.import_block = false;\n                }\n                print_token();\n            }\n\n            function handle_string() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                    // One difference - strings want at least a space before\n                    output.space_before_token = true;\n                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {\n                    output.space_before_token = true;\n                } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {\n                    if (!start_of_object_property()) {\n                        allow_wrap_or_preserved_newline();\n                    }\n                } else {\n                    print_newline();\n                }\n                print_token();\n            }\n\n            function handle_equals() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                }\n\n                if (flags.declaration_statement) {\n                    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n                    flags.declaration_assignment = true;\n                }\n                output.space_before_token = true;\n                print_token();\n                output.space_before_token = true;\n            }\n\n            function handle_comma() {\n                print_token();\n                output.space_before_token = true;\n                if (flags.declaration_statement) {\n                    if (is_expression(flags.parent.mode)) {\n                        // do not break on comma, for(var a = 1, b = 2)\n                        flags.declaration_assignment = false;\n                    }\n\n                    if (flags.declaration_assignment) {\n                        flags.declaration_assignment = false;\n                        print_newline(false, true);\n                    } else if (opt.comma_first) {\n                        // for comma-first, we want to allow a newline before the comma\n                        // to turn into a newline after the comma, which we will fixup later\n                        allow_wrap_or_preserved_newline();\n                    }\n                } else if (flags.mode === MODE.ObjectLiteral ||\n                    (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {\n                    if (flags.mode === MODE.Statement) {\n                        restore_mode();\n                    }\n\n                    if (!flags.inline_frame) {\n                        print_newline();\n                    }\n                } else if (opt.comma_first) {\n                    // EXPR or DO_BLOCK\n                    // for comma-first, we want to allow a newline before the comma\n                    // to turn into a newline after the comma, which we will fixup later\n                    allow_wrap_or_preserved_newline();\n                }\n            }\n\n            function handle_operator() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                }\n\n                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                    // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n                    output.space_before_token = true;\n                    print_token();\n                    return;\n                }\n\n                // hack for actionscript's import .*;\n                if (current_token.text === '*' && last_type === 'TK_DOT') {\n                    print_token();\n                    return;\n                }\n\n                if (current_token.text === '::') {\n                    // no spaces around exotic namespacing syntax operator\n                    print_token();\n                    return;\n                }\n\n                // Allow line wrapping between operators when operator_position is\n                //   set to before or preserve\n                if (last_type === 'TK_OPERATOR' && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {\n                    allow_wrap_or_preserved_newline();\n                }\n\n                if (current_token.text === ':' && flags.in_case) {\n                    flags.case_body = true;\n                    indent();\n                    print_token();\n                    print_newline();\n                    flags.in_case = false;\n                    return;\n                }\n\n                var space_before = true;\n                var space_after = true;\n                var in_ternary = false;\n                var isGeneratorAsterisk = current_token.text === '*' && last_type === 'TK_RESERVED' && flags.last_text === 'function';\n                var isUnary = in_array(current_token.text, ['-', '+']) && (\n                    in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) ||\n                    in_array(flags.last_text, Tokenizer.line_starters) ||\n                    flags.last_text === ','\n                );\n\n                if (current_token.text === ':') {\n                    if (flags.ternary_depth === 0) {\n                        // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.\n                        space_before = false;\n                    } else {\n                        flags.ternary_depth -= 1;\n                        in_ternary = true;\n                    }\n                } else if (current_token.text === '?') {\n                    flags.ternary_depth += 1;\n                }\n\n                // let's handle the operator_position option prior to any conflicting logic\n                if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, Tokenizer.positionable_operators)) {\n                    var isColon = current_token.text === ':';\n                    var isTernaryColon = (isColon && in_ternary);\n                    var isOtherColon = (isColon && !in_ternary);\n\n                    switch (opt.operator_position) {\n                        case OPERATOR_POSITION.before_newline:\n                            // if the current token is : and it's not a ternary statement then we set space_before to false\n                            output.space_before_token = !isOtherColon;\n\n                            print_token();\n\n                            if (!isColon || isTernaryColon) {\n                                allow_wrap_or_preserved_newline();\n                            }\n\n                            output.space_before_token = true;\n                            return;\n\n                        case OPERATOR_POSITION.after_newline:\n                            // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,\n                            //   then print a newline.\n\n                            output.space_before_token = true;\n\n                            if (!isColon || isTernaryColon) {\n                                if (get_token(1).wanted_newline) {\n                                    print_newline(false, true);\n                                } else {\n                                    allow_wrap_or_preserved_newline();\n                                }\n                            } else {\n                                output.space_before_token = false;\n                            }\n\n                            print_token();\n\n                            output.space_before_token = true;\n                            return;\n\n                        case OPERATOR_POSITION.preserve_newline:\n                            if (!isOtherColon) {\n                                allow_wrap_or_preserved_newline();\n                            }\n\n                            // if we just added a newline, or the current token is : and it's not a ternary statement,\n                            //   then we set space_before to false\n                            space_before = !(output.just_added_newline() || isOtherColon);\n\n                            output.space_before_token = space_before;\n                            print_token();\n                            output.space_before_token = true;\n                            return;\n                    }\n                }\n\n                if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {\n                    // unary operators (and binary +/- pretending to be unary) special cases\n\n                    space_before = false;\n                    space_after = false;\n\n                    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n                    // if there is a newline between -- or ++ and anything else we should preserve it.\n                    if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {\n                        print_newline(false, true);\n                    }\n\n                    if (flags.last_text === ';' && is_expression(flags.mode)) {\n                        // for (;; ++i)\n                        //        ^^^\n                        space_before = true;\n                    }\n\n                    if (last_type === 'TK_RESERVED') {\n                        space_before = true;\n                    } else if (last_type === 'TK_END_EXPR') {\n                        space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));\n                    } else if (last_type === 'TK_OPERATOR') {\n                        // a++ + ++b;\n                        // a - -b\n                        space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);\n                        // + and - are not unary when preceeded by -- or ++ operator\n                        // a-- + b\n                        // a * +b\n                        // a - -b\n                        if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {\n                            space_after = true;\n                        }\n                    }\n\n\n                    if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&\n                        (flags.last_text === '{' || flags.last_text === ';')) {\n                        // { foo; --i }\n                        // foo(); --bar;\n                        print_newline();\n                    }\n                } else if (isGeneratorAsterisk) {\n                    space_before = false;\n                    space_after = false;\n                }\n                output.space_before_token = output.space_before_token || space_before;\n                print_token();\n                output.space_before_token = space_after;\n            }\n\n            function handle_block_comment() {\n                if (output.raw) {\n                    output.add_raw_token(current_token);\n                    if (current_token.directives && current_token.directives.preserve === 'end') {\n                        // If we're testing the raw output behavior, do not allow a directive to turn it off.\n                        output.raw = opt.test_output_raw;\n                    }\n                    return;\n                }\n\n                if (current_token.directives) {\n                    print_newline(false, true);\n                    print_token();\n                    if (current_token.directives.preserve === 'start') {\n                        output.raw = true;\n                    }\n                    print_newline(false, true);\n                    return;\n                }\n\n                // inline block\n                if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {\n                    output.space_before_token = true;\n                    print_token();\n                    output.space_before_token = true;\n                    return;\n                }\n\n                var lines = split_linebreaks(current_token.text);\n                var j; // iterator for this case\n                var javadoc = false;\n                var starless = false;\n                var lastIndent = current_token.whitespace_before;\n                var lastIndentLength = lastIndent.length;\n\n                // block comment starts with a new line\n                print_newline(false, true);\n                if (lines.length > 1) {\n                    javadoc = all_lines_start_with(lines.slice(1), '*');\n                    starless = each_line_matches_indent(lines.slice(1), lastIndent);\n                }\n\n                // first line always indented\n                print_token(lines[0]);\n                for (j = 1; j < lines.length; j++) {\n                    print_newline(false, true);\n                    if (javadoc) {\n                        // javadoc: reformat and re-indent\n                        print_token(' ' + ltrim(lines[j]));\n                    } else if (starless && lines[j].length > lastIndentLength) {\n                        // starless: re-indent non-empty content, avoiding trim\n                        print_token(lines[j].substring(lastIndentLength));\n                    } else {\n                        // normal comments output raw\n                        output.add_token(lines[j]);\n                    }\n                }\n\n                // for comments of more than one line, make sure there's a new line after\n                print_newline(false, true);\n            }\n\n            function handle_comment() {\n                if (current_token.wanted_newline) {\n                    print_newline(false, true);\n                } else {\n                    output.trim(true);\n                }\n\n                output.space_before_token = true;\n                print_token();\n                print_newline(false, true);\n            }\n\n            function handle_dot() {\n                if (start_of_statement()) {\n                    // The conditional starts the statement if appropriate.\n                }\n\n                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {\n                    output.space_before_token = true;\n                } else {\n                    // allow preserved newlines before dots in general\n                    // force newlines on dots after close paren when break_chained - for bar().baz()\n                    allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);\n                }\n\n                print_token();\n            }\n\n            function handle_unknown() {\n                print_token();\n\n                if (current_token.text[current_token.text.length - 1] === '\\n') {\n                    print_newline();\n                }\n            }\n\n            function handle_eof() {\n                // Unwind any open statements\n                while (flags.mode === MODE.Statement) {\n                    restore_mode();\n                }\n            }\n        }\n\n\n        function OutputLine(parent) {\n            var _character_count = 0;\n            // use indent_count as a marker for lines that have preserved indentation\n            var _indent_count = -1;\n\n            var _items = [];\n            var _empty = true;\n\n            this.set_indent = function(level) {\n                _character_count = parent.baseIndentLength + level * parent.indent_length;\n                _indent_count = level;\n            };\n\n            this.get_character_count = function() {\n                return _character_count;\n            };\n\n            this.is_empty = function() {\n                return _empty;\n            };\n\n            this.last = function() {\n                if (!this._empty) {\n                    return _items[_items.length - 1];\n                } else {\n                    return null;\n                }\n            };\n\n            this.push = function(input) {\n                _items.push(input);\n                _character_count += input.length;\n                _empty = false;\n            };\n\n            this.pop = function() {\n                var item = null;\n                if (!_empty) {\n                    item = _items.pop();\n                    _character_count -= item.length;\n                    _empty = _items.length === 0;\n                }\n                return item;\n            };\n\n            this.remove_indent = function() {\n                if (_indent_count > 0) {\n                    _indent_count -= 1;\n                    _character_count -= parent.indent_length;\n                }\n            };\n\n            this.trim = function() {\n                while (this.last() === ' ') {\n                    _items.pop();\n                    _character_count -= 1;\n                }\n                _empty = _items.length === 0;\n            };\n\n            this.toString = function() {\n                var result = '';\n                if (!this._empty) {\n                    if (_indent_count >= 0) {\n                        result = parent.indent_cache[_indent_count];\n                    }\n                    result += _items.join('');\n                }\n                return result;\n            };\n        }\n\n        function Output(indent_string, baseIndentString) {\n            baseIndentString = baseIndentString || '';\n            this.indent_cache = [baseIndentString];\n            this.baseIndentLength = baseIndentString.length;\n            this.indent_length = indent_string.length;\n            this.raw = false;\n\n            var lines = [];\n            this.baseIndentString = baseIndentString;\n            this.indent_string = indent_string;\n            this.previous_line = null;\n            this.current_line = null;\n            this.space_before_token = false;\n\n            this.add_outputline = function() {\n                this.previous_line = this.current_line;\n                this.current_line = new OutputLine(this);\n                lines.push(this.current_line);\n            };\n\n            // initialize\n            this.add_outputline();\n\n\n            this.get_line_number = function() {\n                return lines.length;\n            };\n\n            // Using object instead of string to allow for later expansion of info about each line\n            this.add_new_line = function(force_newline) {\n                if (this.get_line_number() === 1 && this.just_added_newline()) {\n                    return false; // no newline on start of file\n                }\n\n                if (force_newline || !this.just_added_newline()) {\n                    if (!this.raw) {\n                        this.add_outputline();\n                    }\n                    return true;\n                }\n\n                return false;\n            };\n\n            this.get_code = function() {\n                var sweet_code = lines.join('\\n').replace(/[\\r\\n\\t ]+$/, '');\n                return sweet_code;\n            };\n\n            this.set_indent = function(level) {\n                // Never indent your first output indent at the start of the file\n                if (lines.length > 1) {\n                    while (level >= this.indent_cache.length) {\n                        this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);\n                    }\n\n                    this.current_line.set_indent(level);\n                    return true;\n                }\n                this.current_line.set_indent(0);\n                return false;\n            };\n\n            this.add_raw_token = function(token) {\n                for (var x = 0; x < token.newlines; x++) {\n                    this.add_outputline();\n                }\n                this.current_line.push(token.whitespace_before);\n                this.current_line.push(token.text);\n                this.space_before_token = false;\n            };\n\n            this.add_token = function(printable_token) {\n                this.add_space_before_token();\n                this.current_line.push(printable_token);\n            };\n\n            this.add_space_before_token = function() {\n                if (this.space_before_token && !this.just_added_newline()) {\n                    this.current_line.push(' ');\n                }\n                this.space_before_token = false;\n            };\n\n            this.remove_redundant_indentation = function(frame) {\n                // This implementation is effective but has some issues:\n                //     - can cause line wrap to happen too soon due to indent removal\n                //           after wrap points are calculated\n                // These issues are minor compared to ugly indentation.\n\n                if (frame.multiline_frame ||\n                    frame.mode === MODE.ForInitializer ||\n                    frame.mode === MODE.Conditional) {\n                    return;\n                }\n\n                // remove one indent from each line inside this section\n                var index = frame.start_line_index;\n\n                var output_length = lines.length;\n                while (index < output_length) {\n                    lines[index].remove_indent();\n                    index++;\n                }\n            };\n\n            this.trim = function(eat_newlines) {\n                eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n                this.current_line.trim(indent_string, baseIndentString);\n\n                while (eat_newlines && lines.length > 1 &&\n                    this.current_line.is_empty()) {\n                    lines.pop();\n                    this.current_line = lines[lines.length - 1];\n                    this.current_line.trim();\n                }\n\n                this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;\n            };\n\n            this.just_added_newline = function() {\n                return this.current_line.is_empty();\n            };\n\n            this.just_added_blankline = function() {\n                if (this.just_added_newline()) {\n                    if (lines.length === 1) {\n                        return true; // start of the file and newline = blank\n                    }\n\n                    var line = lines[lines.length - 2];\n                    return line.is_empty();\n                }\n                return false;\n            };\n        }\n\n\n        var Token = function(type, text, newlines, whitespace_before, parent) {\n            this.type = type;\n            this.text = text;\n            this.comments_before = [];\n            this.newlines = newlines || 0;\n            this.wanted_newline = newlines > 0;\n            this.whitespace_before = whitespace_before || '';\n            this.parent = parent || null;\n            this.opened = null;\n            this.directives = null;\n        };\n\n        function tokenizer(input, opts) {\n\n            var whitespace = \"\\n\\r\\t \".split('');\n            var digit = /[0-9]/;\n            var digit_bin = /[01]/;\n            var digit_oct = /[01234567]/;\n            var digit_hex = /[0123456789abcdefABCDEF]/;\n\n            this.positionable_operators = '!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');\n            var punct = this.positionable_operators.concat(\n                // non-positionable operators - these do not follow operator position settings\n                '! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~'.split(' '));\n\n            // words which should always start on new line.\n            this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');\n            var reserved_words = this.line_starters.concat(['do', 'in', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);\n\n            //  /* ... */ comment ends with nearest */ or end of file\n            var block_comment_pattern = /([\\s\\S]*?)((?:\\*\\/)|$)/g;\n\n            // comment ends just before nearest linefeed or end of file\n            var comment_pattern = /([^\\n\\r\\u2028\\u2029]*)/g;\n\n            var directives_block_pattern = /\\/\\* beautify( \\w+[:]\\w+)+ \\*\\//g;\n            var directive_pattern = / (\\w+)[:](\\w+)/g;\n            var directives_end_ignore_pattern = /([\\s\\S]*?)((?:\\/\\*\\sbeautify\\signore:end\\s\\*\\/)|$)/g;\n\n            var template_pattern = /((<\\?php|<\\?=)[\\s\\S]*?\\?>)|(<%[\\s\\S]*?%>)/g;\n\n            var n_newlines, whitespace_before_token, in_html_comment, tokens, parser_pos;\n            var input_length;\n\n            this.tokenize = function() {\n                // cache the source's length.\n                input_length = input.length;\n                parser_pos = 0;\n                in_html_comment = false;\n                tokens = [];\n\n                var next, last;\n                var token_values;\n                var open = null;\n                var open_stack = [];\n                var comments = [];\n\n                while (!(last && last.type === 'TK_EOF')) {\n                    token_values = tokenize_next();\n                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n                    while (next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {\n                        if (next.type === 'TK_BLOCK_COMMENT') {\n                            next.directives = token_values[2];\n                        }\n                        comments.push(next);\n                        token_values = tokenize_next();\n                        next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);\n                    }\n\n                    if (comments.length) {\n                        next.comments_before = comments;\n                        comments = [];\n                    }\n\n                    if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {\n                        next.parent = last;\n                        open_stack.push(open);\n                        open = next;\n                    } else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&\n                        (open && (\n                            (next.text === ']' && open.text === '[') ||\n                            (next.text === ')' && open.text === '(') ||\n                            (next.text === '}' && open.text === '{')))) {\n                        next.parent = open.parent;\n                        next.opened = open;\n\n                        open = open_stack.pop();\n                    }\n\n                    tokens.push(next);\n                    last = next;\n                }\n\n                return tokens;\n            };\n\n            function get_directives(text) {\n                if (!text.match(directives_block_pattern)) {\n                    return null;\n                }\n\n                var directives = {};\n                directive_pattern.lastIndex = 0;\n                var directive_match = directive_pattern.exec(text);\n\n                while (directive_match) {\n                    directives[directive_match[1]] = directive_match[2];\n                    directive_match = directive_pattern.exec(text);\n                }\n\n                return directives;\n            }\n\n            function tokenize_next() {\n                var resulting_string;\n                var whitespace_on_this_line = [];\n\n                n_newlines = 0;\n                whitespace_before_token = '';\n\n                if (parser_pos >= input_length) {\n                    return ['', 'TK_EOF'];\n                }\n\n                var last_token;\n                if (tokens.length) {\n                    last_token = tokens[tokens.length - 1];\n                } else {\n                    // For the sake of tokenizing we can pretend that there was on open brace to start\n                    last_token = new Token('TK_START_BLOCK', '{');\n                }\n\n\n                var c = input.charAt(parser_pos);\n                parser_pos += 1;\n\n                while (in_array(c, whitespace)) {\n\n                    if (acorn.newline.test(c)) {\n                        if (!(c === '\\n' && input.charAt(parser_pos - 2) === '\\r')) {\n                            n_newlines += 1;\n                            whitespace_on_this_line = [];\n                        }\n                    } else {\n                        whitespace_on_this_line.push(c);\n                    }\n\n                    if (parser_pos >= input_length) {\n                        return ['', 'TK_EOF'];\n                    }\n\n                    c = input.charAt(parser_pos);\n                    parser_pos += 1;\n                }\n\n                if (whitespace_on_this_line.length) {\n                    whitespace_before_token = whitespace_on_this_line.join('');\n                }\n\n                if (digit.test(c) || (c === '.' && digit.test(input.charAt(parser_pos)))) {\n                    var allow_decimal = true;\n                    var allow_e = true;\n                    var local_digit = digit;\n\n                    if (c === '0' && parser_pos < input_length && /[XxOoBb]/.test(input.charAt(parser_pos))) {\n                        // switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits\n                        allow_decimal = false;\n                        allow_e = false;\n                        if (/[Bb]/.test(input.charAt(parser_pos))) {\n                            local_digit = digit_bin;\n                        } else if (/[Oo]/.test(input.charAt(parser_pos))) {\n                            local_digit = digit_oct;\n                        } else {\n                            local_digit = digit_hex;\n                        }\n                        c += input.charAt(parser_pos);\n                        parser_pos += 1;\n                    } else if (c === '.') {\n                        // Already have a decimal for this literal, don't allow another\n                        allow_decimal = false;\n                    } else {\n                        // we know this first loop will run.  It keeps the logic simpler.\n                        c = '';\n                        parser_pos -= 1;\n                    }\n\n                    // Add the digits\n                    while (parser_pos < input_length && local_digit.test(input.charAt(parser_pos))) {\n                        c += input.charAt(parser_pos);\n                        parser_pos += 1;\n\n                        if (allow_decimal && parser_pos < input_length && input.charAt(parser_pos) === '.') {\n                            c += input.charAt(parser_pos);\n                            parser_pos += 1;\n                            allow_decimal = false;\n                        } else if (allow_e && parser_pos < input_length && /[Ee]/.test(input.charAt(parser_pos))) {\n                            c += input.charAt(parser_pos);\n                            parser_pos += 1;\n\n                            if (parser_pos < input_length && /[+-]/.test(input.charAt(parser_pos))) {\n                                c += input.charAt(parser_pos);\n                                parser_pos += 1;\n                            }\n\n                            allow_e = false;\n                            allow_decimal = false;\n                        }\n                    }\n\n                    return [c, 'TK_WORD'];\n                }\n\n                if (acorn.isIdentifierStart(input.charCodeAt(parser_pos - 1))) {\n                    if (parser_pos < input_length) {\n                        while (acorn.isIdentifierChar(input.charCodeAt(parser_pos))) {\n                            c += input.charAt(parser_pos);\n                            parser_pos += 1;\n                            if (parser_pos === input_length) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!(last_token.type === 'TK_DOT' ||\n                            (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get']))) &&\n                        in_array(c, reserved_words)) {\n                        if (c === 'in') { // hack for 'in' operator\n                            return [c, 'TK_OPERATOR'];\n                        }\n                        return [c, 'TK_RESERVED'];\n                    }\n\n                    return [c, 'TK_WORD'];\n                }\n\n                if (c === '(' || c === '[') {\n                    return [c, 'TK_START_EXPR'];\n                }\n\n                if (c === ')' || c === ']') {\n                    return [c, 'TK_END_EXPR'];\n                }\n\n                if (c === '{') {\n                    return [c, 'TK_START_BLOCK'];\n                }\n\n                if (c === '}') {\n                    return [c, 'TK_END_BLOCK'];\n                }\n\n                if (c === ';') {\n                    return [c, 'TK_SEMICOLON'];\n                }\n\n                if (c === '/') {\n                    var comment = '';\n                    var comment_match;\n                    // peek for comment /* ... */\n                    if (input.charAt(parser_pos) === '*') {\n                        parser_pos += 1;\n                        block_comment_pattern.lastIndex = parser_pos;\n                        comment_match = block_comment_pattern.exec(input);\n                        comment = '/*' + comment_match[0];\n                        parser_pos += comment_match[0].length;\n                        var directives = get_directives(comment);\n                        if (directives && directives.ignore === 'start') {\n                            directives_end_ignore_pattern.lastIndex = parser_pos;\n                            comment_match = directives_end_ignore_pattern.exec(input);\n                            comment += comment_match[0];\n                            parser_pos += comment_match[0].length;\n                        }\n                        comment = comment.replace(acorn.allLineBreaks, '\\n');\n                        return [comment, 'TK_BLOCK_COMMENT', directives];\n                    }\n                    // peek for comment // ...\n                    if (input.charAt(parser_pos) === '/') {\n                        parser_pos += 1;\n                        comment_pattern.lastIndex = parser_pos;\n                        comment_match = comment_pattern.exec(input);\n                        comment = '//' + comment_match[0];\n                        parser_pos += comment_match[0].length;\n                        return [comment, 'TK_COMMENT'];\n                    }\n\n                }\n\n                var startXmlRegExp = /^<([-a-zA-Z:0-9_.]+|{.+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{.+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{.+?}))*\\s*(\\/?)\\s*>/;\n\n                if (c === '`' || c === \"'\" || c === '\"' || // string\n                    (\n                        (c === '/') || // regexp\n                        (opts.e4x && c === \"<\" && input.slice(parser_pos - 1).match(startXmlRegExp)) // xml\n                    ) && ( // regex and xml can only appear in specific locations during parsing\n                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||\n                        (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&\n                            last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||\n                        (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',\n                            'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'\n                        ]))\n                    )) {\n\n                    var sep = c,\n                        esc = false,\n                        has_char_escapes = false;\n\n                    resulting_string = c;\n\n                    if (sep === '/') {\n                        //\n                        // handle regexp\n                        //\n                        var in_char_class = false;\n                        while (parser_pos < input_length &&\n                            ((esc || in_char_class || input.charAt(parser_pos) !== sep) &&\n                                !acorn.newline.test(input.charAt(parser_pos)))) {\n                            resulting_string += input.charAt(parser_pos);\n                            if (!esc) {\n                                esc = input.charAt(parser_pos) === '\\\\';\n                                if (input.charAt(parser_pos) === '[') {\n                                    in_char_class = true;\n                                } else if (input.charAt(parser_pos) === ']') {\n                                    in_char_class = false;\n                                }\n                            } else {\n                                esc = false;\n                            }\n                            parser_pos += 1;\n                        }\n                    } else if (opts.e4x && sep === '<') {\n                        //\n                        // handle e4x xml literals\n                        //\n\n                        var xmlRegExp = /<(\\/?)([-a-zA-Z:0-9_.]+|{.+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{.+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{.+?}))*\\s*(\\/?)\\s*>/g;\n                        var xmlStr = input.slice(parser_pos - 1);\n                        var match = xmlRegExp.exec(xmlStr);\n                        if (match && match.index === 0) {\n                            var rootTag = match[2];\n                            var depth = 0;\n                            while (match) {\n                                var isEndTag = !!match[1];\n                                var tagName = match[2];\n                                var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");\n                                if (tagName === rootTag && !isSingletonTag) {\n                                    if (isEndTag) {\n                                        --depth;\n                                    } else {\n                                        ++depth;\n                                    }\n                                }\n                                if (depth <= 0) {\n                                    break;\n                                }\n                                match = xmlRegExp.exec(xmlStr);\n                            }\n                            var xmlLength = match ? match.index + match[0].length : xmlStr.length;\n                            xmlStr = xmlStr.slice(0, xmlLength);\n                            parser_pos += xmlLength - 1;\n                            xmlStr = xmlStr.replace(acorn.allLineBreaks, '\\n');\n                            return [xmlStr, \"TK_STRING\"];\n                        }\n                    } else {\n                        //\n                        // handle string\n                        //\n                        var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {\n                            // Template strings can travers lines without escape characters.\n                            // Other strings cannot\n                            var current_char;\n                            while (parser_pos < input_length) {\n                                current_char = input.charAt(parser_pos);\n                                if (!(esc || (current_char !== delimiter &&\n                                        (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {\n                                    break;\n                                }\n\n                                // Handle \\r\\n linebreaks after escapes or in template strings\n                                if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {\n                                    if (current_char === '\\r' && input.charAt(parser_pos + 1) === '\\n') {\n                                        parser_pos += 1;\n                                        current_char = input.charAt(parser_pos);\n                                    }\n                                    resulting_string += '\\n';\n                                } else {\n                                    resulting_string += current_char;\n                                }\n                                if (esc) {\n                                    if (current_char === 'x' || current_char === 'u') {\n                                        has_char_escapes = true;\n                                    }\n                                    esc = false;\n                                } else {\n                                    esc = current_char === '\\\\';\n                                }\n\n                                parser_pos += 1;\n\n                                if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {\n                                    if (delimiter === '`') {\n                                        parse_string('}', allow_unescaped_newlines, '`');\n                                    } else {\n                                        parse_string('`', allow_unescaped_newlines, '${');\n                                    }\n                                }\n                            }\n                        };\n\n                        if (sep === '`') {\n                            parse_string('`', true, '${');\n                        } else {\n                            parse_string(sep);\n                        }\n                    }\n\n                    if (has_char_escapes && opts.unescape_strings) {\n                        resulting_string = unescape_string(resulting_string);\n                    }\n\n                    if (parser_pos < input_length && input.charAt(parser_pos) === sep) {\n                        resulting_string += sep;\n                        parser_pos += 1;\n\n                        if (sep === '/') {\n                            // regexps may have modifiers /regexp/MOD , so fetch those, too\n                            // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.\n                            while (parser_pos < input_length && acorn.isIdentifierStart(input.charCodeAt(parser_pos))) {\n                                resulting_string += input.charAt(parser_pos);\n                                parser_pos += 1;\n                            }\n                        }\n                    }\n                    return [resulting_string, 'TK_STRING'];\n                }\n\n                if (c === '#') {\n\n                    if (tokens.length === 0 && input.charAt(parser_pos) === '!') {\n                        // shebang\n                        resulting_string = c;\n                        while (parser_pos < input_length && c !== '\\n') {\n                            c = input.charAt(parser_pos);\n                            resulting_string += c;\n                            parser_pos += 1;\n                        }\n                        return [trim(resulting_string) + '\\n', 'TK_UNKNOWN'];\n                    }\n\n\n\n                    // Spidermonkey-specific sharp variables for circular references\n                    // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript\n                    // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935\n                    var sharp = '#';\n                    if (parser_pos < input_length && digit.test(input.charAt(parser_pos))) {\n                        do {\n                            c = input.charAt(parser_pos);\n                            sharp += c;\n                            parser_pos += 1;\n                        } while (parser_pos < input_length && c !== '#' && c !== '=');\n                        if (c === '#') {\n                            //\n                        } else if (input.charAt(parser_pos) === '[' && input.charAt(parser_pos + 1) === ']') {\n                            sharp += '[]';\n                            parser_pos += 2;\n                        } else if (input.charAt(parser_pos) === '{' && input.charAt(parser_pos + 1) === '}') {\n                            sharp += '{}';\n                            parser_pos += 2;\n                        }\n                        return [sharp, 'TK_WORD'];\n                    }\n                }\n\n                if (c === '<' && (input.charAt(parser_pos) === '?' || input.charAt(parser_pos) === '%')) {\n                    template_pattern.lastIndex = parser_pos - 1;\n                    var template_match = template_pattern.exec(input);\n                    if (template_match) {\n                        c = template_match[0];\n                        parser_pos += c.length - 1;\n                        c = c.replace(acorn.allLineBreaks, '\\n');\n                        return [c, 'TK_STRING'];\n                    }\n                }\n\n                if (c === '<' && input.substring(parser_pos - 1, parser_pos + 3) === '<!--') {\n                    parser_pos += 3;\n                    c = '<!--';\n                    while (!acorn.newline.test(input.charAt(parser_pos)) && parser_pos < input_length) {\n                        c += input.charAt(parser_pos);\n                        parser_pos++;\n                    }\n                    in_html_comment = true;\n                    return [c, 'TK_COMMENT'];\n                }\n\n                if (c === '-' && in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === '-->') {\n                    in_html_comment = false;\n                    parser_pos += 2;\n                    return ['-->', 'TK_COMMENT'];\n                }\n\n                if (c === '.') {\n                    return [c, 'TK_DOT'];\n                }\n\n                if (in_array(c, punct)) {\n                    while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {\n                        c += input.charAt(parser_pos);\n                        parser_pos += 1;\n                        if (parser_pos >= input_length) {\n                            break;\n                        }\n                    }\n\n                    if (c === ',') {\n                        return [c, 'TK_COMMA'];\n                    } else if (c === '=') {\n                        return [c, 'TK_EQUALS'];\n                    } else {\n                        return [c, 'TK_OPERATOR'];\n                    }\n                }\n\n                return [c, 'TK_UNKNOWN'];\n            }\n\n\n            function unescape_string(s) {\n                var esc = false,\n                    out = '',\n                    pos = 0,\n                    s_hex = '',\n                    escaped = 0,\n                    c;\n\n                while (esc || pos < s.length) {\n\n                    c = s.charAt(pos);\n                    pos++;\n\n                    if (esc) {\n                        esc = false;\n                        if (c === 'x') {\n                            // simple hex-escape \\x24\n                            s_hex = s.substr(pos, 2);\n                            pos += 2;\n                        } else if (c === 'u') {\n                            // unicode-escape, \\u2134\n                            s_hex = s.substr(pos, 4);\n                            pos += 4;\n                        } else {\n                            // some common escape, e.g \\n\n                            out += '\\\\' + c;\n                            continue;\n                        }\n                        if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {\n                            // some weird escaping, bail out,\n                            // leaving whole string intact\n                            return s;\n                        }\n\n                        escaped = parseInt(s_hex, 16);\n\n                        if (escaped >= 0x00 && escaped < 0x20) {\n                            // leave 0x00...0x1f escaped\n                            if (c === 'x') {\n                                out += '\\\\x' + s_hex;\n                            } else {\n                                out += '\\\\u' + s_hex;\n                            }\n                            continue;\n                        } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n                            // single-quote, apostrophe, backslash - escape these\n                            out += '\\\\' + String.fromCharCode(escaped);\n                        } else if (c === 'x' && escaped > 0x7e && escaped <= 0xff) {\n                            // we bail out on \\x7f..\\xff,\n                            // leaving whole string escaped,\n                            // as it's probably completely binary\n                            return s;\n                        } else {\n                            out += String.fromCharCode(escaped);\n                        }\n                    } else if (c === '\\\\') {\n                        esc = true;\n                    } else {\n                        out += c;\n                    }\n                }\n                return out;\n            }\n        }\n\n        var beautifier = new Beautifier(js_source_text, options);\n        return beautifier.beautify();\n\n    }\n\n    if (typeof define === \"function\" && define.amd) {\n        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n        define([], function() {\n            return { js_beautify: js_beautify };\n        });\n    } else if (typeof exports !== \"undefined\") {\n        // Add support for CommonJS. Just put this file somewhere on your require.paths\n        // and you will be able to `var js_beautify = require(\"beautify\").js_beautify`.\n        exports.js_beautify = js_beautify;\n    } else if (typeof window !== \"undefined\") {\n        // If we're running a web page and don't have either of the above, add our one global\n        window.js_beautify = js_beautify;\n    } else if (typeof global !== \"undefined\") {\n        // If we don't even have window, try global.\n        global.js_beautify = js_beautify;\n    }\n\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-beautify/js/lib/beautify.js\n ** module id = 3\n ** module chunks = 0\n **/","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2013 Einar Lielmanis and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n CSS Beautifier\n---------------\n\n    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)\n\n    Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>\n        http://jsbeautifier.org/\n\n    Usage:\n        css_beautify(source_text);\n        css_beautify(source_text, options);\n\n    The options are (default in brackets):\n        indent_size (4)                         — indentation size,\n        indent_char (space)                     — character to indent with,\n        selector_separator_newline (true)       - separate selectors with newline or\n                                                  not (e.g. \"a,\\nbr\" or \"a, br\")\n        end_with_newline (false)                - end with a newline\n        newline_between_rules (true)            - add a new line after every css rule\n        space_around_selector_separator (false) - ensure space around selector separators:\n                                                  '>', '+', '~' (e.g. \"a>b\" -> \"a > b\")\n    e.g\n\n    css_beautify(css_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t',\n      'selector_separator': ' ',\n      'end_with_newline': false,\n      'newline_between_rules': true,\n      'space_around_selector_separator': true\n    });\n*/\n\n// http://www.w3.org/TR/CSS21/syndata.html#tokenization\n// http://www.w3.org/TR/css3-syntax/\n\n(function() {\n    function css_beautify(source_text, options) {\n        options = options || {};\n        source_text = source_text || '';\n        // HACK: newline parsing inconsistent. This brute force normalizes the input.\n        source_text = source_text.replace(/\\r\\n|[\\r\\u2028\\u2029]/g, '\\n');\n\n        var indentSize = options.indent_size || 4;\n        var indentCharacter = options.indent_char || ' ';\n        var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;\n        var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n        var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;\n        var spaceAroundSelectorSeparator = (options.space_around_selector_separator === undefined) ? false : options.space_around_selector_separator;\n        var eol = options.eol ? options.eol : '\\n';\n\n        // compatibility\n        if (typeof indentSize === \"string\") {\n            indentSize = parseInt(indentSize, 10);\n        }\n\n        if (options.indent_with_tabs) {\n            indentCharacter = '\\t';\n            indentSize = 1;\n        }\n\n        eol = eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n\n        // tokenizer\n        var whiteRe = /^\\s+$/;\n\n        var pos = -1,\n            ch;\n        var parenLevel = 0;\n\n        function next() {\n            ch = source_text.charAt(++pos);\n            return ch || '';\n        }\n\n        function peek(skipWhitespace) {\n            var result = '';\n            var prev_pos = pos;\n            if (skipWhitespace) {\n                eatWhitespace();\n            }\n            result = source_text.charAt(pos + 1) || '';\n            pos = prev_pos - 1;\n            next();\n            return result;\n        }\n\n        function eatString(endChars) {\n            var start = pos;\n            while (next()) {\n                if (ch === \"\\\\\") {\n                    next();\n                } else if (endChars.indexOf(ch) !== -1) {\n                    break;\n                } else if (ch === \"\\n\") {\n                    break;\n                }\n            }\n            return source_text.substring(start, pos + 1);\n        }\n\n        function peekString(endChar) {\n            var prev_pos = pos;\n            var str = eatString(endChar);\n            pos = prev_pos - 1;\n            next();\n            return str;\n        }\n\n        function eatWhitespace() {\n            var result = '';\n            while (whiteRe.test(peek())) {\n                next();\n                result += ch;\n            }\n            return result;\n        }\n\n        function skipWhitespace() {\n            var result = '';\n            if (ch && whiteRe.test(ch)) {\n                result = ch;\n            }\n            while (whiteRe.test(next())) {\n                result += ch;\n            }\n            return result;\n        }\n\n        function eatComment(singleLine) {\n            var start = pos;\n            singleLine = peek() === \"/\";\n            next();\n            while (next()) {\n                if (!singleLine && ch === \"*\" && peek() === \"/\") {\n                    next();\n                    break;\n                } else if (singleLine && ch === \"\\n\") {\n                    return source_text.substring(start, pos);\n                }\n            }\n\n            return source_text.substring(start, pos) + ch;\n        }\n\n\n        function lookBack(str) {\n            return source_text.substring(pos - str.length, pos).toLowerCase() ===\n                str;\n        }\n\n        // Nested pseudo-class if we are insideRule\n        // and the next special character found opens\n        // a new block\n        function foundNestedPseudoClass() {\n            var openParen = 0;\n            for (var i = pos + 1; i < source_text.length; i++) {\n                var ch = source_text.charAt(i);\n                if (ch === \"{\") {\n                    return true;\n                } else if (ch === '(') {\n                    // pseudoclasses can contain ()\n                    openParen += 1;\n                } else if (ch === ')') {\n                    if (openParen === 0) {\n                        return false;\n                    }\n                    openParen -= 1;\n                } else if (ch === \";\" || ch === \"}\") {\n                    return false;\n                }\n            }\n            return false;\n        }\n\n        // printer\n        var basebaseIndentString = source_text.match(/^[\\t ]*/)[0];\n        var singleIndent = new Array(indentSize + 1).join(indentCharacter);\n        var indentLevel = 0;\n        var nestedLevel = 0;\n\n        function indent() {\n            indentLevel++;\n            basebaseIndentString += singleIndent;\n        }\n\n        function outdent() {\n            indentLevel--;\n            basebaseIndentString = basebaseIndentString.slice(0, -indentSize);\n        }\n\n        var print = {};\n        print[\"{\"] = function(ch) {\n            print.singleSpace();\n            output.push(ch);\n            print.newLine();\n        };\n        print[\"}\"] = function(ch) {\n            print.newLine();\n            output.push(ch);\n            print.newLine();\n        };\n\n        print._lastCharWhitespace = function() {\n            return whiteRe.test(output[output.length - 1]);\n        };\n\n        print.newLine = function(keepWhitespace) {\n            if (output.length) {\n                if (!keepWhitespace && output[output.length - 1] !== '\\n') {\n                    print.trim();\n                }\n\n                output.push('\\n');\n\n                if (basebaseIndentString) {\n                    output.push(basebaseIndentString);\n                }\n            }\n        };\n        print.singleSpace = function() {\n            if (output.length && !print._lastCharWhitespace()) {\n                output.push(' ');\n            }\n        };\n\n        print.preserveSingleSpace = function() {\n            if (isAfterSpace) {\n                print.singleSpace();\n            }\n        };\n\n        print.trim = function() {\n            while (print._lastCharWhitespace()) {\n                output.pop();\n            }\n        };\n\n\n        var output = [];\n        /*_____________________--------------------_____________________*/\n\n        var insideRule = false;\n        var insidePropertyValue = false;\n        var enteringConditionalGroup = false;\n        var top_ch = '';\n        var last_top_ch = '';\n\n        while (true) {\n            var whitespace = skipWhitespace();\n            var isAfterSpace = whitespace !== '';\n            var isAfterNewline = whitespace.indexOf('\\n') !== -1;\n            last_top_ch = top_ch;\n            top_ch = ch;\n\n            if (!ch) {\n                break;\n            } else if (ch === '/' && peek() === '*') { /* css comment */\n                var header = indentLevel === 0;\n\n                if (isAfterNewline || header) {\n                    print.newLine();\n                }\n\n                output.push(eatComment());\n                print.newLine();\n                if (header) {\n                    print.newLine(true);\n                }\n            } else if (ch === '/' && peek() === '/') { // single line comment\n                if (!isAfterNewline && last_top_ch !== '{') {\n                    print.trim();\n                }\n                print.singleSpace();\n                output.push(eatComment());\n                print.newLine();\n            } else if (ch === '@') {\n                print.preserveSingleSpace();\n\n                // deal with less propery mixins @{...}\n                if (peek() === '{') {\n                    output.push(eatString('}'));\n                } else {\n                    output.push(ch);\n\n                    // strip trailing space, if present, for hash property checks\n                    var variableOrRule = peekString(\": ,;{}()[]/='\\\"\");\n\n                    if (variableOrRule.match(/[ :]$/)) {\n                        // we have a variable or pseudo-class, add it and insert one space before continuing\n                        next();\n                        variableOrRule = eatString(\": \").replace(/\\s$/, '');\n                        output.push(variableOrRule);\n                        print.singleSpace();\n                    }\n\n                    variableOrRule = variableOrRule.replace(/\\s$/, '');\n\n                    // might be a nesting at-rule\n                    if (variableOrRule in css_beautify.NESTED_AT_RULE) {\n                        nestedLevel += 1;\n                        if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {\n                            enteringConditionalGroup = true;\n                        }\n                    }\n                }\n            } else if (ch === '#' && peek() === '{') {\n                print.preserveSingleSpace();\n                output.push(eatString('}'));\n            } else if (ch === '{') {\n                if (peek(true) === '}') {\n                    eatWhitespace();\n                    next();\n                    print.singleSpace();\n                    output.push(\"{}\");\n                    print.newLine();\n                    if (newline_between_rules && indentLevel === 0) {\n                        print.newLine(true);\n                    }\n                } else {\n                    indent();\n                    print[\"{\"](ch);\n                    // when entering conditional groups, only rulesets are allowed\n                    if (enteringConditionalGroup) {\n                        enteringConditionalGroup = false;\n                        insideRule = (indentLevel > nestedLevel);\n                    } else {\n                        // otherwise, declarations are also allowed\n                        insideRule = (indentLevel >= nestedLevel);\n                    }\n                }\n            } else if (ch === '}') {\n                outdent();\n                print[\"}\"](ch);\n                insideRule = false;\n                insidePropertyValue = false;\n                if (nestedLevel) {\n                    nestedLevel--;\n                }\n                if (newline_between_rules && indentLevel === 0) {\n                    print.newLine(true);\n                }\n            } else if (ch === \":\") {\n                eatWhitespace();\n                if ((insideRule || enteringConditionalGroup) &&\n                    !(lookBack(\"&\") || foundNestedPseudoClass())) {\n                    // 'property: value' delimiter\n                    // which could be in a conditional group query\n                    insidePropertyValue = true;\n                    output.push(':');\n                    print.singleSpace();\n                } else {\n                    // sass/less parent reference don't use a space\n                    // sass nested pseudo-class don't use a space\n                    if (peek() === \":\") {\n                        // pseudo-element\n                        next();\n                        output.push(\"::\");\n                    } else {\n                        // pseudo-class\n                        output.push(':');\n                    }\n                }\n            } else if (ch === '\"' || ch === '\\'') {\n                print.preserveSingleSpace();\n                output.push(eatString(ch));\n            } else if (ch === ';') {\n                insidePropertyValue = false;\n                output.push(ch);\n                print.newLine();\n            } else if (ch === '(') { // may be a url\n                if (lookBack(\"url\")) {\n                    output.push(ch);\n                    eatWhitespace();\n                    if (next()) {\n                        if (ch !== ')' && ch !== '\"' && ch !== '\\'') {\n                            output.push(eatString(')'));\n                        } else {\n                            pos--;\n                        }\n                    }\n                } else {\n                    parenLevel++;\n                    print.preserveSingleSpace();\n                    output.push(ch);\n                    eatWhitespace();\n                }\n            } else if (ch === ')') {\n                output.push(ch);\n                parenLevel--;\n            } else if (ch === ',') {\n                output.push(ch);\n                eatWhitespace();\n                if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {\n                    print.newLine();\n                } else {\n                    print.singleSpace();\n                }\n            } else if (ch === '>' || ch === '+' || ch === '~') {\n                //handl selector separator spacing\n                if (spaceAroundSelectorSeparator && !insidePropertyValue && parenLevel < 1) {\n                    print.singleSpace();\n                    output.push(ch);\n                    print.singleSpace();\n                } else {\n                    output.push(ch);\n                }\n            } else if (ch === ']') {\n                output.push(ch);\n            } else if (ch === '[') {\n                print.preserveSingleSpace();\n                output.push(ch);\n            } else if (ch === '=') { // no whitespace before or after\n                eatWhitespace();\n                ch = '=';\n                output.push(ch);\n            } else {\n                print.preserveSingleSpace();\n                output.push(ch);\n            }\n        }\n\n\n        var sweetCode = '';\n        if (basebaseIndentString) {\n            sweetCode += basebaseIndentString;\n        }\n\n        sweetCode += output.join('').replace(/[\\r\\n\\t ]+$/, '');\n\n        // establish end_with_newline\n        if (end_with_newline) {\n            sweetCode += '\\n';\n        }\n\n        if (eol !== '\\n') {\n            sweetCode = sweetCode.replace(/[\\n]/g, eol);\n        }\n\n        return sweetCode;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n    css_beautify.NESTED_AT_RULE = {\n        \"@page\": true,\n        \"@font-face\": true,\n        \"@keyframes\": true,\n        // also in CONDITIONAL_GROUP_RULE below\n        \"@media\": true,\n        \"@supports\": true,\n        \"@document\": true\n    };\n    css_beautify.CONDITIONAL_GROUP_RULE = {\n        \"@media\": true,\n        \"@supports\": true,\n        \"@document\": true\n    };\n\n    /*global define */\n    if (typeof define === \"function\" && define.amd) {\n        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n        define([], function() {\n            return {\n                css_beautify: css_beautify\n            };\n        });\n    } else if (typeof exports !== \"undefined\") {\n        // Add support for CommonJS. Just put this file somewhere on your require.paths\n        // and you will be able to `var html_beautify = require(\"beautify\").html_beautify`.\n        exports.css_beautify = css_beautify;\n    } else if (typeof window !== \"undefined\") {\n        // If we're running a web page and don't have either of the above, add our one global\n        window.css_beautify = css_beautify;\n    } else if (typeof global !== \"undefined\") {\n        // If we don't even have window, try global.\n        global.css_beautify = css_beautify;\n    }\n\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-beautify/js/lib/beautify-css.js\n ** module id = 4\n ** module chunks = 0\n **/","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2013 Einar Lielmanis and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n Style HTML\n---------------\n\n  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\n  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>\n    http://jsbeautifier.org/\n\n  Usage:\n    style_html(html_source);\n\n    style_html(html_source, options);\n\n  The options are:\n    indent_inner_html (default false)  — indent <head> and <body> sections,\n    indent_size (default 4)          — indentation size,\n    indent_char (default space)      — character to indent with,\n    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted\n    indent_scripts (default normal)  - \"keep\"|\"separate\"|\"normal\"\n    preserve_newlines (default true) - whether existing line breaks before elements should be preserved\n                                        Only works before elements, not inside tags or for text.\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk\n    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}\n    end_with_newline (false)          - end with a newline\n    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.\n\n    e.g.\n\n    style_html(html_source, {\n      'indent_inner_html': false,\n      'indent_size': 2,\n      'indent_char': ' ',\n      'wrap_line_length': 78,\n      'brace_style': 'expand',\n      'preserve_newlines': true,\n      'max_preserve_newlines': 5,\n      'indent_handlebars': false,\n      'extra_liners': ['/html']\n    });\n*/\n\n(function() {\n\n    // function trim(s) {\n    //     return s.replace(/^\\s+|\\s+$/g, '');\n    // }\n\n    function ltrim(s) {\n        return s.replace(/^\\s+/g, '');\n    }\n\n    function rtrim(s) {\n        return s.replace(/\\s+$/g, '');\n    }\n\n    function style_html(html_source, options, js_beautify, css_beautify) {\n        //Wrapper function to invoke all the necessary constructors and deal with the output.\n\n        var multi_parser,\n            indent_inner_html,\n            indent_size,\n            indent_character,\n            wrap_line_length,\n            brace_style,\n            unformatted,\n            preserve_newlines,\n            max_preserve_newlines,\n            indent_handlebars,\n            wrap_attributes,\n            wrap_attributes_indent_size,\n            end_with_newline,\n            extra_liners,\n            eol;\n\n        options = options || {};\n\n        // backwards compatibility to 1.3.4\n        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&\n            (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {\n            options.wrap_line_length = options.max_char;\n        }\n\n        indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;\n        indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);\n        indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;\n        brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;\n        wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);\n        unformatted = options.unformatted || [\n            // https://www.w3.org/TR/html5/dom.html#phrasing-content\n            'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',\n            'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',\n            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',\n            'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',\n            'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',\n            'video', 'wbr', 'text',\n            // prexisting - not sure of full effect of removing, leaving in\n            'acronym', 'address', 'big', 'dt', 'ins', 'small', 'strike', 'tt',\n            'pre',\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6'\n        ];\n        preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n        max_preserve_newlines = preserve_newlines ?\n            (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10)) :\n            0;\n        indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;\n        wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;\n        wrap_attributes_indent_size = (isNaN(parseInt(options.wrap_attributes_indent_size, 10))) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);\n        end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n        extra_liners = (typeof options.extra_liners === 'object') && options.extra_liners ?\n            options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?\n            options.extra_liners.split(',') : 'head,body,/html'.split(',');\n        eol = options.eol ? options.eol : '\\n';\n\n        if (options.indent_with_tabs) {\n            indent_character = '\\t';\n            indent_size = 1;\n        }\n\n        eol = eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n        function Parser() {\n\n            this.pos = 0; //Parser position\n            this.token = '';\n            this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT\n            this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values\n                parent: 'parent1',\n                parentcount: 1,\n                parent1: ''\n            };\n            this.tag_type = '';\n            this.token_text = this.last_token = this.last_text = this.token_type = '';\n            this.newlines = 0;\n            this.indent_content = indent_inner_html;\n\n            this.Utils = { //Uilities made available to the various functions\n                whitespace: \"\\n\\r\\t \".split(''),\n\n                single_token: [\n                    // HTLM void elements - aka self-closing tags - aka singletons\n                    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n                    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n                    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',\n                    // NOTE: Optional tags - are not understood.\n                    // https://www.w3.org/TR/html5/syntax.html#optional-tags\n                    // The rules for optional tags are too complex for a simple list\n                    // Also, the content of these tags should still be indented in many cases.\n                    // 'li' is a good exmple.\n\n                    // Doctype and xml elements\n                    '!doctype', '?xml',\n                    // ?php tag\n                    '?php',\n                    // other tags that were in this list, keeping just in case\n                    'basefont', 'isindex'\n                ],\n                extra_liners: extra_liners, //for tags that need a line of whitespace before them\n                in_array: function(what, arr) {\n                    for (var i = 0; i < arr.length; i++) {\n                        if (what === arr[i]) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            };\n\n            // Return true if the given text is composed entirely of whitespace.\n            this.is_whitespace = function(text) {\n                for (var n = 0; n < text.length; n++) {\n                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n\n            this.traverse_whitespace = function() {\n                var input_char = '';\n\n                input_char = this.input.charAt(this.pos);\n                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                    this.newlines = 0;\n                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                        if (preserve_newlines && input_char === '\\n' && this.newlines <= max_preserve_newlines) {\n                            this.newlines += 1;\n                        }\n\n                        this.pos++;\n                        input_char = this.input.charAt(this.pos);\n                    }\n                    return true;\n                }\n                return false;\n            };\n\n            // Append a space to the given content (string array) or, if we are\n            // at the wrap_line_length, append a newline/indentation.\n            // return true if a newline was added, false if a space was added\n            this.space_or_wrap = function(content) {\n                if (this.line_char_count >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached\n                    this.print_newline(false, content);\n                    this.print_indentation(content);\n                    return true;\n                } else {\n                    this.line_char_count++;\n                    content.push(' ');\n                    return false;\n                }\n            };\n\n            this.get_content = function() { //function to capture regular content between tags\n                var input_char = '',\n                    content = [];\n\n                while (this.input.charAt(this.pos) !== '<') {\n                    if (this.pos >= this.input.length) {\n                        return content.length ? content.join('') : ['', 'TK_EOF'];\n                    }\n\n                    if (this.traverse_whitespace()) {\n                        this.space_or_wrap(content);\n                        continue;\n                    }\n\n                    if (indent_handlebars) {\n                        // Handlebars parsing is complicated.\n                        // {{#foo}} and {{/foo}} are formatted tags.\n                        // {{something}} should get treated as content, except:\n                        // {{else}} specifically behaves like {{#if}} and {{/if}}\n                        var peek3 = this.input.substr(this.pos, 3);\n                        if (peek3 === '{{#' || peek3 === '{{/') {\n                            // These are tags and not content.\n                            break;\n                        } else if (peek3 === '{{!') {\n                            return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];\n                        } else if (this.input.substr(this.pos, 2) === '{{') {\n                            if (this.get_tag(true) === '{{else}}') {\n                                break;\n                            }\n                        }\n                    }\n\n                    input_char = this.input.charAt(this.pos);\n                    this.pos++;\n                    this.line_char_count++;\n                    content.push(input_char); //letter at-a-time (or string) inserted to an array\n                }\n                return content.length ? content.join('') : '';\n            };\n\n            this.get_contents_to = function(name) { //get the full content of a script or style to pass to js_beautify\n                if (this.pos === this.input.length) {\n                    return ['', 'TK_EOF'];\n                }\n                var content = '';\n                var reg_match = new RegExp('</' + name + '\\\\s*>', 'igm');\n                reg_match.lastIndex = this.pos;\n                var reg_array = reg_match.exec(this.input);\n                var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script\n                if (this.pos < end_script) { //get everything in between the script tags\n                    content = this.input.substring(this.pos, end_script);\n                    this.pos = end_script;\n                }\n                return content;\n            };\n\n            this.record_tag = function(tag) { //function to record a tag and its parent in this.tags Object\n                if (this.tags[tag + 'count']) { //check for the existence of this tag type\n                    this.tags[tag + 'count']++;\n                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n                } else { //otherwise initialize this tag type\n                    this.tags[tag + 'count'] = 1;\n                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n                }\n                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)\n                this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')\n            };\n\n            this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer\n                if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it\n                    var temp_parent = this.tags.parent; //check to see if it's a closable tag.\n                    while (temp_parent) { //till we reach '' (the initial value);\n                        if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it\n                            break;\n                        }\n                        temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree\n                    }\n                    if (temp_parent) { //if we caught something\n                        this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly\n                        this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent\n                    }\n                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...\n                    delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself\n                    if (this.tags[tag + 'count'] === 1) {\n                        delete this.tags[tag + 'count'];\n                    } else {\n                        this.tags[tag + 'count']--;\n                    }\n                }\n            };\n\n            this.indent_to_tag = function(tag) {\n                // Match the indentation level to the last use of this tag, but don't remove it.\n                if (!this.tags[tag + 'count']) {\n                    return;\n                }\n                var temp_parent = this.tags.parent;\n                while (temp_parent) {\n                    if (tag + this.tags[tag + 'count'] === temp_parent) {\n                        break;\n                    }\n                    temp_parent = this.tags[temp_parent + 'parent'];\n                }\n                if (temp_parent) {\n                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];\n                }\n            };\n\n            this.get_tag = function(peek) { //function to get a full tag and parse its type\n                var input_char = '',\n                    content = [],\n                    comment = '',\n                    space = false,\n                    first_attr = true,\n                    tag_start, tag_end,\n                    tag_start_char,\n                    orig_pos = this.pos,\n                    orig_line_char_count = this.line_char_count;\n\n                peek = peek !== undefined ? peek : false;\n\n                do {\n                    if (this.pos >= this.input.length) {\n                        if (peek) {\n                            this.pos = orig_pos;\n                            this.line_char_count = orig_line_char_count;\n                        }\n                        return content.length ? content.join('') : ['', 'TK_EOF'];\n                    }\n\n                    input_char = this.input.charAt(this.pos);\n                    this.pos++;\n\n                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space\n                        space = true;\n                        continue;\n                    }\n\n                    if (input_char === \"'\" || input_char === '\"') {\n                        input_char += this.get_unformatted(input_char);\n                        space = true;\n\n                    }\n\n                    if (input_char === '=') { //no space before =\n                        space = false;\n                    }\n\n                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {\n                        //no space after = or before >\n                        var wrapped = this.space_or_wrap(content);\n                        var indentAttrs = wrapped && input_char !== '/' && wrap_attributes !== 'force';\n                        space = false;\n                        if (!first_attr && wrap_attributes === 'force' && input_char !== '/') {\n                            this.print_newline(false, content);\n                            this.print_indentation(content);\n                            indentAttrs = true;\n                        }\n                        if (indentAttrs) {\n                            //indent attributes an auto or forced line-wrap\n                            for (var count = 0; count < wrap_attributes_indent_size; count++) {\n                                content.push(indent_character);\n                            }\n                        }\n                        for (var i = 0; i < content.length; i++) {\n                            if (content[i] === ' ') {\n                                first_attr = false;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (indent_handlebars && tag_start_char === '<') {\n                        // When inside an angle-bracket tag, put spaces around\n                        // handlebars not inside of strings.\n                        if ((input_char + this.input.charAt(this.pos)) === '{{') {\n                            input_char += this.get_unformatted('}}');\n                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {\n                                input_char = ' ' + input_char;\n                            }\n                            space = true;\n                        }\n                    }\n\n                    if (input_char === '<' && !tag_start_char) {\n                        tag_start = this.pos - 1;\n                        tag_start_char = '<';\n                    }\n\n                    if (indent_handlebars && !tag_start_char) {\n                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {\n                            if (input_char === '#' || input_char === '/' || input_char === '!') {\n                                tag_start = this.pos - 3;\n                            } else {\n                                tag_start = this.pos - 2;\n                            }\n                            tag_start_char = '{';\n                        }\n                    }\n\n                    this.line_char_count++;\n                    content.push(input_char); //inserts character at-a-time (or string)\n\n                    if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) { //if we're in a comment, do something special\n                        // We treat all comments as literals, even more than preformatted tags\n                        // we just look for the appropriate close tag\n                        content = [this.get_comment(tag_start)];\n                        break;\n                    }\n\n                    if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') { //if we're in a comment, do something special\n                        // We treat all comments as literals, even more than preformatted tags\n                        // we just look for the appropriate close tag\n                        content = [this.get_comment(tag_start)];\n                        break;\n                    }\n\n                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {\n                        break;\n                    }\n                } while (input_char !== '>');\n\n                var tag_complete = content.join('');\n                var tag_index;\n                var tag_offset;\n\n                if (tag_complete.indexOf(' ') !== -1) { //if there's whitespace, thats where the tag name ends\n                    tag_index = tag_complete.indexOf(' ');\n                } else if (tag_complete.charAt(0) === '{') {\n                    tag_index = tag_complete.indexOf('}');\n                } else { //otherwise go with the tag ending\n                    tag_index = tag_complete.indexOf('>');\n                }\n                if (tag_complete.charAt(0) === '<' || !indent_handlebars) {\n                    tag_offset = 1;\n                } else {\n                    tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;\n                }\n                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();\n                if (tag_complete.charAt(tag_complete.length - 2) === '/' ||\n                    this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)\n                    if (!peek) {\n                        this.tag_type = 'SINGLE';\n                    }\n                } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {\n                    if (!peek) {\n                        this.indent_to_tag('if');\n                        this.tag_type = 'HANDLEBARS_ELSE';\n                        this.indent_content = true;\n                        this.traverse_whitespace();\n                    }\n                } else if (this.is_unformatted(tag_check, unformatted)) { // do not reformat the \"unformatted\" tags\n                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function\n                    content.push(comment);\n                    tag_end = this.pos - 1;\n                    this.tag_type = 'SINGLE';\n                } else if (tag_check === 'script' &&\n                    (tag_complete.search('type') === -1 ||\n                        (tag_complete.search('type') > -1 &&\n                            tag_complete.search(/\\b(text|application)\\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\\+)?json)/) > -1))) {\n                    if (!peek) {\n                        this.record_tag(tag_check);\n                        this.tag_type = 'SCRIPT';\n                    }\n                } else if (tag_check === 'style' &&\n                    (tag_complete.search('type') === -1 ||\n                        (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {\n                    if (!peek) {\n                        this.record_tag(tag_check);\n                        this.tag_type = 'STYLE';\n                    }\n                } else if (tag_check.charAt(0) === '!') { //peek for <! comment\n                    // for comments content is already correct.\n                    if (!peek) {\n                        this.tag_type = 'SINGLE';\n                        this.traverse_whitespace();\n                    }\n                } else if (!peek) {\n                    if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending\n                        this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors\n                        this.tag_type = 'END';\n                    } else { //otherwise it's a start-tag\n                        this.record_tag(tag_check); //push it on the tag stack\n                        if (tag_check.toLowerCase() !== 'html') {\n                            this.indent_content = true;\n                        }\n                        this.tag_type = 'START';\n                    }\n\n                    // Allow preserving of newlines after a start or end tag\n                    if (this.traverse_whitespace()) {\n                        this.space_or_wrap(content);\n                    }\n\n                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line\n                        this.print_newline(false, this.output);\n                        if (this.output.length && this.output[this.output.length - 2] !== '\\n') {\n                            this.print_newline(true, this.output);\n                        }\n                    }\n                }\n\n                if (peek) {\n                    this.pos = orig_pos;\n                    this.line_char_count = orig_line_char_count;\n                }\n\n                return content.join(''); //returns fully formatted tag\n            };\n\n            this.get_comment = function(start_pos) { //function to return comment content in its entirety\n                // this is will have very poor perf, but will work for now.\n                var comment = '',\n                    delimiter = '>',\n                    matched = false;\n\n                this.pos = start_pos;\n                var input_char = this.input.charAt(this.pos);\n                this.pos++;\n\n                while (this.pos <= this.input.length) {\n                    comment += input_char;\n\n                    // only need to check for the delimiter if the last chars match\n                    if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&\n                        comment.indexOf(delimiter) !== -1) {\n                        break;\n                    }\n\n                    // only need to search for custom delimiter for the first few characters\n                    if (!matched && comment.length < 10) {\n                        if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment\n                            delimiter = '<![endif]>';\n                            matched = true;\n                        } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...\n                            delimiter = ']]>';\n                            matched = true;\n                        } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...\n                            delimiter = ']>';\n                            matched = true;\n                        } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...\n                            delimiter = '-->';\n                            matched = true;\n                        } else if (comment.indexOf('{{!') === 0) { // {{! handlebars comment\n                            delimiter = '}}';\n                            matched = true;\n                        } else if (comment.indexOf('<?') === 0) { // {{! handlebars comment\n                            delimiter = '?>';\n                            matched = true;\n                        } else if (comment.indexOf('<%') === 0) { // {{! handlebars comment\n                            delimiter = '%>';\n                            matched = true;\n                        }\n                    }\n\n                    input_char = this.input.charAt(this.pos);\n                    this.pos++;\n                }\n\n                return comment;\n            };\n\n            function tokenMatcher(delimiter) {\n                var token = '';\n\n                var add = function(str) {\n                    var newToken = token + str.toLowerCase();\n                    token = newToken.length <= delimiter.length ? newToken : newToken.substr(newToken.length - delimiter.length, delimiter.length);\n                };\n\n                var doesNotMatch = function() {\n                    return token.indexOf(delimiter) === -1;\n                };\n\n                return {\n                    add: add,\n                    doesNotMatch: doesNotMatch\n                };\n            }\n\n            this.get_unformatted = function(delimiter, orig_tag) { //function to return unformatted content in its entirety\n                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {\n                    return '';\n                }\n                var input_char = '';\n                var content = '';\n                var space = true;\n\n                var delimiterMatcher = tokenMatcher(delimiter);\n\n                do {\n\n                    if (this.pos >= this.input.length) {\n                        return content;\n                    }\n\n                    input_char = this.input.charAt(this.pos);\n                    this.pos++;\n\n                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                        if (!space) {\n                            this.line_char_count--;\n                            continue;\n                        }\n                        if (input_char === '\\n' || input_char === '\\r') {\n                            content += '\\n';\n                            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'\n                for (var i=0; i<this.indent_level; i++) {\n                  content += this.indent_string;\n                }\n                space = false; //...and make sure other indentation is erased\n                */\n                            this.line_char_count = 0;\n                            continue;\n                        }\n                    }\n                    content += input_char;\n                    delimiterMatcher.add(input_char);\n                    this.line_char_count++;\n                    space = true;\n\n                    if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {\n                        // Handlebars expressions in strings should also be unformatted.\n                        content += this.get_unformatted('}}');\n                        // Don't consider when stopping for delimiters.\n                    }\n                } while (delimiterMatcher.doesNotMatch());\n\n                return content;\n            };\n\n            this.get_token = function() { //initial handler for token-retrieval\n                var token;\n\n                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript\n                    var type = this.last_token.substr(7);\n                    token = this.get_contents_to(type);\n                    if (typeof token !== 'string') {\n                        return token;\n                    }\n                    return [token, 'TK_' + type];\n                }\n                if (this.current_mode === 'CONTENT') {\n                    token = this.get_content();\n                    if (typeof token !== 'string') {\n                        return token;\n                    } else {\n                        return [token, 'TK_CONTENT'];\n                    }\n                }\n\n                if (this.current_mode === 'TAG') {\n                    token = this.get_tag();\n                    if (typeof token !== 'string') {\n                        return token;\n                    } else {\n                        var tag_name_type = 'TK_TAG_' + this.tag_type;\n                        return [token, tag_name_type];\n                    }\n                }\n            };\n\n            this.get_full_indent = function(level) {\n                level = this.indent_level + level || 0;\n                if (level < 1) {\n                    return '';\n                }\n\n                return Array(level + 1).join(this.indent_string);\n            };\n\n            this.is_unformatted = function(tag_check, unformatted) {\n                //is this an HTML5 block-level link?\n                if (!this.Utils.in_array(tag_check, unformatted)) {\n                    return false;\n                }\n\n                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {\n                    return true;\n                }\n\n                //at this point we have an  tag; is its first child something we want to remain\n                //unformatted?\n                var next_tag = this.get_tag(true /* peek. */ );\n\n                // test next_tag to see if it is just html tag (no external content)\n                var tag = (next_tag || \"\").match(/^\\s*<\\s*\\/?([a-z]*)\\s*[^>]*>\\s*$/);\n\n                // if next_tag comes back but is not an isolated tag, then\n                // let's treat the 'a' tag as having content\n                // and respect the unformatted option\n                if (!tag || this.Utils.in_array(tag, unformatted)) {\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n\n            this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions\n\n                this.input = js_source || ''; //gets the input for the Parser\n\n                // HACK: newline parsing inconsistent. This brute force normalizes the input.\n                this.input = this.input.replace(/\\r\\n|[\\r\\u2028\\u2029]/g, '\\n');\n\n                this.output = [];\n                this.indent_character = indent_character;\n                this.indent_string = '';\n                this.indent_size = indent_size;\n                this.brace_style = brace_style;\n                this.indent_level = 0;\n                this.wrap_line_length = wrap_line_length;\n                this.line_char_count = 0; //count to see if wrap_line_length was exceeded\n\n                for (var i = 0; i < this.indent_size; i++) {\n                    this.indent_string += this.indent_character;\n                }\n\n                this.print_newline = function(force, arr) {\n                    this.line_char_count = 0;\n                    if (!arr || !arr.length) {\n                        return;\n                    }\n                    if (force || (arr[arr.length - 1] !== '\\n')) { //we might want the extra line\n                        if ((arr[arr.length - 1] !== '\\n')) {\n                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);\n                        }\n                        arr.push('\\n');\n                    }\n                };\n\n                this.print_indentation = function(arr) {\n                    for (var i = 0; i < this.indent_level; i++) {\n                        arr.push(this.indent_string);\n                        this.line_char_count += this.indent_string.length;\n                    }\n                };\n\n                this.print_token = function(text) {\n                    // Avoid printing initial whitespace.\n                    if (this.is_whitespace(text) && !this.output.length) {\n                        return;\n                    }\n                    if (text || text !== '') {\n                        if (this.output.length && this.output[this.output.length - 1] === '\\n') {\n                            this.print_indentation(this.output);\n                            text = ltrim(text);\n                        }\n                    }\n                    this.print_token_raw(text);\n                };\n\n                this.print_token_raw = function(text) {\n                    // If we are going to print newlines, truncate trailing\n                    // whitespace, as the newlines will represent the space.\n                    if (this.newlines > 0) {\n                        text = rtrim(text);\n                    }\n\n                    if (text && text !== '') {\n                        if (text.length > 1 && text.charAt(text.length - 1) === '\\n') {\n                            // unformatted tags can grab newlines as their last character\n                            this.output.push(text.slice(0, -1));\n                            this.print_newline(false, this.output);\n                        } else {\n                            this.output.push(text);\n                        }\n                    }\n\n                    for (var n = 0; n < this.newlines; n++) {\n                        this.print_newline(n > 0, this.output);\n                    }\n                    this.newlines = 0;\n                };\n\n                this.indent = function() {\n                    this.indent_level++;\n                };\n\n                this.unindent = function() {\n                    if (this.indent_level > 0) {\n                        this.indent_level--;\n                    }\n                };\n            };\n            return this;\n        }\n\n        /*_____________________--------------------_____________________*/\n\n        multi_parser = new Parser(); //wrapping functions Parser\n        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values\n\n        while (true) {\n            var t = multi_parser.get_token();\n            multi_parser.token_text = t[0];\n            multi_parser.token_type = t[1];\n\n            if (multi_parser.token_type === 'TK_EOF') {\n                break;\n            }\n\n            switch (multi_parser.token_type) {\n                case 'TK_TAG_START':\n                    multi_parser.print_newline(false, multi_parser.output);\n                    multi_parser.print_token(multi_parser.token_text);\n                    if (multi_parser.indent_content) {\n                        multi_parser.indent();\n                        multi_parser.indent_content = false;\n                    }\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_STYLE':\n                case 'TK_TAG_SCRIPT':\n                    multi_parser.print_newline(false, multi_parser.output);\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_END':\n                    //Print new line only if the tag has no content and has child\n                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {\n                        var tag_name = multi_parser.token_text.match(/\\w+/)[0];\n                        var tag_extracted_from_last_output = null;\n                        if (multi_parser.output.length) {\n                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\\s*(\\w+)/);\n                        }\n                        if (tag_extracted_from_last_output === null ||\n                            (tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted))) {\n                            multi_parser.print_newline(false, multi_parser.output);\n                        }\n                    }\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_SINGLE':\n                    // Don't add a newline before elements that should remain unformatted.\n                    var tag_check = multi_parser.token_text.match(/^\\s*<([a-z-]+)/i);\n                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {\n                        multi_parser.print_newline(false, multi_parser.output);\n                    }\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_HANDLEBARS_ELSE':\n                    // Don't add a newline if opening {{#if}} tag is on the current line\n                    var foundIfOnCurrentLine = false;\n                    for (var lastCheckedOutput = multi_parser.output.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n                        if (multi_parser.output[lastCheckedOutput] === '\\n') {\n                            break;\n                        } else {\n                            if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {\n                                foundIfOnCurrentLine = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!foundIfOnCurrentLine) {\n                        multi_parser.print_newline(false, multi_parser.output);\n                    }\n                    multi_parser.print_token(multi_parser.token_text);\n                    if (multi_parser.indent_content) {\n                        multi_parser.indent();\n                        multi_parser.indent_content = false;\n                    }\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_HANDLEBARS_COMMENT':\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'TAG';\n                    break;\n                case 'TK_CONTENT':\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'TAG';\n                    break;\n                case 'TK_STYLE':\n                case 'TK_SCRIPT':\n                    if (multi_parser.token_text !== '') {\n                        multi_parser.print_newline(false, multi_parser.output);\n                        var text = multi_parser.token_text,\n                            _beautifier,\n                            script_indent_level = 1;\n                        if (multi_parser.token_type === 'TK_SCRIPT') {\n                            _beautifier = typeof js_beautify === 'function' && js_beautify;\n                        } else if (multi_parser.token_type === 'TK_STYLE') {\n                            _beautifier = typeof css_beautify === 'function' && css_beautify;\n                        }\n\n                        if (options.indent_scripts === \"keep\") {\n                            script_indent_level = 0;\n                        } else if (options.indent_scripts === \"separate\") {\n                            script_indent_level = -multi_parser.indent_level;\n                        }\n\n                        var indentation = multi_parser.get_full_indent(script_indent_level);\n                        if (_beautifier) {\n\n                            // call the Beautifier if avaliable\n                            var Child_options = function() {\n                                this.eol = '\\n';\n                            };\n                            Child_options.prototype = options;\n                            var child_options = new Child_options();\n                            text = _beautifier(text.replace(/^\\s*/, indentation), child_options);\n                        } else {\n                            // simply indent the string otherwise\n                            var white = text.match(/^\\s*/)[0];\n                            var _level = white.match(/[^\\n\\r]*$/)[0].split(multi_parser.indent_string).length - 1;\n                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);\n                            text = text.replace(/^\\s*/, indentation)\n                                .replace(/\\r\\n|\\r|\\n/g, '\\n' + reindent)\n                                .replace(/\\s+$/, '');\n                        }\n                        if (text) {\n                            multi_parser.print_token_raw(text);\n                            multi_parser.print_newline(true, multi_parser.output);\n                        }\n                    }\n                    multi_parser.current_mode = 'TAG';\n                    break;\n                default:\n                    // We should not be getting here but we don't want to drop input on the floor\n                    // Just output the text and move on\n                    if (multi_parser.token_text !== '') {\n                        multi_parser.print_token(multi_parser.token_text);\n                    }\n                    break;\n            }\n            multi_parser.last_token = multi_parser.token_type;\n            multi_parser.last_text = multi_parser.token_text;\n        }\n        var sweet_code = multi_parser.output.join('').replace(/[\\r\\n\\t ]+$/, '');\n\n        // establish end_with_newline\n        if (end_with_newline) {\n            sweet_code += '\\n';\n        }\n\n        if (eol !== '\\n') {\n            sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n\n        return sweet_code;\n    }\n\n    if (typeof define === \"function\" && define.amd) {\n        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n        define([\"require\", \"./beautify\", \"./beautify-css\"], function(requireamd) {\n            var js_beautify = requireamd(\"./beautify\");\n            var css_beautify = requireamd(\"./beautify-css\");\n\n            return {\n                html_beautify: function(html_source, options) {\n                    return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);\n                }\n            };\n        });\n    } else if (typeof exports !== \"undefined\") {\n        // Add support for CommonJS. Just put this file somewhere on your require.paths\n        // and you will be able to `var html_beautify = require(\"beautify\").html_beautify`.\n        var js_beautify = require('./beautify.js');\n        var css_beautify = require('./beautify-css.js');\n\n        exports.html_beautify = function(html_source, options) {\n            return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);\n        };\n    } else if (typeof window !== \"undefined\") {\n        // If we're running a web page and don't have either of the above, add our one global\n        window.html_beautify = function(html_source, options) {\n            return style_html(html_source, options, window.js_beautify, window.css_beautify);\n        };\n    } else if (typeof global !== \"undefined\") {\n        // If we don't even have window, try global.\n        global.html_beautify = function(html_source, options) {\n            return style_html(html_source, options, global.js_beautify, global.css_beautify);\n        };\n    }\n\n}());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-beautify/js/lib/beautify-html.js\n ** module id = 5\n ** module chunks = 0\n **/","var map = {\n\t\"./ru.js\": 7\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/locales ^\\.\\/.*\\.js$\n ** module id = 6\n ** module chunks = 0\n **/","export default {\n  months: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'],\n  monthsShort: ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'],\n  days: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],\n  daysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],\n  thousandSeparator: ' ',\n  decimalSeparator: ',',\n  formats: {\n    'General Number': '#.#',\n    'Currency': '#,##0.00р.;[Red]-#,##0.00р.',\n    'Fixed': '0.00',\n    'Standard': '#,##0.00',\n    'Percent': '0.00%',\n    'Scientific': '0.00E+00',\n    'Yes/No': '\"Да\";\"Да\";\"Нет\"',\n    'True/False': '\"Истина\";\"Истина\";\"Ложь\"',\n    'On/Off': '\"Вкл\";\"Вкл\";\"Выкл\"',\n    'Short Date': 'mm.dd.yyyy',\n    'Long Date': 'dd mmmm yyyy',\n    'General Date': 'mm.dd.yyyy h:mm',\n    'Medium Date': 'dd.mmm.yy',\n    'Long Time': 'hh:mm:ss AM/PM',\n    'Short Time': 'h:mm',\n    'Medium Time': 'hh:mm AM/PM'\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/locales/ru.js\n **/"],"sourceRoot":""}