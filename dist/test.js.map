{"version":3,"sources":["webpack:///test.js","webpack:///webpack/bootstrap b805c0e97d9e7e193c16","webpack:///./src/index.js","webpack:///./src/utils.js","webpack:///./src/locales ^\\.\\/.*\\.js$","webpack:///./src/locales/en-US.js","webpack:///./src/locales/ru.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","__WEBPACK_AMD_DEFINE_RESULT__","_createClass","Symbol","iterator","obj","constructor","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_utils","defaultLocale","DataFormatter","_ref","arguments","undefined","_ref$debug","debug","_ref$UTCOffset","UTCOffset","_ref$locale","locale","_ref$transformCode","transformCode","code","this","memoized","zeroDate","createDate","setLocale","value","localeData","clearMemoizedFunctions","date","Function","bind","apply","Date","concat","Array","slice","clientOffset","getTimezoneOffset","newOffset","newOffsetMs","setTime","getTime","message","console","log","a","b","r","n","pattern","direction","toString","s","j","patLen","separateThousands","mostLeftDigit","replace","m1","m2","m3","_j2","substr","thousandSeparator","_j","_i","origins","decimals","patternIntegerPart","patternDecimalPart","toFixed","split","integerPart","parseInt","decimalPart","applyNumberPattern","decimalSeparator","patternNumeratorPart","patternDenominatorPart","Math","pow","floor","factor","gcd","leftPatternNumeratorPart","rightPatternNumeratorPart","f","patternPowPart","sign","abs","integerPartDivision","res","foundDays","foundHours","foundMinutes","_this","seconds","minutes","hours","days","dd","d","hh","h","mm","ss","_this2","_locale","daysShort","months","monthsShort","foundAMPM","year","getFullYear","month","getMonth","getDate","weekDay","getDay","getHours","getMinutes","getSeconds","ampm","fmin","fmin2","mmin","mmin2","dddd","ddd","mmmmm","mmmm","mmm","yyyy","yy","section","Code","append","numberCode","createNumberCode","dateTimeCode","createDateTimeCode","exponentialMatch","zerosCount","match","fractialMatch","zeroPos","decimalMatch","shouldAbsNumber","createNumberExponentialCode","m4","percentMatch","createNumberFractialCode","createNumberDecimalCode","createNumberIntegerCode","test","elapsed","createDateTimeElapsedCode","createDateTimeNormalCode","sectionIndex","sectionsCount","condition","conditionMatch","cond","formatCode","createGeneralCode","createTextCode","_this3","replaces","patternReplaced","push","sections","forEach","createSectionCode","type","formats","createPatternCode","result","dataFormatter","_toConsumableArray","arr","isArray","arr2","from","formatString","_len","args","_key","number","_len2","values","_key2","map","JSON","stringify","makeString","webpackContext","req","webpackContextResolve","Error","./en-US.js","./ru.js","keys","resolve","General Number","Currency","Fixed","Standard","Percent","Scientific","Yes/No","True/False","On/Off","Short Date","Long Date","General Date","Medium Date","Long Time","Short Time","Medium Time"],"mappings":"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","file":"test.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _utils = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar defaultLocale = 'en-US';\n\t\n\tvar DataFormatter = function () {\n\t\n\t  /**\n\t   * Constructor\n\t   * Available options are:\n\t   *   debug {boolean} - enable debug mode\n\t   *   UTCOffset {number|null} - UTC offset in minutes for dates\n\t   *   locale {string}\n\t   *   transformCode {function} - code transformer\n\t   * @param {object} options\n\t   */\n\t\n\t  function DataFormatter() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var _ref$debug = _ref.debug;\n\t    var debug = _ref$debug === undefined ? false : _ref$debug;\n\t    var _ref$UTCOffset = _ref.UTCOffset;\n\t    var UTCOffset = _ref$UTCOffset === undefined ? null : _ref$UTCOffset;\n\t    var _ref$locale = _ref.locale;\n\t    var locale = _ref$locale === undefined ? defaultLocale : _ref$locale;\n\t    var _ref$transformCode = _ref.transformCode;\n\t    var transformCode = _ref$transformCode === undefined ? function (code) {\n\t      return code;\n\t    } : _ref$transformCode;\n\t\n\t    _classCallCheck(this, DataFormatter);\n\t\n\t    this.memoized = {};\n\t    this.debug = debug;\n\t    this.UTCOffset = UTCOffset;\n\t    this.transformCode = transformCode;\n\t    this.zeroDate = this.createDate('1899-12-31T00:00:00.000');\n\t\n\t    this.setLocale(locale);\n\t  }\n\t\n\t  /**\n\t   * Resets memoized pattern functions\n\t   */\n\t\n\t\n\t  _createClass(DataFormatter, [{\n\t    key: 'clearMemoizedFunctions',\n\t    value: function clearMemoizedFunctions() {\n\t      this.memoized = {};\n\t    }\n\t\n\t    /**\n\t     * Sets locale\n\t     * If locale doesn't exist, sets default\n\t     * @param {string} locale\n\t     */\n\t\n\t  }, {\n\t    key: 'setLocale',\n\t    value: function setLocale(locale) {\n\t      var localeData = __webpack_require__(2)(\"./\" + locale + '.js');\n\t      if (!localeData) {\n\t        localeData = __webpack_require__(2)(\"./\" + defaultLocale + '.js');\n\t      }\n\t      this.locale = localeData.default;\n\t      this.clearMemoizedFunctions();\n\t    }\n\t\n\t    /**\n\t     * Sets UTC offset for dates\n\t     * @param {number|null} UTCOffset in minutes\n\t     */\n\t\n\t  }, {\n\t    key: 'setUTCOffset',\n\t    value: function setUTCOffset(UTCOffset) {\n\t      this.UTCOffset = UTCOffset;\n\t    }\n\t\n\t    /**\n\t     * Creates new date instance\n\t     */\n\t\n\t  }, {\n\t    key: 'createDate',\n\t    value: function createDate() {\n\t      var date = new (Function.prototype.bind.apply(Date, [null].concat(Array.prototype.slice.call(arguments))))();\n\t\n\t      if (this.UTCOffset !== null) {\n\t        var clientOffset = date.getTimezoneOffset();\n\t        var newOffset = this.UTCOffset + clientOffset;\n\t        var newOffsetMs = newOffset * 60 * 1000;\n\t\n\t        date.setTime(date.getTime() + newOffsetMs);\n\t      }\n\t\n\t      return date;\n\t    }\n\t\n\t    /**\n\t     * Logger\n\t     */\n\t\n\t  }, {\n\t    key: 'log',\n\t    value: function log(message) {\n\t      if (this.debug) {\n\t        console.log(message);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Greatest common divisor\n\t     */\n\t\n\t  }, {\n\t    key: 'gcd',\n\t    value: function gcd(a, b) {\n\t      var r = void 0;\n\t      while (b) {\n\t        r = a % b;\n\t        a = b;\n\t        b = r;\n\t      }\n\t      return a;\n\t    }\n\t  }, {\n\t    key: 'applyNumberPattern',\n\t    value: function applyNumberPattern(n, pattern, direction) {\n\t      n = n.toString();\n\t      var s = '';\n\t\n\t      if (direction === 'right') {\n\t        var j = 0;\n\t        var i = -1;\n\t        var patLen = pattern.length;\n\t\n\t        while (++i < patLen) {\n\t          switch (pattern[i]) {\n\t            case '0':\n\t              s += n[j] || '0';\n\t              j++;\n\t              break;\n\t            case '#':\n\t              s += n[j] || '';\n\t              j++;\n\t              break;\n\t            case '?':\n\t              s += n[j] || ' ';\n\t              j++;\n\t              break;\n\t            case '[':\n\t              while (i < pattern.length && pattern[i] !== ']') {\n\t                s += pattern[i];\n\t                i++;\n\t              }\n\t              i--;\n\t              break;\n\t            default:\n\t              s += pattern[i];\n\t          }\n\t        }\n\t      } else {\n\t        // Should separate thousands\n\t        var separateThousands = false;\n\t        var mostLeftDigit = void 0;\n\t\n\t        pattern = pattern.replace(/(0|#|\\?)(,+?)(0|#|\\?)/g, function (a, m1, m2, m3) {\n\t          separateThousands = true;\n\t          return m1 + m3;\n\t        });\n\t\n\t        // Add separation\n\t        if (separateThousands) {\n\t          var _j2 = n.length - 3;\n\t          while (n[0] === '-' ? _j2 > 1 : _j2 > 0) {\n\t            n = n.substr(0, _j2) + this.locale.thousandSeparator + n.substr(_j2);\n\t            _j2 -= 3;\n\t          }\n\t        }\n\t\n\t        var _j = n.length - 1;\n\t        var _i = pattern.length;\n\t\n\t        while (_i--) {\n\t          switch (pattern[_i]) {\n\t            case '0':\n\t              s = (n[_j] || '0') + s;\n\t              mostLeftDigit = _i;\n\t              _j--;\n\t              break;\n\t            case '#':\n\t              s = (n[_j] || '') + s;\n\t              mostLeftDigit = _i;\n\t              _j--;\n\t              break;\n\t            case '?':\n\t              s = (n[_j] || ' ') + s;\n\t              mostLeftDigit = _i;\n\t              _j--;\n\t              break;\n\t            case ']':\n\t              while (_i > 0 && pattern[_i] !== '[') {\n\t                s = pattern[_i] + s;\n\t                _i--;\n\t              }\n\t              _i++;\n\t              break;\n\t            default:\n\t              s = pattern[_i] + s;\n\t          }\n\t        }\n\t        // Add remaining digits, example: n=1234, ptrn=00, result must be 1234 instead of 34\n\t        if (_j >= 0 && mostLeftDigit !== null) {\n\t          s = s.substr(0, mostLeftDigit) + n.substr(0, _j + 1) + s.substr(mostLeftDigit);\n\t        }\n\t      }\n\t\n\t      return s;\n\t    }\n\t  }, {\n\t    key: 'restoreOrigins',\n\t    value: function restoreOrigins(value, origins) {\n\t      return value.toString().replace(/\\[(?:(\\$*?)|(.*?))\\]/g, function (a, m1) {\n\t        return m1 && origins[m1.length - 1] || a;\n\t      });\n\t    }\n\t  }, {\n\t    key: 'formatAsNumberDecimal',\n\t    value: function formatAsNumberDecimal(n, decimals, patternIntegerPart, patternDecimalPart) {\n\t\n\t      n = n.toFixed(decimals).toString().split('.');\n\t      var integerPart = parseInt(n[0]);\n\t      var decimalPart = parseInt(n[1] || 0);\n\t\n\t      return this.applyNumberPattern(integerPart, patternIntegerPart) + this.locale.decimalSeparator + this.applyNumberPattern(decimalPart, patternDecimalPart, 'right');\n\t    }\n\t  }, {\n\t    key: 'formatAsNumberFractial',\n\t    value: function formatAsNumberFractial(n, patternNumeratorPart, patternDenominatorPart) {\n\t      var m = n.toString().split(\".\");\n\t      m = m[1] ? Math.pow(10, m[1].length) : 1;\n\t      n = Math.floor(n * m);\n\t\n\t      var factor = this.gcd(n, m);\n\t\n\t      return this.applyNumberPattern(n / factor, patternNumeratorPart) + '/' + this.applyNumberPattern(m / factor, patternDenominatorPart);\n\t    }\n\t  }, {\n\t    key: 'formatAsNumberFractialMixed',\n\t    value: function formatAsNumberFractialMixed(n, leftPatternNumeratorPart, rightPatternNumeratorPart, patternDenominatorPart) {\n\t      var f = 0;\n\t      var c = 1;\n\t      var factor = 1;\n\t      var m = n.toString().split('.');\n\t\n\t      if (m[1]) {\n\t        c = Math.pow(10, m[1].length);\n\t        f = parseInt(m[1]);\n\t        factor = this.gcd(f, c);\n\t      }\n\t\n\t      return this.applyNumberPattern(Math.floor(n), leftPatternNumeratorPart) + this.applyNumberPattern(f / factor, rightPatternNumeratorPart) + '/' + this.applyNumberPattern(c / factor, patternDenominatorPart);\n\t    }\n\t  }, {\n\t    key: 'formatAsNumberExponential',\n\t    value: function formatAsNumberExponential(n, integerPart, decimalPart, patternIntegerPart, patternDecimalPart, patternPowPart) {\n\t\n\t      var sign = n < 0 ? -1 : 1;\n\t      var pow = 0;\n\t\n\t      if (n !== 0) {\n\t\n\t        n = Math.abs(n);\n\t\n\t        var integerPartDivision = Math.pow(10, integerPart);\n\t\n\t        while (n < integerPartDivision || n.toFixed(decimalPart) < integerPartDivision) {\n\t          n *= 10;\n\t          pow++;\n\t        }\n\t\n\t        while (n >= integerPartDivision || n.toFixed(decimalPart) >= integerPartDivision) {\n\t          n /= 10;\n\t          pow--;\n\t        }\n\t      }\n\t\n\t      n = (n * sign).toFixed(decimalPart).toString().split('.');\n\t\n\t      // Build res\n\t      var res = '';\n\t\n\t      // Integer part\n\t      res += this.applyNumberPattern(parseInt(n[0]), patternIntegerPart);\n\t\n\t      // Decimal part\n\t      if (patternDecimalPart) {\n\t        res += this.locale.decimalSeparator + this.applyNumberPattern(parseInt(n[1]), patternDecimalPart, 'right');\n\t      }\n\t\n\t      // Pow part\n\t      res += 'E' + (pow > 0 ? '-' : '+') + this.applyNumberPattern(Math.abs(pow), patternPowPart);\n\t\n\t      return res;\n\t    }\n\t  }, {\n\t    key: 'formatAsDateTimeElapsed',\n\t    value: function formatAsDateTimeElapsed(n, foundDays, foundHours, foundMinutes, pattern) {\n\t      var _this = this;\n\t\n\t      n = Math.abs(n.getTime() - this.zeroDate.getTime());\n\t\n\t      var seconds = parseInt(n / 1000);\n\t      var minutes = parseInt(seconds / 60);\n\t      var hours = parseInt(minutes / 60);\n\t      var days = parseInt(hours / 24);\n\t\n\t      hours = foundDays ? hours % 24 : hours;\n\t      minutes = foundHours ? minutes % 60 : minutes;\n\t      seconds = foundMinutes ? seconds % 60 : seconds;\n\t\n\t      return pattern.replace(/(dd)|(d)|(hh)|(h)|(mm)|(m)|(ss)|(s)/gi, function (a, dd, d, hh, h, mm, m, ss, s) {\n\t\n\t        if (dd) {\n\t          return _this.applyNumberPattern(days, '00');\n\t        }\n\t\n\t        if (d) {\n\t          return days;\n\t        }\n\t\n\t        if (hh) {\n\t          return _this.applyNumberPattern(hours, '00');\n\t        }\n\t\n\t        if (h) {\n\t          return hours;\n\t        }\n\t\n\t        if (mm) {\n\t          return _this.applyNumberPattern(minutes, '00');\n\t        }\n\t\n\t        if (m) {\n\t          return minutes;\n\t        }\n\t\n\t        if (ss) {\n\t          return _this.applyNumberPattern(seconds, '00');\n\t        }\n\t\n\t        if (s) {\n\t          return seconds;\n\t        }\n\t\n\t        return '';\n\t      });\n\t    }\n\t  }, {\n\t    key: 'formatAsDateTimeNormal',\n\t    value: function formatAsDateTimeNormal(n, pattern) {\n\t      var _this2 = this;\n\t\n\t      var _locale = this.locale;\n\t      var days = _locale.days;\n\t      var daysShort = _locale.daysShort;\n\t      var months = _locale.months;\n\t      var monthsShort = _locale.monthsShort;\n\t\n\t      var foundAMPM = false;\n\t\n\t      var year = n.getFullYear();\n\t      var month = n.getMonth();\n\t      var date = n.getDate();\n\t      var weekDay = n.getDay();\n\t      var hours = n.getHours();\n\t      var minutes = n.getMinutes();\n\t      var seconds = n.getSeconds();\n\t\n\t      // Build res\n\t      var res = pattern.replace(/((?:am\\/pm)|(?:a\\/p))|(?:(h[^ydsap]*?)mm)|(?:mm([^ydh]*?s))|(?:(h[^ydsap]*?)m)|(?:m([^ydh]*?s))/gi, function (a, ampm, fmin, fmin2, mmin, mmin2) {\n\t\n\t        if (ampm) {\n\t          foundAMPM = true;\n\t          return '[]';\n\t        }\n\t\n\t        if (fmin) {\n\t          return fmin + _this2.applyNumberPattern(minutes, '00');\n\t        }\n\t\n\t        if (fmin2) {\n\t          return _this2.applyNumberPattern(minutes, '00') + fmin2;\n\t        }\n\t\n\t        if (mmin) {\n\t          return mmin + minutes;\n\t        }\n\t\n\t        if (mmin2) {\n\t          return minutes + mmin2;\n\t        }\n\t\n\t        return '';\n\t      });\n\t\n\t      return res.replace(/(ss)|(s)|(hh)|(h)|(dddd)|(ddd)|(dd)|(d)|(mmmmm)|(mmmm)|(mmm)|(mm)|(m)|(yyyy)|(yy)|(\\[\\])/gi, function (a, ss, s, hh, h, dddd, ddd, dd, d, mmmmm, mmmm, mmm, mm, m, yyyy, yy, ampm) {\n\t\n\t        if (ss) {\n\t          return _this2.applyNumberPattern(seconds, '00');\n\t        }\n\t\n\t        if (s) {\n\t          return seconds;\n\t        }\n\t\n\t        if (hh) {\n\t          return _this2.applyNumberPattern(foundAMPM ? hours % 12 : hours, '00');\n\t        }\n\t\n\t        if (h) {\n\t          return foundAMPM ? hours % 12 : hours;\n\t        }\n\t\n\t        if (dddd) {\n\t          return days[weekDay];\n\t        }\n\t\n\t        if (ddd) {\n\t          return daysShort[weekDay];\n\t        }\n\t\n\t        if (dd) {\n\t          return _this2.applyNumberPattern(date, '00');\n\t        }\n\t\n\t        if (d) {\n\t          return date;\n\t        }\n\t\n\t        if (mmmmm) {\n\t          return monthsShort[month][0];\n\t        }\n\t\n\t        if (mmmm) {\n\t          return months[month];\n\t        }\n\t\n\t        if (mmm) {\n\t          return monthsShort[month];\n\t        }\n\t\n\t        if (mm) {\n\t          return _this2.applyNumberPattern(month + 1, '00');\n\t        }\n\t\n\t        if (m) {\n\t          return month + 1;\n\t        }\n\t\n\t        if (yyyy) {\n\t          return year;\n\t        }\n\t\n\t        if (yy) {\n\t          return year.toString().substr(2);\n\t        }\n\t\n\t        if (ampm) {\n\t          return hours < 12 ? 'AM' : 'PM';\n\t        }\n\t\n\t        return '';\n\t      });\n\t    }\n\t  }, {\n\t    key: 'createTextCode',\n\t    value: function createTextCode(section) {\n\t      var code = new _utils.Code();\n\t\n\t      code.append('\\n      result.value = {0}.replace(/@/, n);\\n    ', section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createGeneralCode',\n\t    value: function createGeneralCode() {\n\t      var code = new _utils.Code();\n\t      var numberCode = this.createNumberCode('#.00');\n\t      var dateTimeCode = this.createDateTimeCode('[d]');\n\t\n\t      code.append('\\n      if (type === \"Number\") {\\n        ' + numberCode + '\\n      }\\n      if (type === \"DateTime\") {\\n        ' + dateTimeCode + '\\n      }\\n    ');\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberExponentialCode',\n\t    value: function createNumberExponentialCode(exponentialMatch) {\n\t      var patternIntegerPart = exponentialMatch[1];\n\t      var patternDecimalPart = exponentialMatch[2];\n\t      var patternPowPart = exponentialMatch[3];\n\t      var code = new _utils.Code();\n\t      var integerPart = void 0;\n\t      var decimalPart = void 0;\n\t\n\t      var zerosCount = function zerosCount(s) {\n\t        return s.match(/0|\\?|#/g).length;\n\t      };\n\t\n\t      // Integer part\n\t      if (!patternIntegerPart) {\n\t        patternIntegerPart = '#';\n\t        integerPart = 1;\n\t      } else {\n\t        integerPart = zerosCount(patternIntegerPart);\n\t      }\n\t\n\t      // Decimal part\n\t      if (!patternDecimalPart) {\n\t        patternDecimalPart = '';\n\t        decimalPart = 0;\n\t      } else {\n\t        decimalPart = zerosCount(patternDecimalPart);\n\t      }\n\t\n\t      code.append('\\n      result.value = this.formatAsNumberExponential(n, {0}, {1}, {2}, {3}, {4});\\n    ', integerPart, decimalPart, patternIntegerPart, patternDecimalPart, patternPowPart);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberFractialCode',\n\t    value: function createNumberFractialCode(fractialMatch) {\n\t      var code = new _utils.Code();\n\t      var patternNumeratorPart = fractialMatch[1] || '#';\n\t      var patternDenominatorPart = fractialMatch[2] || '#';\n\t      // TODO watch here\n\t      var zeroPos = patternNumeratorPart.length - 1;\n\t\n\t      while (patternNumeratorPart[zeroPos] === '0' && patternNumeratorPart[zeroPos] !== '?' && patternNumeratorPart[zeroPos] !== '#' && patternNumeratorPart[zeroPos] !== ' ' && zeroPos > 0) {\n\t        zeroPos--;\n\t      }\n\t\n\t      var leftPatternNumeratorPart = patternNumeratorPart.substr(0, zeroPos);\n\t      var rightPatternNumeratorPart = patternNumeratorPart.substr(zeroPos);\n\t\n\t      if (!leftPatternNumeratorPart) {\n\t        code.append('\\n        result.value = this.formatAsNumberFractial(n, {0}, {1});\\n      ', rightPatternNumeratorPart, patternDenominatorPart);\n\t      }\n\t      // Mixed fraction\n\t      else {\n\t          code.append('\\n        result.value = this.formatAsNumberFractialMixed(n, {0}, {1}, {2});\\n      ', leftPatternNumeratorPart, rightPatternNumeratorPart, patternDenominatorPart);\n\t        }\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberDecimalCode',\n\t    value: function createNumberDecimalCode(decimalMatch) {\n\t      var code = new _utils.Code();\n\t      var patternIntegerPart = decimalMatch[1] || '0';\n\t      var patternDecimalPart = decimalMatch[2] || '';\n\t      var decimals = void 0;\n\t      var factor = 1;\n\t\n\t      var zerosCount = function zerosCount(s) {\n\t        return s.match(/0|\\?|#/g).length;\n\t      };\n\t\n\t      if (!patternDecimalPart) {\n\t        decimals = 0;\n\t      } else {\n\t        decimals = zerosCount(patternDecimalPart);\n\t      }\n\t\n\t      // Spaces before .\n\t      patternIntegerPart = patternIntegerPart.replace(/(0|#|\\?)(,+)([^0?#]*)$/, function (a, m1, m2, m3) {\n\t        factor *= Math.pow(1000, m2.length);\n\t        return m1 + m3;\n\t      });\n\t\n\t      if (factor !== 1) {\n\t        code.append('\\n        n /= {0};\\n      ', factor);\n\t      }\n\t\n\t      code.append('\\n      result.value = this.formatAsNumberDecimal(n, {0}, {1}, {2});\\n    ', decimals, patternIntegerPart, patternDecimalPart);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberIntegerCode',\n\t    value: function createNumberIntegerCode(section) {\n\t      var code = new _utils.Code();\n\t\n\t      code.append('\\n      n = Math.round(n);\\n      result.value = this.applyNumberPattern(n, {0});\\n    ', section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createNumberCode',\n\t    value: function createNumberCode(section, shouldAbsNumber) {\n\t      var numberCode = new _utils.Code();\n\t\n\t      // Abs\n\t      if (shouldAbsNumber) {\n\t        numberCode.append('\\n        n = Math.abs(n);\\n      ');\n\t      }\n\t\n\t      // Exponential form regexp\n\t      var exponentialMatch = section.match(/(.*?)(?:\\.(.*?))?e(?:\\+|\\-)(.*)/i);\n\t\n\t      if (exponentialMatch) {\n\t\n\t        // Exponential form\n\t        numberCode.append(this.createNumberExponentialCode(exponentialMatch));\n\t      } else {\n\t        var factor = 1;\n\t\n\t        // Spaces before end and decimal separator (.)\n\t        section = section.replace(/(0|#|\\?)(\\s+)([^0?#]*?)($|\\.)/, function (a, m1, m2, m3, m4) {\n\t          factor *= Math.pow(1000, m2.length);\n\t          return m1 + m3 + m4;\n\t        });\n\t\n\t        // Percents\n\t        var percentMatch = section.match(/%/g);\n\t        if (percentMatch) {\n\t          factor /= Math.pow(100, percentMatch.length);\n\t        }\n\t\n\t        // Factor\n\t        if (factor !== 1) {\n\t          numberCode.append('\\n          n /= {0};\\n        ', factor);\n\t        }\n\t\n\t        var fractialMatch = void 0;\n\t        var decimalMatch = void 0;\n\t\n\t        switch (true) {\n\t\n\t          // Fractial form\n\t          case !!(fractialMatch = section.match(/(.*?)\\/(.*)/)):\n\t            numberCode.append(this.createNumberFractialCode(fractialMatch));\n\t            break;\n\t\n\t          // Decimal form\n\t          case !!(decimalMatch = section.match(/(.*?)\\.(.*)/)):\n\t            numberCode.append(this.createNumberDecimalCode(decimalMatch));\n\t            break;\n\t\n\t          // Integer form\n\t          default:\n\t            numberCode.append(this.createNumberIntegerCode(section));\n\t\n\t        }\n\t      }\n\t\n\t      // Final code\n\t      var code = new _utils.Code();\n\t\n\t      // Parse to float\n\t      code.append('\\n      n = parseFloat(n);\\n    ');\n\t\n\t      // Checks\n\t      code.append('\\n      if (!isNaN(n)) {\\n        if (n >= 1e21 || n <= -1e21) {\\n          result.value = n.toString().toUpperCase();\\n        }\\n        else {\\n          ' + numberCode + '\\n        }\\n      }\\n    ');\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createDateTimeElapsedCode',\n\t    value: function createDateTimeElapsedCode(section) {\n\t      var code = new _utils.Code();\n\t\n\t      var foundDays = /d/i.test(section);\n\t      var foundHours = /h/i.test(section);\n\t      var foundMinutes = /m/i.test(section);\n\t\n\t      code.append('\\n      result.value = this.formatAsDateTimeElapsed(n, {0}, {1}, {2}, {3});\\n    ', foundDays, foundHours, foundMinutes, section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createDateTimeNormalCode',\n\t    value: function createDateTimeNormalCode(section) {\n\t      var code = new _utils.Code();\n\t\n\t      code.append('\\n      result.value = this.formatAsDateTimeNormal(n, {0});\\n    ', section);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createDateTimeCode',\n\t    value: function createDateTimeCode(section) {\n\t      var code = new _utils.Code();\n\t      var elapsed = false;\n\t\n\t      section = section.replace(/\\[(h+?|m+?|s+?|y+?|d+?)]/ig, function (a, m1) {\n\t        elapsed = true;\n\t        return m1;\n\t      });\n\t\n\t      var dateTimeCode = elapsed ? this.createDateTimeElapsedCode(section) : this.createDateTimeNormalCode(section);\n\t\n\t      code.append('\\n      n = this.createDate(n);\\n      if (!isNaN(n.getTime())) {\\n        ' + dateTimeCode + '\\n      }\\n    ');\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createSectionCode',\n\t    value: function createSectionCode(section, sectionIndex, sectionsCount) {\n\t      // Start creating code for function\n\t      var code = new _utils.Code();\n\t\n\t      var condition = void 0;\n\t      var shouldAbsNumber = false;\n\t\n\t      // Find condition for sector or add standard sector condition (positive number, negative number, etc.)\n\t      var conditionMatch = section.match(/\\[((?:>|>=|<|<=|=|<>)[0-9\\.]+?)]/);\n\t\n\t      switch (true) {\n\t\n\t        // Found condition\n\t        case !!conditionMatch:\n\t          var cond = conditionMatch[1].replace(/<>/, '!=').replace('/=/', '==');\n\t          condition = 'type == \"Number\" && parseFloat(n)' + cond;\n\t          break;\n\t\n\t        // Standard condition for first section of 3+\n\t        case sectionIndex === 0 && sectionsCount > 2:\n\t          condition = 'type == \"Number\" && parseFloat(n) > 0';\n\t          break;\n\t\n\t        // Standard condition for first section of 2\n\t        case sectionIndex === 0 && sectionsCount === 2:\n\t          condition = 'type == \"Number\" && parseFloat(n) >= 0';\n\t          break;\n\t\n\t        // Standard condition for negative number\n\t        case sectionIndex === 1:\n\t          condition = 'type == \"Number\" && parseFloat(n) < 0';\n\t          shouldAbsNumber = true;\n\t          break;\n\t\n\t      }\n\t\n\t      // Find text color\n\t      section = section.replace(/\\[(Red|Green|White|Blue|Magenta|Yellow|Cyan|Black)]/gi, function (a, m1) {\n\t        code.append('\\n        result.color = {0};\\n      ', m1);\n\t        return '';\n\t      });\n\t\n\t      // Remove all [], except our replacements and elapsed days, hours, minutes, seconds\n\t      section = section.replace(/(\\[((?!((\\$*?)|(d*?)|(h*?)|(m*?)|(s*?))]).*?)])/, '');\n\t\n\t      // Format code\n\t      var formatCode = new _utils.Code();\n\t\n\t      // Defaults\n\t      formatCode.append('\\n      result.value = {0};\\n      result.pattern = {0};\\n    ', section);\n\t\n\t      switch (true) {\n\t\n\t        // General format\n\t        case /General/i.test(section):\n\t          formatCode.append(this.createGeneralCode(section));\n\t          break;\n\t\n\t        // Text\n\t        case /@/.test(section):\n\t          formatCode.append(this.createTextCode(section));\n\t          break;\n\t\n\t        // Number\n\t        case /#|\\?|0/.test(section):\n\t          if (!condition) {\n\t            condition = 'type === \"Number\"';\n\t          }\n\t          formatCode.append(this.createNumberCode(section, shouldAbsNumber));\n\t          break;\n\t\n\t        // DateTime\n\t        case /h|m|s|y|d/i.test(section):\n\t          if (!condition) {\n\t            condition = 'type === \"DateTime\"';\n\t          }\n\t          formatCode.append(this.createDateTimeCode(section));\n\t          break;\n\t\n\t      }\n\t\n\t      // Add return statement\n\t      formatCode.append('\\n      return makeResult.call(this);\\n    ');\n\t\n\t      // Build final section code\n\t      if (condition) {\n\t        code.append('\\n        // Section\\n        if (' + condition + ') {\\n          ' + formatCode + '\\n        }\\n        // End section\\n      ');\n\t      } else {\n\t        code.append('\\n        // Section\\n        ' + formatCode + '\\n        // End section\\n      ');\n\t      }\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'createPatternCode',\n\t    value: function createPatternCode(pattern) {\n\t      var _this3 = this;\n\t\n\t      var origins = [];\n\t      var replaces = '';\n\t\n\t      // Find quotes, slash symbols\n\t      var patternReplaced = pattern.replace(/\"([^\"]+)\"|\\\\(.?)|(_.?)|(\\*.?)|(\")/g, function (a, m1, m2, m3) {\n\t        // Quote found\n\t        if (m1) {\n\t          origins.push(m1.replace(/(\"|'|\\\\)/g, \"\\\\$1\"));\n\t          return '[' + (replaces += '$') + ']';\n\t        }\n\t        // Slash found\n\t        if (m2) {\n\t          origins.push(m2.replace(/(\"|'|\\\\)/g, \"\\\\$1\"));\n\t          return '[' + (replaces += '$') + ']';\n\t        }\n\t        // Space found\n\t        if (m3) {\n\t          origins.push(' ');\n\t          return '[' + (replaces += '$') + ']';\n\t        }\n\t        return '';\n\t      });\n\t\n\t      // Split pattern to sections\n\t      var sections = patternReplaced.split(/;/);\n\t\n\t      // Init code\n\t      var code = new _utils.Code();\n\t\n\t      // Start variables\n\t      code.append('\\n      var result = {\\n        value: \"\",\\n        align: type === \"Number\" || type === \"DateTime\" ? \"right\" : \"\",\\n        color: \"\",\\n        pattern: \"\"\\n      };\\n\\n      function makeResult() {\\n        var origins = {0};\\n        result.value = this.restoreOrigins(result.value, origins);\\n        result.pattern = this.restoreOrigins(result.pattern, origins);\\n        return result;\\n      };\\n    ', origins);\n\t\n\t      // Remove unnesessary sections\n\t      sections = sections.slice(0, 4);\n\t\n\t      // Loop trough sections\n\t      sections.forEach(function (section, sectionIndex) {\n\t        return code.append(_this3.createSectionCode(section, sectionIndex, sections.length));\n\t      });\n\t\n\t      // Return statement\n\t      code.append('\\n      result.value = {0};\\n      result.pattern = {0};\\n      return makeResult.call(this);\\n    ', patternReplaced);\n\t\n\t      return code.toString();\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format(n, type, pattern) {\n\t      this.log('Input:');\n\t      this.log('n = ' + n + ', type = ' + type + ', pattern = ' + pattern);\n\t\n\t      n = n.toString();\n\t      pattern = pattern.toString();\n\t\n\t      // Find predefined format\n\t      if (this.locale.formats[pattern]) {\n\t        pattern = this.locale.formats[pattern];\n\t      }\n\t\n\t      // Create function\n\t      if (!this.memoized[pattern]) {\n\t        var code = this.createPatternCode(pattern);\n\t\n\t        // Transform code\n\t        code = this.transformCode(code);\n\t\n\t        // Memoize function\n\t        this.memoized[pattern] = Function('n', 'type', code);\n\t\n\t        // Log code\n\t        this.log('Code:');\n\t        this.log(code);\n\t      }\n\t\n\t      // Call function\n\t      var result = this.memoized[pattern].call(this, n, type);\n\t\n\t      // Log result\n\t      this.log('Result:');\n\t      this.log(result);\n\t\n\t      return result;\n\t    }\n\t  }]);\n\t\n\t  return DataFormatter;\n\t}();\n\t\n\t;\n\t\n\t// Create instance\n\tvar dataFormatter = new DataFormatter();\n\t\n\t// Add AMD support\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return dataFormatter;\n\t  }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return DataFormatter;\n\t  }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t// CommonJS\n\telse if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n\t    module.exports = dataFormatter;\n\t    module.exports.DataFormatter = DataFormatter;\n\t  }\n\t  // Window\n\t  else {\n\t      global.dataFormatter = dataFormatter;\n\t      global.DataFormatter = DataFormatter;\n\t    }\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\texports.formatString = formatString;\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Format string like sprintf() in PHP\n\t */\n\tfunction formatString(s) {\n\t  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\t\n\t  return s.replace(/{(\\d+)}/g, function (match, number) {\n\t    return typeof args[number] != 'undefined' ? args[number] : match;\n\t  });\n\t};\n\t\n\t/**\n\t * Class for building code\n\t */\n\t\n\tvar Code = exports.Code = function () {\n\t  function Code() {\n\t    _classCallCheck(this, Code);\n\t\n\t    this.code = '';\n\t  }\n\t\n\t  _createClass(Code, [{\n\t    key: 'makeString',\n\t    value: function makeString(s) {\n\t      for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t        values[_key2 - 1] = arguments[_key2];\n\t      }\n\t\n\t      values = values.map(JSON.stringify);\n\t      return formatString.apply(undefined, [s].concat(_toConsumableArray(values)));\n\t    }\n\t  }, {\n\t    key: 'append',\n\t    value: function append() {\n\t      this.code += this.makeString.apply(this, arguments);\n\t    }\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return this.code;\n\t    }\n\t  }]);\n\t\n\t  return Code;\n\t}();\n\t\n\t;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar map = {\n\t\t\"./en-US.js\": 3,\n\t\t\"./ru.js\": 4\n\t};\n\tfunction webpackContext(req) {\n\t\treturn __webpack_require__(webpackContextResolve(req));\n\t};\n\tfunction webpackContextResolve(req) {\n\t\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n\t};\n\twebpackContext.keys = function webpackContextKeys() {\n\t\treturn Object.keys(map);\n\t};\n\twebpackContext.resolve = webpackContextResolve;\n\tmodule.exports = webpackContext;\n\twebpackContext.id = 2;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  months: ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'],\n\t  monthsShort: ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],\n\t  days: ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],\n\t  daysShort: ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'],\n\t  thousandSeparator: ' ',\n\t  decimalSeparator: ',',\n\t  formats: {\n\t    'General Number': '#.#',\n\t    'Currency': '$ #,##0.00;[Red]$ -#,##0.00',\n\t    'Fixed': '0.00',\n\t    'Standard': '#,##0.00',\n\t    'Percent': '0.00%',\n\t    'Scientific': '0.00E+00',\n\t    'Yes/No': '\"Yes\";\"Yes\";\"No\"',\n\t    'True/False': '\"True\";\"True\";\"False\"',\n\t    'On/Off': '\"On\";\"On\";\"Off\"',\n\t    'Short Date': 'mm.dd.yyyy',\n\t    'Long Date': 'dd mmmm yyyy',\n\t    'General Date': 'mm.dd.yyyy h:mm',\n\t    'Medium Date': 'dd.mmm.yy',\n\t    'Long Time': 'hh:mm:ss AM/PM',\n\t    'Short Time': 'h:mm',\n\t    'Medium Time': 'hh:mm AM/PM'\n\t  }\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  months: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'],\n\t  monthsShort: ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'],\n\t  days: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],\n\t  daysShort: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],\n\t  thousandSeparator: ' ',\n\t  decimalSeparator: ',',\n\t  formats: {\n\t    'General Number': '#.#',\n\t    'Currency': '#,##0.00р.;[Red]-#,##0.00р.',\n\t    'Fixed': '0.00',\n\t    'Standard': '#,##0.00',\n\t    'Percent': '0.00%',\n\t    'Scientific': '0.00E+00',\n\t    'Yes/No': '\"Да\";\"Да\";\"Нет\"',\n\t    'True/False': '\"Истина\";\"Истина\";\"Ложь\"',\n\t    'On/Off': '\"Вкл\";\"Вкл\";\"Выкл\"',\n\t    'Short Date': 'mm.dd.yyyy',\n\t    'Long Date': 'dd mmmm yyyy',\n\t    'General Date': 'mm.dd.yyyy h:mm',\n\t    'Medium Date': 'dd.mmm.yy',\n\t    'Long Time': 'hh:mm:ss AM/PM',\n\t    'Short Time': 'h:mm',\n\t    'Medium Time': 'hh:mm AM/PM'\n\t  }\n\t};\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** test.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b805c0e97d9e7e193c16\n **/","import { Code } from './utils';\n\nconst defaultLocale = 'en-US';\n\nclass DataFormatter {\n\n  /**\n   * Constructor\n   * Available options are:\n   *   debug {boolean} - enable debug mode\n   *   UTCOffset {number|null} - UTC offset in minutes for dates\n   *   locale {string}\n   *   transformCode {function} - code transformer\n   * @param {object} options\n   */\n  constructor({\n    debug = false,\n    UTCOffset = null,\n    locale = defaultLocale,\n    transformCode = (code)=> code\n  } = {}) {\n\n    this.memoized = {};\n    this.debug = debug;\n    this.UTCOffset = UTCOffset;\n    this.transformCode = transformCode;\n    this.zeroDate = this.createDate('1899-12-31T00:00:00.000');\n\n    this.setLocale(locale);\n  }\n\n  /**\n   * Resets memoized pattern functions\n   */\n  clearMemoizedFunctions() {\n    this.memoized = {};\n  }\n\n  /**\n   * Sets locale\n   * If locale doesn't exist, sets default\n   * @param {string} locale\n   */\n  setLocale(locale) {\n    let localeData = require('./locales/' + locale + '.js');\n    if (!localeData) {\n      localeData = require('./locales/' + defaultLocale + '.js');\n    }\n    this.locale = localeData.default;\n    this.clearMemoizedFunctions();\n  }\n\n  /**\n   * Sets UTC offset for dates\n   * @param {number|null} UTCOffset in minutes\n   */\n  setUTCOffset(UTCOffset) {\n    this.UTCOffset = UTCOffset;\n  }\n\n  /**\n   * Creates new date instance\n   */\n  createDate() {\n    let date = new Date(...arguments);\n\n    if (this.UTCOffset !== null) {\n      let clientOffset = date.getTimezoneOffset();\n      let newOffset = this.UTCOffset + clientOffset;\n      let newOffsetMs = newOffset * 60 * 1000;\n\n      date.setTime(date.getTime() + newOffsetMs);\n    }\n\n    return date;\n  }\n\n  /**\n   * Logger\n   */\n  log(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n\n  /**\n   * Greatest common divisor\n   */\n  gcd(a, b) {\n    let r;\n    while (b) {\n      r = a % b;\n      a = b;\n      b = r;\n    }\n    return a;\n  }\n\n  applyNumberPattern(n, pattern, direction) {\n    n = n.toString();\n    let s = '';\n\n    if (direction === 'right') {\n      let j = 0;\n      let i = -1;\n      let patLen = pattern.length\n\n      while (++i < patLen) {\n        switch (pattern[i]) {\n          case '0':\n            s += n[j] || '0';\n            j++;\n            break;\n          case '#':\n            s += n[j] || '';\n            j++;\n            break;\n          case '?':\n            s += n[j] || ' ';\n            j++;\n            break;\n          case '[':\n            while (i < pattern.length && pattern[i] !== ']') {\n              s += pattern[i];\n              i++;\n            }\n            i--;\n            break;\n          default:\n            s += pattern[i];\n        }\n      }\n    }\n    else {\n      // Should separate thousands\n      let separateThousands = false;\n      let mostLeftDigit;\n\n      pattern = pattern.replace(/(0|#|\\?)(,+?)(0|#|\\?)/g, (a, m1, m2, m3)=> {\n        separateThousands = true;\n        return m1 + m3;\n      });\n\n      // Add separation\n      if (separateThousands) {\n        let j = n.length - 3;\n        while ((n[0] === '-' ? j > 1 : j > 0)) {\n          n = n.substr(0, j) + this.locale.thousandSeparator + n.substr(j);\n          j -= 3;\n        }\n      }\n\n      let j = n.length - 1;\n      let i = pattern.length;\n\n      while (i--) {\n        switch (pattern[i]) {\n          case '0':\n            s = (n[j] || '0') + s;\n            mostLeftDigit = i;\n            j--;\n            break;\n          case '#':\n            s = (n[j] || '') + s;\n            mostLeftDigit = i;\n            j--;\n            break;\n          case '?':\n            s = (n[j] || ' ') + s;\n            mostLeftDigit = i;\n            j--;\n            break;\n          case ']':\n            while (i > 0 && pattern[i] !== '[') {\n              s = pattern[i] + s;\n              i--;\n            }\n            i++;\n            break;\n          default:\n            s = pattern[i] + s;\n        }\n      }\n      // Add remaining digits, example: n=1234, ptrn=00, result must be 1234 instead of 34\n      if (j >= 0 && mostLeftDigit !== null) {\n        s = s.substr(0, mostLeftDigit) +\n            n.substr(0, j + 1) +\n            s.substr(mostLeftDigit);\n      }\n    }\n\n    return s;\n  }\n\n  restoreOrigins(value, origins) {\n    return value.toString().replace(/\\[(?:(\\$*?)|(.*?))\\]/g, (a, m1)=>\n      m1 && origins[m1.length - 1] || a\n    );\n  }\n\n  formatAsNumberDecimal(n, decimals, patternIntegerPart, patternDecimalPart) {\n\n    n = n.toFixed(decimals).toString().split('.');\n    let integerPart = parseInt(n[0]);\n    let decimalPart = parseInt(n[1] || 0);\n\n    return this.applyNumberPattern(integerPart, patternIntegerPart) +\n      this.locale.decimalSeparator +\n      this.applyNumberPattern(decimalPart, patternDecimalPart, 'right');\n  }\n\n  formatAsNumberFractial(n, patternNumeratorPart, patternDenominatorPart) {\n    let m = n.toString().split(\".\");\n    m = m[1] ? Math.pow(10, m[1].length) : 1;\n    n = Math.floor(n * m);\n\n    let factor = this.gcd(n, m);\n\n    return this.applyNumberPattern(n / factor, patternNumeratorPart) +\n      '/' +\n      this.applyNumberPattern(m / factor, patternDenominatorPart);\n  }\n\n  formatAsNumberFractialMixed(n, leftPatternNumeratorPart, rightPatternNumeratorPart, patternDenominatorPart) {\n    let f = 0;\n    let c = 1;\n    let factor = 1;\n    let m = n.toString().split('.');\n\n    if (m[1]) {\n      c = Math.pow(10, m[1].length);\n      f = parseInt(m[1]);\n      factor = this.gcd(f, c);\n    }\n\n    return this.applyNumberPattern(Math.floor(n), leftPatternNumeratorPart) +\n      this.applyNumberPattern(f / factor, rightPatternNumeratorPart) +\n      '/' +\n      this.applyNumberPattern(c / factor, patternDenominatorPart);\n  }\n\n  formatAsNumberExponential(n, integerPart, decimalPart, patternIntegerPart, patternDecimalPart, patternPowPart) {\n\n    let sign = n < 0 ? -1 : 1;\n    let pow = 0;\n\n    if (n !== 0) {\n\n      n = Math.abs(n);\n\n      let integerPartDivision = Math.pow(10, integerPart);\n\n      while(n < integerPartDivision || n.toFixed(decimalPart) < integerPartDivision){\n        n *= 10;\n        pow ++;\n      }\n\n      while(n >= integerPartDivision || n.toFixed(decimalPart) >= integerPartDivision){\n        n /= 10;\n        pow --;\n      }\n\n    }\n\n    n = (n * sign).toFixed(decimalPart).toString().split('.');\n\n    // Build res\n    let res = '';\n\n    // Integer part\n    res += this.applyNumberPattern(parseInt(n[0]), patternIntegerPart);\n\n    // Decimal part\n    if (patternDecimalPart) {\n      res += this.locale.decimalSeparator +\n        this.applyNumberPattern(parseInt(n[1]), patternDecimalPart, 'right');\n    }\n\n    // Pow part\n    res += 'E' +\n      (pow > 0 ? '-' : '+') +\n      this.applyNumberPattern(Math.abs(pow), patternPowPart);\n\n    return res;\n  }\n\n  formatAsDateTimeElapsed(n, foundDays, foundHours, foundMinutes, pattern) {\n\n    n = Math.abs(n.getTime() - this.zeroDate.getTime());\n\n    let seconds = parseInt(n / 1000);\n    let minutes = parseInt(seconds / 60);\n    let hours = parseInt(minutes / 60);\n    let days = parseInt(hours / 24);\n\n    hours = foundDays ? hours % 24 : hours;\n    minutes = foundHours ? minutes % 60 : minutes;\n    seconds = foundMinutes ? seconds % 60 : seconds;\n\n    return pattern.replace(/(dd)|(d)|(hh)|(h)|(mm)|(m)|(ss)|(s)/gi, (a, dd, d, hh, h, mm, m, ss, s)=> {\n\n      if (dd) {\n        return this.applyNumberPattern(days, '00');\n      }\n\n      if (d) {\n        return days;\n      }\n\n      if (hh) {\n        return this.applyNumberPattern(hours, '00');\n      }\n\n      if (h) {\n        return hours;\n      }\n\n      if (mm) {\n        return this.applyNumberPattern(minutes, '00');\n      }\n\n      if (m) {\n        return minutes;\n      }\n\n      if (ss) {\n        return this.applyNumberPattern(seconds, '00');\n      }\n\n      if (s) {\n        return seconds;\n      }\n\n      return '';\n    });\n  }\n\n  formatAsDateTimeNormal(n, pattern) {\n    let { days, daysShort, months, monthsShort } = this.locale;\n    let foundAMPM = false;\n\n    let year = n.getFullYear();\n    let month = n.getMonth();\n    let date = n.getDate();\n    let weekDay = n.getDay();\n    let hours = n.getHours();\n    let minutes = n.getMinutes();\n    let seconds = n.getSeconds();\n\n    // Build res\n    let res = pattern.replace(/((?:am\\/pm)|(?:a\\/p))|(?:(h[^ydsap]*?)mm)|(?:mm([^ydh]*?s))|(?:(h[^ydsap]*?)m)|(?:m([^ydh]*?s))/gi, (a, ampm, fmin, fmin2, mmin, mmin2)=> {\n\n      if (ampm) {\n        foundAMPM = true;\n        return '[]';\n      }\n\n      if (fmin) {\n        return fmin + this.applyNumberPattern(minutes, '00');\n      }\n\n      if (fmin2) {\n        return this.applyNumberPattern(minutes, '00') + fmin2;\n      }\n\n      if (mmin) {\n        return mmin + minutes;\n      }\n\n      if (mmin2) {\n        return minutes + mmin2;\n      }\n\n      return '';\n    });\n\n    return res.replace(/(ss)|(s)|(hh)|(h)|(dddd)|(ddd)|(dd)|(d)|(mmmmm)|(mmmm)|(mmm)|(mm)|(m)|(yyyy)|(yy)|(\\[\\])/gi, (a, ss, s, hh, h, dddd, ddd, dd, d, mmmmm, mmmm, mmm, mm, m, yyyy, yy, ampm)=> {\n\n      if (ss) {\n        return this.applyNumberPattern(seconds, '00');\n      }\n\n      if (s) {\n        return seconds;\n      }\n\n      if (hh) {\n        return this.applyNumberPattern(foundAMPM ? hours % 12 : hours, '00');\n      }\n\n      if (h) {\n        return foundAMPM ? hours % 12 : hours;\n      }\n\n      if (dddd) {\n        return days[weekDay];\n      }\n\n      if (ddd) {\n        return daysShort[weekDay];\n      }\n\n      if (dd) {\n        return this.applyNumberPattern(date, '00');\n      }\n\n      if (d) {\n        return date;\n      }\n\n      if (mmmmm) {\n        return monthsShort[month][0];\n      }\n\n      if (mmmm) {\n        return months[month];\n      }\n\n      if (mmm) {\n        return monthsShort[month];\n      }\n\n      if (mm) {\n        return this.applyNumberPattern(month + 1, '00');\n      }\n\n      if (m) {\n        return month + 1;\n      }\n\n      if (yyyy) {\n        return year;\n      }\n\n      if (yy) {\n        return year.toString().substr(2);\n      }\n\n      if (ampm) {\n        return hours < 12 ? 'AM' : 'PM';\n      }\n\n      return '';\n    });\n  }\n\n  createTextCode(section) {\n    let code = new Code();\n\n    code.append(`\n      result.value = {0}.replace(/@/, n);\n    `, section);\n\n    return code.toString();\n  }\n\n  createGeneralCode() {\n    let code = new Code();\n    let numberCode = this.createNumberCode('#.00');\n    let dateTimeCode = this.createDateTimeCode('[d]');\n\n    code.append(`\n      if (type === \"Number\") {\n        ${numberCode}\n      }\n      if (type === \"DateTime\") {\n        ${dateTimeCode}\n      }\n    `);\n\n    return code.toString();\n  }\n\n  createNumberExponentialCode(exponentialMatch) {\n    let patternIntegerPart = exponentialMatch[1];\n    let patternDecimalPart = exponentialMatch[2];\n    let patternPowPart = exponentialMatch[3];\n    let code = new Code();\n    let integerPart;\n    let decimalPart;\n\n    let zerosCount = (s)=> s.match(/0|\\?|#/g).length;\n\n    // Integer part\n    if (!patternIntegerPart) {\n      patternIntegerPart = '#';\n      integerPart = 1;\n    }\n    else {\n      integerPart = zerosCount(patternIntegerPart);\n    }\n\n    // Decimal part\n    if (!patternDecimalPart) {\n      patternDecimalPart = '';\n      decimalPart = 0;\n    }\n    else {\n      decimalPart = zerosCount(patternDecimalPart);\n    }\n\n    code.append(`\n      result.value = this.formatAsNumberExponential(n, {0}, {1}, {2}, {3}, {4});\n    `,\n      integerPart,\n      decimalPart,\n      patternIntegerPart,\n      patternDecimalPart,\n      patternPowPart\n    );\n\n    return code.toString();\n  }\n\n  createNumberFractialCode(fractialMatch) {\n    let code = new Code();\n    let patternNumeratorPart = fractialMatch[1] || '#';\n    let patternDenominatorPart = fractialMatch[2] || '#';\n    // TODO watch here\n    let zeroPos = patternNumeratorPart.length - 1;\n\n    while (\n      patternNumeratorPart[zeroPos] === '0' &&\n      patternNumeratorPart[zeroPos] !== '?' &&\n      patternNumeratorPart[zeroPos] !== '#' &&\n      patternNumeratorPart[zeroPos] !== ' ' &&\n      zeroPos > 0\n    ) {\n      zeroPos --;\n    }\n\n    let leftPatternNumeratorPart = patternNumeratorPart.substr(0, zeroPos);\n    let rightPatternNumeratorPart = patternNumeratorPart.substr(zeroPos);\n\n    if (!leftPatternNumeratorPart) {\n      code.append(`\n        result.value = this.formatAsNumberFractial(n, {0}, {1});\n      `,\n        rightPatternNumeratorPart,\n        patternDenominatorPart\n      );\n    }\n    // Mixed fraction\n    else {\n      code.append(`\n        result.value = this.formatAsNumberFractialMixed(n, {0}, {1}, {2});\n      `,\n        leftPatternNumeratorPart,\n        rightPatternNumeratorPart,\n        patternDenominatorPart\n      );\n    }\n\n    return code.toString();\n  }\n\n  createNumberDecimalCode(decimalMatch) {\n    let code = new Code();\n    let patternIntegerPart = decimalMatch[1] || '0';\n    let patternDecimalPart = decimalMatch[2] || '';\n    let decimals;\n    let factor = 1;\n\n    let zerosCount = (s)=> s.match(/0|\\?|#/g).length;\n\n    if (!patternDecimalPart) {\n      decimals = 0;\n    }\n    else {\n      decimals = zerosCount(patternDecimalPart);\n    }\n\n    // Spaces before .\n    patternIntegerPart = patternIntegerPart.replace(/(0|#|\\?)(,+)([^0?#]*)$/, (a, m1, m2, m3)=> {\n      factor *= Math.pow(1000, m2.length);\n      return m1 + m3;\n    });\n\n    if (factor !== 1) {\n      code.append(`\n        n /= {0};\n      `, factor);\n    }\n\n    code.append(`\n      result.value = this.formatAsNumberDecimal(n, {0}, {1}, {2});\n    `,\n      decimals,\n      patternIntegerPart,\n      patternDecimalPart\n    );\n\n    return code.toString();\n  }\n\n  createNumberIntegerCode(section) {\n    let code = new Code();\n\n    code.append(`\n      n = Math.round(n);\n      result.value = this.applyNumberPattern(n, {0});\n    `, section);\n\n    return code.toString();\n  }\n\n  createNumberCode(section, shouldAbsNumber) {\n    let numberCode = new Code();\n\n    // Abs\n    if (shouldAbsNumber) {\n      numberCode.append(`\n        n = Math.abs(n);\n      `);\n    }\n\n    // Exponential form regexp\n    let exponentialMatch = section.match(/(.*?)(?:\\.(.*?))?e(?:\\+|\\-)(.*)/i);\n\n    if (exponentialMatch) {\n\n      // Exponential form\n      numberCode.append(this.createNumberExponentialCode(exponentialMatch));\n\n    }\n    else {\n      let factor = 1;\n\n      // Spaces before end and decimal separator (.)\n      section = section.replace(/(0|#|\\?)(\\s+)([^0?#]*?)($|\\.)/, (a, m1, m2, m3, m4)=> {\n        factor *= Math.pow(1000, m2.length);\n        return m1 + m3 + m4;\n      });\n\n      // Percents\n      let percentMatch = section.match(/%/g);\n      if (percentMatch) {\n        factor /= Math.pow(100, percentMatch.length);\n      }\n\n      // Factor\n      if (factor !== 1) {\n        numberCode.append(`\n          n /= {0};\n        `, factor);\n      }\n\n      let fractialMatch;\n      let decimalMatch;\n\n      switch (true) {\n\n        // Fractial form\n        case !!(fractialMatch = section.match(/(.*?)\\/(.*)/)):\n          numberCode.append(this.createNumberFractialCode(fractialMatch));\n          break;\n\n        // Decimal form\n        case !!(decimalMatch = section.match(/(.*?)\\.(.*)/)):\n          numberCode.append(this.createNumberDecimalCode(decimalMatch));\n          break;\n\n        // Integer form\n        default:\n          numberCode.append(this.createNumberIntegerCode(section));\n\n      }\n    }\n\n    // Final code\n    let code = new Code();\n\n    // Parse to float\n    code.append(`\n      n = parseFloat(n);\n    `);\n\n    // Checks\n    code.append(`\n      if (!isNaN(n)) {\n        if (n >= 1e21 || n <= -1e21) {\n          result.value = n.toString().toUpperCase();\n        }\n        else {\n          ${numberCode}\n        }\n      }\n    `);\n\n    return code.toString();\n  }\n\n  createDateTimeElapsedCode(section) {\n    let code = new Code();\n\n    let foundDays = /d/i.test(section);\n    let foundHours = /h/i.test(section);\n    let foundMinutes = /m/i.test(section);\n\n    code.append(`\n      result.value = this.formatAsDateTimeElapsed(n, {0}, {1}, {2}, {3});\n    `,\n      foundDays,\n      foundHours,\n      foundMinutes,\n      section\n    );\n\n    return code.toString();\n  }\n\n  createDateTimeNormalCode(section) {\n    let code = new Code();\n\n    code.append(`\n      result.value = this.formatAsDateTimeNormal(n, {0});\n    `, section);\n\n    return code.toString();\n  }\n\n  createDateTimeCode(section) {\n    let code = new Code();\n    let elapsed = false;\n\n    section = section.replace(/\\[(h+?|m+?|s+?|y+?|d+?)]/ig, (a, m1)=> {\n      elapsed = true;\n      return m1;\n    });\n\n    let dateTimeCode = elapsed ?\n                       this.createDateTimeElapsedCode(section) :\n                       this.createDateTimeNormalCode(section);\n\n    code.append(`\n      n = this.createDate(n);\n      if (!isNaN(n.getTime())) {\n        ${dateTimeCode}\n      }\n    `);\n\n    return code.toString();\n  }\n\n  createSectionCode(section, sectionIndex, sectionsCount) {\n    // Start creating code for function\n    let code = new Code();\n\n    let condition;\n    let shouldAbsNumber = false;\n\n    // Find condition for sector or add standard sector condition (positive number, negative number, etc.)\n    let conditionMatch = section.match(/\\[((?:>|>=|<|<=|=|<>)[0-9\\.]+?)]/);\n\n    switch(true) {\n\n      // Found condition\n      case !!conditionMatch:\n        let cond = conditionMatch[1]\n          .replace(/<>/, '!=')\n          .replace('/=/', '==');\n        condition = `type == \"Number\" && parseFloat(n)${cond}`;\n        break;\n\n      // Standard condition for first section of 3+\n      case sectionIndex === 0 && sectionsCount > 2:\n        condition = `type == \"Number\" && parseFloat(n) > 0`;\n        break;\n\n      // Standard condition for first section of 2\n      case sectionIndex === 0 && sectionsCount === 2:\n        condition = `type == \"Number\" && parseFloat(n) >= 0`;\n        break;\n\n      // Standard condition for negative number\n      case sectionIndex === 1:\n        condition = `type == \"Number\" && parseFloat(n) < 0`;\n        shouldAbsNumber = true;\n        break;\n\n    }\n\n    // Find text color\n    section = section.replace(/\\[(Red|Green|White|Blue|Magenta|Yellow|Cyan|Black)]/gi, (a, m1)=> {\n      code.append(`\n        result.color = {0};\n      `, m1);\n      return '';\n    });\n\n    // Remove all [], except our replacements and elapsed days, hours, minutes, seconds\n    section = section.replace(/(\\[((?!((\\$*?)|(d*?)|(h*?)|(m*?)|(s*?))]).*?)])/, '');\n\n    // Format code\n    let formatCode = new Code();\n\n    // Defaults\n    formatCode.append(`\n      result.value = {0};\n      result.pattern = {0};\n    `, section);\n\n    switch (true) {\n\n      // General format\n      case /General/i.test(section):\n        formatCode.append(this.createGeneralCode(section));\n        break;\n\n      // Text\n      case /@/.test(section):\n        formatCode.append(this.createTextCode(section));\n        break;\n\n      // Number\n      case /#|\\?|0/.test(section):\n        if (!condition) {\n          condition = 'type === \"Number\"';\n        }\n        formatCode.append(this.createNumberCode(section, shouldAbsNumber));\n        break;\n\n      // DateTime\n      case /h|m|s|y|d/i.test(section):\n        if (!condition) {\n          condition = 'type === \"DateTime\"';\n        }\n        formatCode.append(this.createDateTimeCode(section));\n        break;\n\n    }\n\n    // Add return statement\n    formatCode.append(`\n      return makeResult.call(this);\n    `);\n\n    // Build final section code\n    if (condition) {\n      code.append(`\n        // Section\n        if (${condition}) {\n          ${formatCode}\n        }\n        // End section\n      `);\n    }\n    else {\n      code.append(`\n        // Section\n        ${formatCode}\n        // End section\n      `);\n    }\n\n    return code.toString();\n  }\n\n  createPatternCode(pattern) {\n    let origins = [];\n    let replaces = '';\n\n    // Find quotes, slash symbols\n    let patternReplaced = pattern.replace(/\"([^\"]+)\"|\\\\(.?)|(_.?)|(\\*.?)|(\")/g, function(a, m1, m2, m3) {\n      // Quote found\n      if (m1) {\n        origins.push(m1.replace(/(\"|'|\\\\)/g, \"\\\\$1\"));\n        return `[${(replaces += '$')}]`;\n      }\n      // Slash found\n      if (m2) {\n        origins.push(m2.replace(/(\"|'|\\\\)/g, \"\\\\$1\"));\n        return `[${(replaces += '$')}]`\n      }\n      // Space found\n      if (m3) {\n        origins.push(' ');\n        return `[${(replaces += '$')}]`;\n      }\n      return '';\n    });\n\n    // Split pattern to sections\n    let sections = patternReplaced.split(/;/);\n\n    // Init code\n    let code = new Code();\n\n    // Start variables\n    code.append(`\n      var result = {\n        value: \"\",\n        align: type === \"Number\" || type === \"DateTime\" ? \"right\" : \"\",\n        color: \"\",\n        pattern: \"\"\n      };\n\n      function makeResult() {\n        var origins = {0};\n        result.value = this.restoreOrigins(result.value, origins);\n        result.pattern = this.restoreOrigins(result.pattern, origins);\n        return result;\n      };\n    `, origins);\n\n    // Remove unnesessary sections\n    sections = sections.slice(0, 4);\n\n    // Loop trough sections\n    sections.forEach((section, sectionIndex)=>\n      code.append(this.createSectionCode(section, sectionIndex, sections.length))\n    );\n\n    // Return statement\n    code.append(`\n      result.value = {0};\n      result.pattern = {0};\n      return makeResult.call(this);\n    `, patternReplaced);\n\n    return code.toString();\n  }\n\n  format(n, type, pattern) {\n    this.log(`Input:`);\n    this.log(`n = ${n}, type = ${type}, pattern = ${pattern}`);\n\n    n = n.toString();\n    pattern = pattern.toString();\n\n    // Find predefined format\n    if (this.locale.formats[pattern]) {\n      pattern = this.locale.formats[pattern];\n    }\n\n    // Create function\n    if (!this.memoized[pattern]) {\n      let code = this.createPatternCode(pattern);\n\n      // Transform code\n      code = this.transformCode(code);\n\n      // Memoize function\n      this.memoized[pattern] = Function('n', 'type', code);\n\n      // Log code\n      this.log('Code:');\n      this.log(code);\n    }\n\n    // Call function\n    const result = this.memoized[pattern].call(this, n, type);\n\n    // Log result\n    this.log('Result:');\n    this.log(result);\n\n    return result;\n  }\n\n};\n\n// Create instance\nconst dataFormatter = new DataFormatter();\n\n// Add AMD support\nif (typeof define === 'function' && define.amd) {\n  define('dataFormatter', ()=> dataFormatter);\n  define('DataFormatter', ()=> DataFormatter);\n}\n// CommonJS\nelse if (typeof module === 'object' && module.exports) {\n  module.exports = dataFormatter;\n  module.exports.DataFormatter = DataFormatter;\n}\n// Window\nelse {\n  global.dataFormatter = dataFormatter;\n  global.DataFormatter = DataFormatter;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","/**\n * Format string like sprintf() in PHP\n */\nexport function formatString(s, ...args) {\n  return s.replace(/{(\\d+)}/g, (match, number)=>\n    typeof args[number] != 'undefined' ? args[number] : match\n  );\n};\n\n/**\n * Class for building code\n */\nexport class Code {\n\n  constructor() {\n    this.code = '';\n  }\n\n  makeString(s, ...values) {\n    values = values.map(JSON.stringify);\n    return formatString(s, ...values);\n  }\n\n  append() {\n    this.code += this.makeString(...arguments);\n  }\n\n  toString() {\n    return this.code;\n  }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/utils.js\n **/","var map = {\n\t\"./en-US.js\": 3,\n\t\"./ru.js\": 4\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/locales ^\\.\\/.*\\.js$\n ** module id = 2\n ** module chunks = 0\n **/","export default {\n  months: ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'],\n  monthsShort: ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],\n  days: ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],\n  daysShort: ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'],\n  thousandSeparator: ' ',\n  decimalSeparator: ',',\n  formats: {\n    'General Number': '#.#',\n    'Currency': '$ #,##0.00;[Red]$ -#,##0.00',\n    'Fixed': '0.00',\n    'Standard': '#,##0.00',\n    'Percent': '0.00%',\n    'Scientific': '0.00E+00',\n    'Yes/No': '\"Yes\";\"Yes\";\"No\"',\n    'True/False': '\"True\";\"True\";\"False\"',\n    'On/Off': '\"On\";\"On\";\"Off\"',\n    'Short Date': 'mm.dd.yyyy',\n    'Long Date': 'dd mmmm yyyy',\n    'General Date': 'mm.dd.yyyy h:mm',\n    'Medium Date': 'dd.mmm.yy',\n    'Long Time': 'hh:mm:ss AM/PM',\n    'Short Time': 'h:mm',\n    'Medium Time': 'hh:mm AM/PM'\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/locales/en-US.js\n **/","export default {\n  months: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'],\n  monthsShort: ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'],\n  days: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],\n  daysShort: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],\n  thousandSeparator: ' ',\n  decimalSeparator: ',',\n  formats: {\n    'General Number': '#.#',\n    'Currency': '#,##0.00р.;[Red]-#,##0.00р.',\n    'Fixed': '0.00',\n    'Standard': '#,##0.00',\n    'Percent': '0.00%',\n    'Scientific': '0.00E+00',\n    'Yes/No': '\"Да\";\"Да\";\"Нет\"',\n    'True/False': '\"Истина\";\"Истина\";\"Ложь\"',\n    'On/Off': '\"Вкл\";\"Вкл\";\"Выкл\"',\n    'Short Date': 'mm.dd.yyyy',\n    'Long Date': 'dd mmmm yyyy',\n    'General Date': 'mm.dd.yyyy h:mm',\n    'Medium Date': 'dd.mmm.yy',\n    'Long Time': 'hh:mm:ss AM/PM',\n    'Short Time': 'h:mm',\n    'Medium Time': 'hh:mm AM/PM'\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/locales/ru.js\n **/"],"sourceRoot":""}